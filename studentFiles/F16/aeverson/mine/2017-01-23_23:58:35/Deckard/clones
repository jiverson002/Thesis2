========== 1 ==========
(1) FILE: ../../cclient.c LINES:77:10 TOKENS:640:709 DIST:0.0

void sendExitRequest ( ) { exitReq * c = malloc ( sizeof ( exitReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 8 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send Exit Req" ) ; exit ( - 1 ) ; } free ( c ) ; } 
(2) FILE: ../../cclient.c LINES:67:10 TOKENS:570:639 DIST:0.0

void sendListRequest ( ) { listReq * c = malloc ( sizeof ( listReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 10 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( - 1 ) ; } free ( c ) ; } 
========== 2 ==========
(1) FILE: ../../cclient.c LINES:236:3 TOKENS:1734:1811 DIST:3.7

if ( f < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( f == 0 ) { ( ( void ) ( ( ( & d ) -> __fds_bits ) [ ( ( e ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( e ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( 0 ) ; } else { parseDetails ( f , b , e , a ) ; } 
(2) FILE: ../../server.c LINES:195:4 TOKENS:1473:1555 DIST:0.0

if ( h < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( h == 0 ) { ( ( void ) ( ( ( & f ) -> __fds_bits ) [ ( ( c ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( c ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; removeSocket ( c ) ; } else { parseDetails ( h , g , a , c ) ; } 
========== 3 ==========
(1) FILE: ../../cclient.c LINES:126:8 TOKENS:993:1045 DIST:0.0

case 'M' : if ( getHandle ( & d , c ) < 0 ) { fprintf ( stderr , "Invalid command.\n" ) ; break ; } sendMessage ( a , & d , & h , b ) ; free ( h . msg ) ; free ( d . name ) ; getText ( & h , c ) ; c += d . len + 1 ; 
(2) FILE: ../../cclient.c LINES:131:7 TOKENS:1023:1075 DIST:2.2

case 'M' : if ( getHandle ( & d , c ) < 0 ) { fprintf ( stderr , "Invalid command.\n" ) ; break ; } sendMessage ( a , & d , & h , b ) ; free ( h . msg ) ; free ( d . name ) ; getText ( & h , c ) ; c += d . len + 1 ; break ; case 'B' : getText ( & h , c ) ; sendMsgToAll ( a , & h , b ) ; free ( h . msg ) ; 
========== 4 ==========
(1) FILE: ../../cclient.c LINES:63:9 TOKENS:557:619 DIST:0.0

char global_a [ 1024 ] ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } void sendInitPacket ( ) { ; unsigned char * d = malloc ( 4 + a -> len ) ; c . handle = a ; c . head . flag = 1 ; c . head . packetLen = htons ( 4 + a -> len ) ; memcpy ( d , & c . head , 3 ) ; memcpy ( & d [ 3 ] , & a -> len , 1 ) ; memcpy ( & d [ 4 ] , a -> name , a -> len ) ; if ( send ( b , d , 4 + a -> len , 0 ) < 0 ) { perror ( "Send on Client" ) ; exit ( - 1 ) ; } free ( d ) ; } void sendMessage ( ) { messagePacket * e = malloc ( sizeof ( messagePacket ) ) ; int f = 3 ; int g = 5 + a -> len + b -> len + c -> size ; unsigned char * h = malloc ( g ) ; e -> head . packetLen = htons ( g ) ; e -> head . flag = 5 ; e -> dest = b ; e -> src = a ; e -> text = c ; memcpy ( h , & e -> head , 3 ) ; memcpy ( & h [ 3 ] , & e -> dest -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> dest -> name , e -> dest -> len ) ; f += e -> dest -> len ; memcpy ( & h [ f ] , & e -> src -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> src -> name , e -> src -> len ) ; f += e -> src -> len ; memcpy ( & h [ f ] , e -> text -> msg , e -> text -> size ) ; if ( send ( d , ( void * ) h , g , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( - 1 ) ; } free ( e ) ; free ( h ) ; } void sendMsgToAll ( ) { ; int e = 4 + a -> len + b -> size ; char * f = malloc ( e ) ; d . flag = 4 ; d . packetLen = htons ( e ) ; memcpy ( f , & d , 3 ) ; memcpy ( & f [ 3 ] , & a -> len , 1 ) ; memcpy ( & f [ 4 ] , a -> name , a -> len ) ; memcpy ( & f [ 4 + a -> len ] , b -> msg , strlen ( b -> msg ) ) ; if ( send ( c , ( void * ) f , e , 0 ) < 0 ) { perror ( "Send broadcast" ) ; exit ( - 1 ) ; } free ( f ) ; } void sendListRequest ( ) { listReq * c = malloc ( sizeof ( listReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 10 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( - 1 ) ; } free ( c ) ; } 
(2) FILE: ../../cclient.c LINES:68:7 TOKENS:575:633 DIST:3.6

listReq * c = malloc ( sizeof ( listReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 10 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( - 1 ) ; } 
========== 5 ==========
(1) FILE: ../../server.c LINES:130:4 TOKENS:964:1017 DIST:2.6

case 1 : memcpy ( & e . len , & b [ 3 ] , 1 ) ; memcpy ( e . name , & b [ 4 ] , e . len ) ; free ( e . name ) ; e . name = malloc ( e . len ) ; 
(2) FILE: ../../server.c LINES:145:5 TOKENS:1118:1173 DIST:0.0

case 1 : memcpy ( & e . len , & b [ 3 ] , 1 ) ; memcpy ( e . name , & b [ 4 ] , e . len ) ; free ( e . name ) ; e . name = malloc ( e . len ) ; if ( findHandle ( e . name ) > 0 ) { sendBadHandle ( d ) ; } else { addHandle ( e . name , e . len , d ) ; sendHandleACK ( d ) ; } break ; case 4 : memcpy ( & e . len , & b [ 3 ] , 1 ) ; sendMessageToAll ( b , f , & e ) ; memcpy ( e . name , & b [ 4 ] , e . len ) ; e . name = malloc ( e . len + 1 ) ; e . name [ e . len ] = '\0' ; break ; case 5 : memcpy ( & i . len , & b [ 3 ] , 1 ) ; memcpy ( i . name , & b [ 4 ] , i . len ) ; free ( i . name ) ; 
========== 6 ==========
(1) FILE: ../../handleList.c LINES:7:10 TOKENS:32:92 DIST:0.0
__uint64_t __bswap_64(__uint64_t a) /*  */{
return __builtin_bswap64(a); /* return __builtin_bswap64(__bsx) */
}

Handle * global_a = ( ( void * ) 0 ) ; int32_t global_b = 0 ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int findHandle ( char * a ) { int b = 0 ; Handle * c = head ; while ( ! b && c != ( ( void * ) 0 ) ) { b = ! ( strcmp ( a , c -> name ) ) ; c = c -> next ; } return b ; } 
(2) FILE: ../../handleList.c LINES:14:9 TOKENS:72:128 DIST:3.0

Handle * global_a = ( ( void * ) 0 ) ; int32_t global_b = 0 ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int findHandle ( char * a ) { int b = 0 ; Handle * c = head ; while ( ! b && c != ( ( void * ) 0 ) ) { b = ! ( strcmp ( a , c -> name ) ) ; c = c -> next ; } return b ; } int findSocket ( int a ) { int b = 0 ; Handle * c = head ; while ( ! b && c != ( ( void * ) 0 ) ) { b = a == c -> socket ; c = c -> next ; } return b ; } 
========== 7 ==========
(1) FILE: ../../server.c LINES:147:4 TOKENS:1131:1186 DIST:2.4

case 1 : memcpy ( & e . len , & b [ 3 ] , 1 ) ; memcpy ( e . name , & b [ 4 ] , e . len ) ; free ( e . name ) ; e . name = malloc ( e . len ) ; if ( findHandle ( e . name ) > 0 ) { sendBadHandle ( d ) ; } else { addHandle ( e . name , e . len , d ) ; sendHandleACK ( d ) ; } break ; case 4 : memcpy ( & e . len , & b [ 3 ] , 1 ) ; sendMessageToAll ( b , f , & e ) ; memcpy ( e . name , & b [ 4 ] , e . len ) ; e . name = malloc ( e . len + 1 ) ; e . name [ e . len ] = '\0' ; break ; case 5 : memcpy ( & i . len , & b [ 3 ] , 1 ) ; memcpy ( i . name , & b [ 4 ] , i . len ) ; free ( i . name ) ; i . name = malloc ( i . len + 1 ) ; 
(2) FILE: ../../server.c LINES:129:5 TOKENS:959:1017 DIST:0.0

switch ( g ) { case 1 : memcpy ( & e . len , & b [ 3 ] , 1 ) ; memcpy ( e . name , & b [ 4 ] , e . len ) ; free ( e . name ) ; e . name = malloc ( e . len ) ; if ( findHandle ( e . name ) > 0 ) { sendBadHandle ( d ) ; } else { addHandle ( e . name , e . len , d ) ; sendHandleACK ( d ) ; } break ; case 4 : memcpy ( & e . len , & b [ 3 ] , 1 ) ; sendMessageToAll ( b , f , & e ) ; memcpy ( e . name , & b [ 4 ] , e . len ) ; e . name = malloc ( e . len + 1 ) ; e . name [ e . len ] = '\0' ; break ; case 5 : memcpy ( & i . len , & b [ 3 ] , 1 ) ; memcpy ( i . name , & b [ 4 ] , i . len ) ; free ( i . name ) ; i . name = malloc ( i . len + 1 ) ; i . name [ i . len ] = '\0' ; if ( findHandle ( i . name ) == 0 ) { sendBadDest ( d , & i ) ; } else { j = getSocket ( i . name ) ; if ( j == - 1 ) { printf ( "Something went wrong in handleList!\n" ) ; exit ( - 1 ) ; } sendMessage ( j , b , f ) ; } break ; case 8 : sendExitPacket ( d ) ; break ; case 10 : h = getNumHandles ( ) ; sendHandlePackets ( d , h ) ; sendNumClientsPacket ( d , h ) ; break ; default : printf ( "Bad flag!\n" ) ; printf ( "Flag is: %d\n" , g ) ; break ; } 
========== 8 ==========
(1) FILE: ../../server.c LINES:198:1 TOKENS:1493:1555 DIST:0.0

( ( void ) ( ( ( & f ) -> __fds_bits ) [ ( ( c ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( c ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; 
(2) FILE: ../../cclient.c LINES:238:1 TOKENS:1749:1811 DIST:0.0

( ( void ) ( ( ( & d ) -> __fds_bits ) [ ( ( e ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( e ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; 
========== 9 ==========
(1) FILE: ../../cclient.c LINES:90:9 TOKENS:735:790 DIST:3.5

char global_a [ 1024 ] ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } void sendInitPacket ( ) { ; unsigned char * d = malloc ( 4 + a -> len ) ; c . handle = a ; c . head . flag = 1 ; c . head . packetLen = htons ( 4 + a -> len ) ; memcpy ( d , & c . head , 3 ) ; memcpy ( & d [ 3 ] , & a -> len , 1 ) ; memcpy ( & d [ 4 ] , a -> name , a -> len ) ; if ( send ( b , d , 4 + a -> len , 0 ) < 0 ) { perror ( "Send on Client" ) ; exit ( - 1 ) ; } free ( d ) ; } void sendMessage ( ) { messagePacket * e = malloc ( sizeof ( messagePacket ) ) ; int f = 3 ; int g = 5 + a -> len + b -> len + c -> size ; unsigned char * h = malloc ( g ) ; e -> head . packetLen = htons ( g ) ; e -> head . flag = 5 ; e -> dest = b ; e -> src = a ; e -> text = c ; memcpy ( h , & e -> head , 3 ) ; memcpy ( & h [ 3 ] , & e -> dest -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> dest -> name , e -> dest -> len ) ; f += e -> dest -> len ; memcpy ( & h [ f ] , & e -> src -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> src -> name , e -> src -> len ) ; f += e -> src -> len ; memcpy ( & h [ f ] , e -> text -> msg , e -> text -> size ) ; if ( send ( d , ( void * ) h , g , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( - 1 ) ; } free ( e ) ; free ( h ) ; } void sendMsgToAll ( ) { ; int e = 4 + a -> len + b -> size ; char * f = malloc ( e ) ; d . flag = 4 ; d . packetLen = htons ( e ) ; memcpy ( f , & d , 3 ) ; memcpy ( & f [ 3 ] , & a -> len , 1 ) ; memcpy ( & f [ 4 ] , a -> name , a -> len ) ; memcpy ( & f [ 4 + a -> len ] , b -> msg , strlen ( b -> msg ) ) ; if ( send ( c , ( void * ) f , e , 0 ) < 0 ) { perror ( "Send broadcast" ) ; exit ( - 1 ) ; } free ( f ) ; } void sendListRequest ( ) { listReq * c = malloc ( sizeof ( listReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 10 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( - 1 ) ; } free ( c ) ; } void sendExitRequest ( ) { exitReq * c = malloc ( sizeof ( exitReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 8 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send Exit Req" ) ; exit ( - 1 ) ; } free ( c ) ; } int getHandle ( ) { a -> len = strcspn ( b , " \n" ) ; if ( a -> len == 0 ) { return - 1 ; } a -> name = malloc ( a -> len ) ; memcpy ( a -> name , b , a -> len ) ; return 0 ; } void getText ( ) { a -> size = strcspn ( b , "\n" ) ; if ( a -> size > 1000 ) { a -> msg = malloc ( 1000 ) ; memcpy ( a -> msg , b , 1000 - 1 ) ; a -> msg [ 1000 ] = '\0' ; a -> remaining = malloc ( a -> size - ( 1000 - 1 ) ) ; memcpy ( a -> remaining , & b [ 1000 ] , a -> size - ( 1000 - 1 ) ) ; } else { a -> msg = malloc ( a -> size + 1 ) ; memcpy ( a -> msg , b , a -> size ) ; a -> msg [ a -> size ] = '\0' ; } } 
(2) FILE: ../../cclient.c LINES:87:7 TOKENS:710:763 DIST:0.0

int getHandle ( ) { a -> len = strcspn ( b , " \n" ) ; if ( a -> len == 0 ) { return - 1 ; } a -> name = malloc ( a -> len ) ; memcpy ( a -> name , b , a -> len ) ; return 0 ; } 
========== 10 ==========
(1) FILE: ../../cclient.c LINES:232:13 TOKENS:1709:1839 DIST:4.9

{ int f = read ( e , global_a , 1024 ) ; if ( f < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( f == 0 ) { ( ( void ) ( ( ( & d ) -> __fds_bits ) [ ( ( e ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( e ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( 0 ) ; } else { parseDetails ( f , b , e , a ) ; } } 
(2) FILE: ../../server.c LINES:191:14 TOKENS:1444:1581 DIST:0.0

{ char * g = malloc ( 1024 ) ; int h = read ( c , g , 1024 ) ; if ( h < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( h == 0 ) { ( ( void ) ( ( ( & f ) -> __fds_bits ) [ ( ( c ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( c ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; removeSocket ( c ) ; } else { parseDetails ( h , g , a , c ) ; } free ( g ) ; } 
========== 11 ==========
(1) FILE: ../../server.c LINES:180:6 TOKENS:1337:1394 DIST:0.0

while ( 1 ) { e = f ; if ( select ( 1024 , & e , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) < 0 ) { perror ( "select" ) ; exit ( - 1 ) ; } for ( c = 0 ; c < 1024 ; c ++ ) { if ( FD_ISSET ( c , & e ) ) { if ( c == a ) { b = tcpAccept ( a ) ; FD_SET ( b , & f ) ; } else { char * g = malloc ( 1024 ) ; int h = read ( c , g , 1024 ) ; if ( h < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( h == 0 ) { ( ( void ) ( ( ( & f ) -> __fds_bits ) [ ( ( c ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( c ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; removeSocket ( c ) ; } else { parseDetails ( h , g , a , c ) ; } free ( g ) ; } } } } 
(2) FILE: ../../cclient.c LINES:224:6 TOKENS:1622:1677 DIST:1.0

while ( 1 ) { c = d ; if ( select ( 1024 , & c , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) < 0 ) { perror ( "select" ) ; exit ( - 1 ) ; } for ( e = 0 ; e < 1024 ; e ++ ) { if ( FD_ISSET ( e , & c ) ) { if ( e == b ) { int f = read ( e , global_a , 1024 ) ; if ( f < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( f == 0 ) { ( ( void ) ( ( ( & d ) -> __fds_bits ) [ ( ( e ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( e ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( 0 ) ; } else { parseDetails ( f , b , e , a ) ; } } else if ( e == 0 ) { processCommands ( a , b ) ; } } } } 
========== 12 ==========
(1) FILE: ../../server.c LINES:61:9 TOKENS:424:480 DIST:0.0

void sendExitPacket ( int a ) { ; b . flag = 9 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send Exit ACK" ) ; exit ( - 1 ) ; } } 
(2) FILE: ../../server.c LINES:18:10 TOKENS:81:134 DIST:2.4

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } void sendBadHandle ( int a ) { ; b . flag = 3 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } void sendHandleACK ( int a ) { ; b . flag = 2 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } void sendNumClientsPacket ( int a , int32_t b ) { char * c = malloc ( 7 ) ; int d = htons ( 7 ) ; int e = 11 ; int32_t f = htonl ( b ) ; memcpy ( c , & d , 2 ) ; memcpy ( & c [ 2 ] , & e , 1 ) ; memcpy ( & c [ 3 ] , & f , 4 ) ; if ( send ( a , ( void * ) c , 7 , 0 ) < 0 ) { perror ( "Sending number of clients" ) ; exit ( - 1 ) ; } } 
(3) FILE: ../../server.c LINES:9:9 TOKENS:20:76 DIST:0.0

void sendBadHandle ( int a ) { ; b . flag = 3 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } 
========== 13 ==========
(1) FILE: ../../server.c LINES:203:14 TOKENS:1576:1636 DIST:0.0

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } void sendBadHandle ( int a ) { ; b . flag = 3 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } void sendHandleACK ( int a ) { ; b . flag = 2 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } void sendNumClientsPacket ( int a , int32_t b ) { char * c = malloc ( 7 ) ; int d = htons ( 7 ) ; int e = 11 ; int32_t f = htonl ( b ) ; memcpy ( c , & d , 2 ) ; memcpy ( & c [ 2 ] , & e , 1 ) ; memcpy ( & c [ 3 ] , & f , 4 ) ; if ( send ( a , ( void * ) c , 7 , 0 ) < 0 ) { perror ( "Sending number of clients" ) ; exit ( - 1 ) ; } } void sendHandle ( ) { int c = 12 ; char * d = malloc ( 4 + b -> length ) ; int e = htons ( 4 + b -> length ) ; memcpy ( d , & e , 2 ) ; memcpy ( & d [ 2 ] , & c , 1 ) ; memcpy ( & d [ 3 ] , & e , 1 ) ; memcpy ( & d [ 4 ] , b -> name , b -> length ) ; if ( send ( a , ( void * ) d , 4 + b -> length , 0 ) < 0 ) { perror ( "Sending handle data" ) ; exit ( - 1 ) ; } free ( d ) ; } void sendHandlePackets ( int a , int32_t b ) { int c = 0 ; for ( c = 0 ; c < b ; c ++ ) { Handle * d = getClientData ( c ) ; sendHandle ( a , d ) ; } } void sendExitPacket ( int a ) { ; b . flag = 9 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send Exit ACK" ) ; exit ( - 1 ) ; } } void sendBadDest ( ) { badDest * c = malloc ( sizeof ( badDest ) ) ; int d = 4 + b -> len ; unsigned char * e = malloc ( d ) ; c -> head . packetLen = htons ( d ) ; c -> head . flag = 7 ; c -> handle = b ; memcpy ( e , & c -> head , 3 ) ; memcpy ( & e [ 3 ] , & c -> handle -> len , 1 ) ; memcpy ( & e [ 4 ] , c -> handle -> name , c -> handle -> len ) ; if ( send ( a , e , d , 0 ) < 0 ) { perror ( "Send Bad Dest" ) ; exit ( - 1 ) ; } free ( e ) ; free ( c ) ; } void sendMessage ( int a , char * b , int c ) { unsigned char * d = malloc ( c ) ; memcpy ( d , b , c ) ; if ( send ( a , d , c , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( - 1 ) ; } free ( d ) ; } void constructMessage ( ) { int e = d - 4 ; char * f = malloc ( d + 1 + a -> length ) ; c [ 2 ] = 5 ; memcpy ( f , c , 3 ) ; memcpy ( & f [ 3 ] , & a -> length , 1 ) ; memcpy ( & f [ 4 ] , a -> name , a -> length ) ; memcpy ( & f [ 4 + a -> length ] , & c [ 3 ] , e ) ; if ( send ( a -> socket , f , d + 1 + a -> length , 0 ) < 0 ) { perror ( "Send Message (To all)" ) ; exit ( - 1 ) ; } free ( f ) ; } void sendMessageToAll ( ) { int d = 0 , e = getNumHandles ( ) ; for ( d = 0 ; d < e ; d ++ ) { Handle * f = getClientData ( d ) ; if ( strcmp ( f -> name , c -> name ) ) { constructMessage ( f , c , a , b ) ; } } } void parseDetails ( int a , char * b , int c , int d ) { ; int j = 0 ; memcpy ( & f , b , 2 ) ; f = ntohs ( f ) ; memcpy ( & g , & b [ 2 ] , 1 ) ; switch ( g ) { case 1 : memcpy ( & e . len , & b [ 3 ] , 1 ) ; memcpy ( e . name , & b [ 4 ] , e . len ) ; free ( e . name ) ; e . name = malloc ( e . len ) ; if ( findHandle ( e . name ) > 0 ) { sendBadHandle ( d ) ; } else { addHandle ( e . name , e . len , d ) ; sendHandleACK ( d ) ; } break ; case 4 : memcpy ( & e . len , & b [ 3 ] , 1 ) ; sendMessageToAll ( b , f , & e ) ; memcpy ( e . name , & b [ 4 ] , e . len ) ; e . name = malloc ( e . len + 1 ) ; e . name [ e . len ] = '\0' ; break ; case 5 : memcpy ( & i . len , & b [ 3 ] , 1 ) ; memcpy ( i . name , & b [ 4 ] , i . len ) ; free ( i . name ) ; i . name = malloc ( i . len + 1 ) ; i . name [ i . len ] = '\0' ; if ( findHandle ( i . name ) == 0 ) { sendBadDest ( d , & i ) ; } else { j = getSocket ( i . name ) ; if ( j == - 1 ) { printf ( "Something went wrong in handleList!\n" ) ; exit ( - 1 ) ; } sendMessage ( j , b , f ) ; } break ; case 8 : sendExitPacket ( d ) ; break ; case 10 : h = getNumHandles ( ) ; sendHandlePackets ( d , h ) ; sendNumClientsPacket ( d , h ) ; break ; default : printf ( "Bad flag!\n" ) ; printf ( "Flag is: %d\n" , g ) ; break ; } } void startServerChat ( int a ) { ; FD_ZERO ( & f ) ; FD_SET ( a , & f ) ; while ( 1 ) { e = f ; if ( select ( 1024 , & e , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) < 0 ) { perror ( "select" ) ; exit ( - 1 ) ; } for ( c = 0 ; c < 1024 ; c ++ ) { if ( FD_ISSET ( c , & e ) ) { if ( c == a ) { b = tcpAccept ( a ) ; FD_SET ( b , & f ) ; } else { char * g = malloc ( 1024 ) ; int h = read ( c , g , 1024 ) ; if ( h < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( h == 0 ) { ( ( void ) ( ( ( & f ) -> __fds_bits ) [ ( ( c ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( c ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; removeSocket ( c ) ; } else { parseDetails ( h , g , a , c ) ; } free ( g ) ; } } } } close ( b ) ; } int main ( int a , char * b ) { int c = 0 ; int d = 0 ; if ( a == 2 ) { d = atoi ( b [ 1 ] ) ; } c = tcpServerSetup ( d ) ; startServerChat ( c ) ; close ( c ) ; return 0 ; } 
(2) FILE: ../../server.c LINES:210:9 TOKENS:1594:1646 DIST:1.7

int main ( int a , char * b ) { int c = 0 ; int d = 0 ; if ( a == 2 ) { d = atoi ( b [ 1 ] ) ; } c = tcpServerSetup ( d ) ; startServerChat ( c ) ; close ( c ) ; return 0 ; } 
========== 14 ==========
(1) FILE: ../../cclient.c LINES:77:10 TOKENS:640:709 DIST:0.0

void sendExitRequest ( ) { exitReq * c = malloc ( sizeof ( exitReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 8 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send Exit Req" ) ; exit ( - 1 ) ; } free ( c ) ; } 
(2) FILE: ../../cclient.c LINES:72:10 TOKENS:622:689 DIST:2.8

char global_a [ 1024 ] ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } void sendInitPacket ( ) { ; unsigned char * d = malloc ( 4 + a -> len ) ; c . handle = a ; c . head . flag = 1 ; c . head . packetLen = htons ( 4 + a -> len ) ; memcpy ( d , & c . head , 3 ) ; memcpy ( & d [ 3 ] , & a -> len , 1 ) ; memcpy ( & d [ 4 ] , a -> name , a -> len ) ; if ( send ( b , d , 4 + a -> len , 0 ) < 0 ) { perror ( "Send on Client" ) ; exit ( - 1 ) ; } free ( d ) ; } void sendMessage ( ) { messagePacket * e = malloc ( sizeof ( messagePacket ) ) ; int f = 3 ; int g = 5 + a -> len + b -> len + c -> size ; unsigned char * h = malloc ( g ) ; e -> head . packetLen = htons ( g ) ; e -> head . flag = 5 ; e -> dest = b ; e -> src = a ; e -> text = c ; memcpy ( h , & e -> head , 3 ) ; memcpy ( & h [ 3 ] , & e -> dest -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> dest -> name , e -> dest -> len ) ; f += e -> dest -> len ; memcpy ( & h [ f ] , & e -> src -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> src -> name , e -> src -> len ) ; f += e -> src -> len ; memcpy ( & h [ f ] , e -> text -> msg , e -> text -> size ) ; if ( send ( d , ( void * ) h , g , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( - 1 ) ; } free ( e ) ; free ( h ) ; } void sendMsgToAll ( ) { ; int e = 4 + a -> len + b -> size ; char * f = malloc ( e ) ; d . flag = 4 ; d . packetLen = htons ( e ) ; memcpy ( f , & d , 3 ) ; memcpy ( & f [ 3 ] , & a -> len , 1 ) ; memcpy ( & f [ 4 ] , a -> name , a -> len ) ; memcpy ( & f [ 4 + a -> len ] , b -> msg , strlen ( b -> msg ) ) ; if ( send ( c , ( void * ) f , e , 0 ) < 0 ) { perror ( "Send broadcast" ) ; exit ( - 1 ) ; } free ( f ) ; } void sendListRequest ( ) { listReq * c = malloc ( sizeof ( listReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 10 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( - 1 ) ; } free ( c ) ; } void sendExitRequest ( ) { exitReq * c = malloc ( sizeof ( exitReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 8 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send Exit Req" ) ; exit ( - 1 ) ; } free ( c ) ; } 
(3) FILE: ../../cclient.c LINES:67:10 TOKENS:570:639 DIST:0.0

void sendListRequest ( ) { listReq * c = malloc ( sizeof ( listReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 10 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( - 1 ) ; } free ( c ) ; } 
========== 15 ==========
(1) FILE: ../../cclient.c LINES:259:5 TOKENS:1923:1978 DIST:3.5

int c = 0 ; cclient * d = malloc ( sizeof ( cclient ) ) ; if ( a != 4 ) { printf ( "usage: %s handle server-name server-port\n" , b [ 0 ] ) ; exit ( 1 ) ; } d -> len = strlen ( b [ 1 ] ) ; d -> name = malloc ( d -> len ) ; memcpy ( d -> name , b [ 1 ] , d -> len ) ; c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; sendInitPacket ( d , c ) ; fprintf ( stderr , "$:" ) ; 
(2) FILE: ../../cclient.c LINES:254:7 TOKENS:1890:1949 DIST:0.0

int c = 0 ; cclient * d = malloc ( sizeof ( cclient ) ) ; if ( a != 4 ) { printf ( "usage: %s handle server-name server-port\n" , b [ 0 ] ) ; exit ( 1 ) ; } d -> len = strlen ( b [ 1 ] ) ; d -> name = malloc ( d -> len ) ; memcpy ( d -> name , b [ 1 ] , d -> len ) ; 
========== 16 ==========
(1) FILE: ../../server.c LINES:82:9 TOKENS:614:678 DIST:3.2

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } void sendBadHandle ( int a ) { ; b . flag = 3 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } void sendHandleACK ( int a ) { ; b . flag = 2 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } void sendNumClientsPacket ( int a , int32_t b ) { char * c = malloc ( 7 ) ; int d = htons ( 7 ) ; int e = 11 ; int32_t f = htonl ( b ) ; memcpy ( c , & d , 2 ) ; memcpy ( & c [ 2 ] , & e , 1 ) ; memcpy ( & c [ 3 ] , & f , 4 ) ; if ( send ( a , ( void * ) c , 7 , 0 ) < 0 ) { perror ( "Sending number of clients" ) ; exit ( - 1 ) ; } } void sendHandle ( ) { int c = 12 ; char * d = malloc ( 4 + b -> length ) ; int e = htons ( 4 + b -> length ) ; memcpy ( d , & e , 2 ) ; memcpy ( & d [ 2 ] , & c , 1 ) ; memcpy ( & d [ 3 ] , & e , 1 ) ; memcpy ( & d [ 4 ] , b -> name , b -> length ) ; if ( send ( a , ( void * ) d , 4 + b -> length , 0 ) < 0 ) { perror ( "Sending handle data" ) ; exit ( - 1 ) ; } free ( d ) ; } void sendHandlePackets ( int a , int32_t b ) { int c = 0 ; for ( c = 0 ; c < b ; c ++ ) { Handle * d = getClientData ( c ) ; sendHandle ( a , d ) ; } } void sendExitPacket ( int a ) { ; b . flag = 9 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send Exit ACK" ) ; exit ( - 1 ) ; } } void sendBadDest ( ) { badDest * c = malloc ( sizeof ( badDest ) ) ; int d = 4 + b -> len ; unsigned char * e = malloc ( d ) ; c -> head . packetLen = htons ( d ) ; c -> head . flag = 7 ; c -> handle = b ; memcpy ( e , & c -> head , 3 ) ; memcpy ( & e [ 3 ] , & c -> handle -> len , 1 ) ; memcpy ( & e [ 4 ] , c -> handle -> name , c -> handle -> len ) ; if ( send ( a , e , d , 0 ) < 0 ) { perror ( "Send Bad Dest" ) ; exit ( - 1 ) ; } free ( e ) ; free ( c ) ; } void sendMessage ( int a , char * b , int c ) { unsigned char * d = malloc ( c ) ; memcpy ( d , b , c ) ; if ( send ( a , d , c , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( - 1 ) ; } free ( d ) ; } 
(2) FILE: ../../server.c LINES:87:9 TOKENS:632:698 DIST:0.0

void sendMessage ( int a , char * b , int c ) { unsigned char * d = malloc ( c ) ; memcpy ( d , b , c ) ; if ( send ( a , d , c , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( - 1 ) ; } free ( d ) ; } 
========== 17 ==========
(1) FILE: ../../server.c LINES:61:9 TOKENS:424:480 DIST:0.0

void sendExitPacket ( int a ) { ; b . flag = 9 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send Exit ACK" ) ; exit ( - 1 ) ; } } 
(2) FILE: ../../server.c LINES:6:12 TOKENS:14:76 DIST:2.0
__uint64_t __bswap_64(__uint64_t a) /*  */{
return __builtin_bswap64(a); /* return __builtin_bswap64(__bsx) */
}
void sendBadHandle(int a) /* void sendBadHandle ( int socket ) { */{
handleErr b; /* handleErr data ; */
b.flag = 3; /* data . flag = 3 ; */

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } void sendBadHandle ( int a ) { ; b . flag = 3 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } 
(3) FILE: ../../server.c LINES:18:9 TOKENS:77:133 DIST:0.0

void sendHandleACK ( int a ) { ; b . flag = 2 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } 
========== 18 ==========
(1) FILE: ../../cclient.c LINES:218:33 TOKENS:1589:1859 DIST:7.3

void startChat ( ) { ; int e ; FD_ZERO ( & d ) ; FD_SET ( 0 , & d ) ; FD_SET ( b , & d ) ; while ( 1 ) { c = d ; if ( select ( 1024 , & c , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) < 0 ) { perror ( "select" ) ; exit ( - 1 ) ; } for ( e = 0 ; e < 1024 ; e ++ ) { if ( FD_ISSET ( e , & c ) ) { if ( e == b ) { int f = read ( e , global_a , 1024 ) ; if ( f < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( f == 0 ) { ( ( void ) ( ( ( & d ) -> __fds_bits ) [ ( ( e ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( e ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( 0 ) ; } else { parseDetails ( f , b , e , a ) ; } } else if ( e == 0 ) { processCommands ( a , b ) ; } } } } } 
(2) FILE: ../../server.c LINES:174:36 TOKENS:1315:1590 DIST:0.0

void startServerChat ( int a ) { ; FD_ZERO ( & f ) ; FD_SET ( a , & f ) ; while ( 1 ) { e = f ; if ( select ( 1024 , & e , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) < 0 ) { perror ( "select" ) ; exit ( - 1 ) ; } for ( c = 0 ; c < 1024 ; c ++ ) { if ( FD_ISSET ( c , & e ) ) { if ( c == a ) { b = tcpAccept ( a ) ; FD_SET ( b , & f ) ; } else { char * g = malloc ( 1024 ) ; int h = read ( c , g , 1024 ) ; if ( h < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( h == 0 ) { ( ( void ) ( ( ( & f ) -> __fds_bits ) [ ( ( c ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( c ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; removeSocket ( c ) ; } else { parseDetails ( h , g , a , c ) ; } free ( g ) ; } } } } close ( b ) ; } 
========== 19 ==========
(1) FILE: ../../cclient.c LINES:204:11 TOKENS:1531:1584 DIST:0.0

case 2 : break ; case 3 : fprintf ( stderr , "\nHandle already in use: %s\n" , d -> name ) ; exit ( 0 ) ; close ( b ) ; break ; case 5 : getPacketHandle ( & i , 3 ) ; fprintf ( stderr , "$:" ) ; fprintf ( stderr , "\n%s: %s\n" , f . name , j . msg ) ; free ( f . name ) ; free ( j . msg ) ; free ( i . name ) ; getPacketHandle ( & f , 4 + i . len ) ; getPacketText ( & j , 5 + i . len + f . len , h ) ; break ; case 7 : getPacketHandle ( & i , 3 ) ; fprintf ( stderr , "$:" ) ; fprintf ( stderr , "\nClient with handle %s does not exist.\n" , i . name ) ; free ( i . name ) ; break ; case 9 : close ( b ) ; exit ( 0 ) ; break ; case 11 : memcpy ( & g , & global_a [ 3 ] , 4 ) ; int k = 0 ; printf ( "Number of clients: %d\n" , g ) ; g = ntohl ( g ) ; while ( k != g ) { int l = recv ( b , global_a , 1024 , 0 ) ; if ( l < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( l == 0 ) { fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( 0 ) ; } else { k ++ ; getPacketHandle ( & i , 3 ) ; printf ( "\t%s\n" , i . name ) ; free ( i . name ) ; } } break ; case 12 : break ; default : fprintf ( stderr , "\nBad flag!\n" ) ; fprintf ( stderr , "$:" ) ; 
(2) FILE: ../../cclient.c LINES:184:8 TOKENS:1384:1433 DIST:3.0

case 2 : break ; case 3 : fprintf ( stderr , "\nHandle already in use: %s\n" , d -> name ) ; exit ( 0 ) ; close ( b ) ; break ; case 5 : getPacketHandle ( & i , 3 ) ; fprintf ( stderr , "$:" ) ; fprintf ( stderr , "\n%s: %s\n" , f . name , j . msg ) ; free ( f . name ) ; free ( j . msg ) ; free ( i . name ) ; getPacketHandle ( & f , 4 + i . len ) ; getPacketText ( & j , 5 + i . len + f . len , h ) ; break ; case 7 : getPacketHandle ( & i , 3 ) ; fprintf ( stderr , "$:" ) ; fprintf ( stderr , "\nClient with handle %s does not exist.\n" , i . name ) ; free ( i . name ) ; break ; case 9 : close ( b ) ; exit ( 0 ) ; break ; 
========== 20 ==========
(1) FILE: ../../server.c LINES:197:2 TOKENS:1485:1555 DIST:0.0

if ( h < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( h == 0 ) { ( ( void ) ( ( ( & f ) -> __fds_bits ) [ ( ( c ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( c ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; removeSocket ( c ) ; } else { parseDetails ( h , g , a , c ) ; } 
(2) FILE: ../../cclient.c LINES:237:2 TOKENS:1744:1811 DIST:1.0

if ( f == 0 ) { ( ( void ) ( ( ( & d ) -> __fds_bits ) [ ( ( e ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( e ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( 0 ) ; } 
========== 21 ==========
(1) FILE: ../../server.c LINES:203:14 TOKENS:1576:1636 DIST:3.2

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } void sendBadHandle ( int a ) { ; b . flag = 3 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } void sendHandleACK ( int a ) { ; b . flag = 2 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } void sendNumClientsPacket ( int a , int32_t b ) { char * c = malloc ( 7 ) ; int d = htons ( 7 ) ; int e = 11 ; int32_t f = htonl ( b ) ; memcpy ( c , & d , 2 ) ; memcpy ( & c [ 2 ] , & e , 1 ) ; memcpy ( & c [ 3 ] , & f , 4 ) ; if ( send ( a , ( void * ) c , 7 , 0 ) < 0 ) { perror ( "Sending number of clients" ) ; exit ( - 1 ) ; } } void sendHandle ( ) { int c = 12 ; char * d = malloc ( 4 + b -> length ) ; int e = htons ( 4 + b -> length ) ; memcpy ( d , & e , 2 ) ; memcpy ( & d [ 2 ] , & c , 1 ) ; memcpy ( & d [ 3 ] , & e , 1 ) ; memcpy ( & d [ 4 ] , b -> name , b -> length ) ; if ( send ( a , ( void * ) d , 4 + b -> length , 0 ) < 0 ) { perror ( "Sending handle data" ) ; exit ( - 1 ) ; } free ( d ) ; } void sendHandlePackets ( int a , int32_t b ) { int c = 0 ; for ( c = 0 ; c < b ; c ++ ) { Handle * d = getClientData ( c ) ; sendHandle ( a , d ) ; } } void sendExitPacket ( int a ) { ; b . flag = 9 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send Exit ACK" ) ; exit ( - 1 ) ; } } void sendBadDest ( ) { badDest * c = malloc ( sizeof ( badDest ) ) ; int d = 4 + b -> len ; unsigned char * e = malloc ( d ) ; c -> head . packetLen = htons ( d ) ; c -> head . flag = 7 ; c -> handle = b ; memcpy ( e , & c -> head , 3 ) ; memcpy ( & e [ 3 ] , & c -> handle -> len , 1 ) ; memcpy ( & e [ 4 ] , c -> handle -> name , c -> handle -> len ) ; if ( send ( a , e , d , 0 ) < 0 ) { perror ( "Send Bad Dest" ) ; exit ( - 1 ) ; } free ( e ) ; free ( c ) ; } void sendMessage ( int a , char * b , int c ) { unsigned char * d = malloc ( c ) ; memcpy ( d , b , c ) ; if ( send ( a , d , c , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( - 1 ) ; } free ( d ) ; } void constructMessage ( ) { int e = d - 4 ; char * f = malloc ( d + 1 + a -> length ) ; c [ 2 ] = 5 ; memcpy ( f , c , 3 ) ; memcpy ( & f [ 3 ] , & a -> length , 1 ) ; memcpy ( & f [ 4 ] , a -> name , a -> length ) ; memcpy ( & f [ 4 + a -> length ] , & c [ 3 ] , e ) ; if ( send ( a -> socket , f , d + 1 + a -> length , 0 ) < 0 ) { perror ( "Send Message (To all)" ) ; exit ( - 1 ) ; } free ( f ) ; } void sendMessageToAll ( ) { int d = 0 , e = getNumHandles ( ) ; for ( d = 0 ; d < e ; d ++ ) { Handle * f = getClientData ( d ) ; if ( strcmp ( f -> name , c -> name ) ) { constructMessage ( f , c , a , b ) ; } } } void parseDetails ( int a , char * b , int c , int d ) { ; int j = 0 ; memcpy ( & f , b , 2 ) ; f = ntohs ( f ) ; memcpy ( & g , & b [ 2 ] , 1 ) ; switch ( g ) { case 1 : memcpy ( & e . len , & b [ 3 ] , 1 ) ; memcpy ( e . name , & b [ 4 ] , e . len ) ; free ( e . name ) ; e . name = malloc ( e . len ) ; if ( findHandle ( e . name ) > 0 ) { sendBadHandle ( d ) ; } else { addHandle ( e . name , e . len , d ) ; sendHandleACK ( d ) ; } break ; case 4 : memcpy ( & e . len , & b [ 3 ] , 1 ) ; sendMessageToAll ( b , f , & e ) ; memcpy ( e . name , & b [ 4 ] , e . len ) ; e . name = malloc ( e . len + 1 ) ; e . name [ e . len ] = '\0' ; break ; case 5 : memcpy ( & i . len , & b [ 3 ] , 1 ) ; memcpy ( i . name , & b [ 4 ] , i . len ) ; free ( i . name ) ; i . name = malloc ( i . len + 1 ) ; i . name [ i . len ] = '\0' ; if ( findHandle ( i . name ) == 0 ) { sendBadDest ( d , & i ) ; } else { j = getSocket ( i . name ) ; if ( j == - 1 ) { printf ( "Something went wrong in handleList!\n" ) ; exit ( - 1 ) ; } sendMessage ( j , b , f ) ; } break ; case 8 : sendExitPacket ( d ) ; break ; case 10 : h = getNumHandles ( ) ; sendHandlePackets ( d , h ) ; sendNumClientsPacket ( d , h ) ; break ; default : printf ( "Bad flag!\n" ) ; printf ( "Flag is: %d\n" , g ) ; break ; } } void startServerChat ( int a ) { ; FD_ZERO ( & f ) ; FD_SET ( a , & f ) ; while ( 1 ) { e = f ; if ( select ( 1024 , & e , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) < 0 ) { perror ( "select" ) ; exit ( - 1 ) ; } for ( c = 0 ; c < 1024 ; c ++ ) { if ( FD_ISSET ( c , & e ) ) { if ( c == a ) { b = tcpAccept ( a ) ; FD_SET ( b , & f ) ; } else { char * g = malloc ( 1024 ) ; int h = read ( c , g , 1024 ) ; if ( h < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( h == 0 ) { ( ( void ) ( ( ( & f ) -> __fds_bits ) [ ( ( c ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( c ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; removeSocket ( c ) ; } else { parseDetails ( h , g , a , c ) ; } free ( g ) ; } } } } close ( b ) ; } int main ( int a , char * b ) { int c = 0 ; int d = 0 ; if ( a == 2 ) { d = atoi ( b [ 1 ] ) ; } c = tcpServerSetup ( d ) ; startServerChat ( c ) ; close ( c ) ; return 0 ; } 
(2) FILE: ../../server.c LINES:210:11 TOKENS:1591:1650 DIST:0.0

int main ( int a , char * b ) { int c = 0 ; int d = 0 ; if ( a == 2 ) { d = atoi ( b [ 1 ] ) ; } c = tcpServerSetup ( d ) ; startServerChat ( c ) ; close ( c ) ; return 0 ; } 
========== 22 ==========
(1) FILE: ../../cclient.c LINES:67:6 TOKENS:570:626 DIST:0.0

void sendListRequest ( ) { listReq * c = malloc ( sizeof ( listReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 10 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( - 1 ) ; } free ( c ) ; } 
(2) FILE: ../../cclient.c LINES:75:7 TOKENS:634:689 DIST:1.4

char global_a [ 1024 ] ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } void sendInitPacket ( ) { ; unsigned char * d = malloc ( 4 + a -> len ) ; c . handle = a ; c . head . flag = 1 ; c . head . packetLen = htons ( 4 + a -> len ) ; memcpy ( d , & c . head , 3 ) ; memcpy ( & d [ 3 ] , & a -> len , 1 ) ; memcpy ( & d [ 4 ] , a -> name , a -> len ) ; if ( send ( b , d , 4 + a -> len , 0 ) < 0 ) { perror ( "Send on Client" ) ; exit ( - 1 ) ; } free ( d ) ; } void sendMessage ( ) { messagePacket * e = malloc ( sizeof ( messagePacket ) ) ; int f = 3 ; int g = 5 + a -> len + b -> len + c -> size ; unsigned char * h = malloc ( g ) ; e -> head . packetLen = htons ( g ) ; e -> head . flag = 5 ; e -> dest = b ; e -> src = a ; e -> text = c ; memcpy ( h , & e -> head , 3 ) ; memcpy ( & h [ 3 ] , & e -> dest -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> dest -> name , e -> dest -> len ) ; f += e -> dest -> len ; memcpy ( & h [ f ] , & e -> src -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> src -> name , e -> src -> len ) ; f += e -> src -> len ; memcpy ( & h [ f ] , e -> text -> msg , e -> text -> size ) ; if ( send ( d , ( void * ) h , g , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( - 1 ) ; } free ( e ) ; free ( h ) ; } void sendMsgToAll ( ) { ; int e = 4 + a -> len + b -> size ; char * f = malloc ( e ) ; d . flag = 4 ; d . packetLen = htons ( e ) ; memcpy ( f , & d , 3 ) ; memcpy ( & f [ 3 ] , & a -> len , 1 ) ; memcpy ( & f [ 4 ] , a -> name , a -> len ) ; memcpy ( & f [ 4 + a -> len ] , b -> msg , strlen ( b -> msg ) ) ; if ( send ( c , ( void * ) f , e , 0 ) < 0 ) { perror ( "Send broadcast" ) ; exit ( - 1 ) ; } free ( f ) ; } void sendListRequest ( ) { listReq * c = malloc ( sizeof ( listReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 10 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( - 1 ) ; } free ( c ) ; } void sendExitRequest ( ) { exitReq * c = malloc ( sizeof ( exitReq ) ) ; c -> packetLen = htons ( 3 ) ; c -> flag = 8 ; if ( send ( b , ( void * ) c , 3 , 0 ) < 0 ) { perror ( "Send Exit Req" ) ; exit ( - 1 ) ; } free ( c ) ; } 
========== 23 ==========
(1) FILE: ../../cclient.c LINES:232:7 TOKENS:1705:1811 DIST:3.3

if ( e == b ) { int f = read ( e , global_a , 1024 ) ; if ( f < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( f == 0 ) { ( ( void ) ( ( ( & d ) -> __fds_bits ) [ ( ( e ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( e ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( 0 ) ; } else { parseDetails ( f , b , e , a ) ; } } 
(2) FILE: ../../server.c LINES:191:8 TOKENS:1443:1555 DIST:0.0

if ( c == a ) { b = tcpAccept ( a ) ; FD_SET ( b , & f ) ; } else { char * g = malloc ( 1024 ) ; int h = read ( c , g , 1024 ) ; if ( h < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( h == 0 ) { ( ( void ) ( ( ( & f ) -> __fds_bits ) [ ( ( c ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( c ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; removeSocket ( c ) ; } else { parseDetails ( h , g , a , c ) ; } free ( g ) ; } 
========== 24 ==========
(1) FILE: ../../cclient.c LINES:35:4 TOKENS:256:306 DIST:0.0

messagePacket * e = malloc ( sizeof ( messagePacket ) ) ; int f = 3 ; int g = 5 + a -> len + b -> len + c -> size ; unsigned char * h = malloc ( g ) ; e -> head . packetLen = htons ( g ) ; e -> head . flag = 5 ; e -> dest = b ; e -> src = a ; e -> text = c ; memcpy ( h , & e -> head , 3 ) ; memcpy ( & h [ 3 ] , & e -> dest -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> dest -> name , e -> dest -> len ) ; f += e -> dest -> len ; 
(2) FILE: ../../cclient.c LINES:37:4 TOKENS:278:328 DIST:1.4

messagePacket * e = malloc ( sizeof ( messagePacket ) ) ; int f = 3 ; int g = 5 + a -> len + b -> len + c -> size ; unsigned char * h = malloc ( g ) ; e -> head . packetLen = htons ( g ) ; e -> head . flag = 5 ; e -> dest = b ; e -> src = a ; e -> text = c ; memcpy ( h , & e -> head , 3 ) ; memcpy ( & h [ 3 ] , & e -> dest -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> dest -> name , e -> dest -> len ) ; f += e -> dest -> len ; memcpy ( & h [ f ] , & e -> src -> len , 1 ) ; f += 1 ; 
(3) FILE: ../../cclient.c LINES:39:4 TOKENS:307:357 DIST:1.4

messagePacket * e = malloc ( sizeof ( messagePacket ) ) ; int f = 3 ; int g = 5 + a -> len + b -> len + c -> size ; unsigned char * h = malloc ( g ) ; e -> head . packetLen = htons ( g ) ; e -> head . flag = 5 ; e -> dest = b ; e -> src = a ; e -> text = c ; memcpy ( h , & e -> head , 3 ) ; memcpy ( & h [ 3 ] , & e -> dest -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> dest -> name , e -> dest -> len ) ; f += e -> dest -> len ; memcpy ( & h [ f ] , & e -> src -> len , 1 ) ; f += 1 ; memcpy ( & h [ f ] , e -> src -> name , e -> src -> len ) ; f += e -> src -> len ; 
========== 25 ==========
(1) FILE: ../../server.c LINES:187:19 TOKENS:1419:1582 DIST:0.0

{ if ( c == a ) { b = tcpAccept ( a ) ; FD_SET ( b , & f ) ; } else { char * g = malloc ( 1024 ) ; int h = read ( c , g , 1024 ) ; if ( h < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( h == 0 ) { ( ( void ) ( ( ( & f ) -> __fds_bits ) [ ( ( c ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( c ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; removeSocket ( c ) ; } else { parseDetails ( h , g , a , c ) ; } free ( g ) ; } } 
(2) FILE: ../../cclient.c LINES:230:19 TOKENS:1691:1857 DIST:5.7

{ if ( FD_ISSET ( e , & c ) ) { if ( e == b ) { int f = read ( e , global_a , 1024 ) ; if ( f < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( f == 0 ) { ( ( void ) ( ( ( & d ) -> __fds_bits ) [ ( ( e ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( e ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( 0 ) ; } else { parseDetails ( f , b , e , a ) ; } } else if ( e == 0 ) { processCommands ( a , b ) ; } } } 
========== 26 ==========
(1) FILE: ../../server.c LINES:174:9 TOKENS:1318:1380 DIST:3.3

void startServerChat ( int a ) { ; FD_ZERO ( & f ) ; FD_SET ( a , & f ) ; while ( 1 ) { e = f ; if ( select ( 1024 , & e , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) < 0 ) { perror ( "select" ) ; exit ( - 1 ) ; } for ( c = 0 ; c < 1024 ; c ++ ) { if ( FD_ISSET ( c , & e ) ) { if ( c == a ) { b = tcpAccept ( a ) ; FD_SET ( b , & f ) ; } else { char * g = malloc ( 1024 ) ; int h = read ( c , g , 1024 ) ; if ( h < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( h == 0 ) { ( ( void ) ( ( ( & f ) -> __fds_bits ) [ ( ( c ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( c ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; removeSocket ( c ) ; } else { parseDetails ( h , g , a , c ) ; } free ( g ) ; } } } } close ( b ) ; } 
(2) FILE: ../../cclient.c LINES:223:5 TOKENS:1612:1670 DIST:0.0

; int e ; FD_ZERO ( & d ) ; FD_SET ( 0 , & d ) ; FD_SET ( b , & d ) ; while ( 1 ) { c = d ; if ( select ( 1024 , & c , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) < 0 ) { perror ( "select" ) ; exit ( - 1 ) ; } for ( e = 0 ; e < 1024 ; e ++ ) { if ( FD_ISSET ( e , & c ) ) { if ( e == b ) { int f = read ( e , global_a , 1024 ) ; if ( f < 0 ) { perror ( "read" ) ; exit ( - 1 ) ; } else if ( f == 0 ) { ( ( void ) ( ( ( & d ) -> __fds_bits ) [ ( ( e ) / ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ] &= ~ ( ( __fd_mask ) ( 'U' << ( ( e ) % ( 8 * ( int ) sizeof ( __fd_mask ) ) ) ) ) ) ) ; fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( 0 ) ; } else { parseDetails ( f , b , e , a ) ; } } else if ( e == 0 ) { processCommands ( a , b ) ; } } } } 
========== 27 ==========
(1) FILE: ../../cclient.c LINES:184:7 TOKENS:1382:1431 DIST:3.0

case 2 : break ; case 3 : fprintf ( stderr , "\nHandle already in use: %s\n" , d -> name ) ; exit ( 0 ) ; close ( b ) ; break ; case 5 : getPacketHandle ( & i , 3 ) ; fprintf ( stderr , "$:" ) ; fprintf ( stderr , "\n%s: %s\n" , f . name , j . msg ) ; free ( f . name ) ; free ( j . msg ) ; free ( i . name ) ; getPacketHandle ( & f , 4 + i . len ) ; getPacketText ( & j , 5 + i . len + f . len , h ) ; break ; case 7 : getPacketHandle ( & i , 3 ) ; fprintf ( stderr , "$:" ) ; fprintf ( stderr , "\nClient with handle %s does not exist.\n" , i . name ) ; free ( i . name ) ; break ; case 9 : close ( b ) ; exit ( 0 ) ; 
(2) FILE: ../../cclient.c LINES:172:7 TOKENS:1283:1334 DIST:0.0

case 2 : break ; case 3 : fprintf ( stderr , "\nHandle already in use: %s\n" , d -> name ) ; exit ( 0 ) ; close ( b ) ; break ; case 5 : getPacketHandle ( & i , 3 ) ; fprintf ( stderr , "$:" ) ; fprintf ( stderr , "\n%s: %s\n" , f . name , j . msg ) ; free ( f . name ) ; 
========== 28 ==========
(1) FILE: ../../server.c LINES:80:9 TOKENS:595:655 DIST:0.0

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } void sendBadHandle ( int a ) { ; b . flag = 3 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } void sendHandleACK ( int a ) { ; b . flag = 2 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( - 1 ) ; } } void sendNumClientsPacket ( int a , int32_t b ) { char * c = malloc ( 7 ) ; int d = htons ( 7 ) ; int e = 11 ; int32_t f = htonl ( b ) ; memcpy ( c , & d , 2 ) ; memcpy ( & c [ 2 ] , & e , 1 ) ; memcpy ( & c [ 3 ] , & f , 4 ) ; if ( send ( a , ( void * ) c , 7 , 0 ) < 0 ) { perror ( "Sending number of clients" ) ; exit ( - 1 ) ; } } void sendHandle ( ) { int c = 12 ; char * d = malloc ( 4 + b -> length ) ; int e = htons ( 4 + b -> length ) ; memcpy ( d , & e , 2 ) ; memcpy ( & d [ 2 ] , & c , 1 ) ; memcpy ( & d [ 3 ] , & e , 1 ) ; memcpy ( & d [ 4 ] , b -> name , b -> length ) ; if ( send ( a , ( void * ) d , 4 + b -> length , 0 ) < 0 ) { perror ( "Sending handle data" ) ; exit ( - 1 ) ; } free ( d ) ; } void sendHandlePackets ( int a , int32_t b ) { int c = 0 ; for ( c = 0 ; c < b ; c ++ ) { Handle * d = getClientData ( c ) ; sendHandle ( a , d ) ; } } void sendExitPacket ( int a ) { ; b . flag = 9 ; b . packetLen = htons ( 3 ) ; if ( send ( a , ( void * ) & b , 3 , 0 ) < 0 ) { perror ( "Send Exit ACK" ) ; exit ( - 1 ) ; } } void sendBadDest ( ) { badDest * c = malloc ( sizeof ( badDest ) ) ; int d = 4 + b -> len ; unsigned char * e = malloc ( d ) ; c -> head . packetLen = htons ( d ) ; c -> head . flag = 7 ; c -> handle = b ; memcpy ( e , & c -> head , 3 ) ; memcpy ( & e [ 3 ] , & c -> handle -> len , 1 ) ; memcpy ( & e [ 4 ] , c -> handle -> name , c -> handle -> len ) ; if ( send ( a , e , d , 0 ) < 0 ) { perror ( "Send Bad Dest" ) ; exit ( - 1 ) ; } free ( e ) ; free ( c ) ; } void sendMessage ( int a , char * b , int c ) { unsigned char * d = malloc ( c ) ; memcpy ( d , b , c ) ; if ( send ( a , d , c , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( - 1 ) ; } free ( d ) ; } 
(2) FILE: ../../server.c LINES:87:7 TOKENS:633:692 DIST:2.8

void sendMessage ( int a , char * b , int c ) { unsigned char * d = malloc ( c ) ; memcpy ( d , b , c ) ; if ( send ( a , d , c , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( - 1 ) ; } free ( d ) ; } 
========== 29 ==========
(1) FILE: ../../server.c LINES:43:4 TOKENS:268:317 DIST:3.5

int c = 12 ; char * d = malloc ( 4 + b -> length ) ; int e = htons ( 4 + b -> length ) ; memcpy ( d , & e , 2 ) ; memcpy ( & d [ 2 ] , & c , 1 ) ; memcpy ( & d [ 3 ] , & e , 1 ) ; 
(2) FILE: ../../server.c LINES:30:5 TOKENS:161:211 DIST:0.0

char * c = malloc ( 7 ) ; int d = htons ( 7 ) ; int e = 11 ; int32_t f = htonl ( b ) ; memcpy ( c , & d , 2 ) ; memcpy ( & c [ 2 ] , & e , 1 ) ; memcpy ( & c [ 3 ] , & f , 4 ) ; 

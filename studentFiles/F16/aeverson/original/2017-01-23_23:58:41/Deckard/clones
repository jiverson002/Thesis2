========== 1 ==========
(1) FILE: ../../server.c LINES:200:4 TOKENS:1034:1090 DIST:0.0

case INIT_HANDLE : memcpy ( & srcInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len ) ; memcpy ( srcInfo . name , & buffer [ INIT_SIZE_CONST ] , srcInfo . len ) ; if ( findHandle ( srcInfo . name ) > 0 ) { sendBadHandle ( clientSocket ) ; } else { addHandle ( srcInfo . name , srcInfo . len , clientSocket ) ; sendHandleACK ( clientSocket ) ; } free ( srcInfo . name ) ; break ; case BROADCAST : memcpy ( & srcInfo . len , & buffer [ BCAST_SRC_LEN_OFF ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len + 1 ) ; memcpy ( srcInfo . name , & buffer [ BCAST_SRC_OFF ] , srcInfo . len ) ; srcInfo . name [ srcInfo . len ] = '\0' ; 
(2) FILE: ../../server.c LINES:208:5 TOKENS:1105:1162 DIST:1.0

case INIT_HANDLE : memcpy ( & srcInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len ) ; memcpy ( srcInfo . name , & buffer [ INIT_SIZE_CONST ] , srcInfo . len ) ; if ( findHandle ( srcInfo . name ) > 0 ) { sendBadHandle ( clientSocket ) ; } else { addHandle ( srcInfo . name , srcInfo . len , clientSocket ) ; sendHandleACK ( clientSocket ) ; } free ( srcInfo . name ) ; break ; case BROADCAST : memcpy ( & srcInfo . len , & buffer [ BCAST_SRC_LEN_OFF ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len + 1 ) ; memcpy ( srcInfo . name , & buffer [ BCAST_SRC_OFF ] , srcInfo . len ) ; srcInfo . name [ srcInfo . len ] = '\0' ; sendMessageToAll ( buffer , length , & srcInfo ) ; break ; case MESSAGE : memcpy ( & destInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; destInfo . name = malloc ( destInfo . len + 1 ) ; memcpy ( destInfo . name , & buffer [ INIT_SIZE_CONST ] , destInfo . len ) ; destInfo . name [ destInfo . len ] = '\0' ; 
========== 2 ==========
(1) FILE: ../../server.c LINES:210:7 TOKENS:1122:1183 DIST:3.6

case INIT_HANDLE : memcpy ( & srcInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len ) ; memcpy ( srcInfo . name , & buffer [ INIT_SIZE_CONST ] , srcInfo . len ) ; if ( findHandle ( srcInfo . name ) > 0 ) { sendBadHandle ( clientSocket ) ; } else { addHandle ( srcInfo . name , srcInfo . len , clientSocket ) ; sendHandleACK ( clientSocket ) ; } free ( srcInfo . name ) ; break ; case BROADCAST : memcpy ( & srcInfo . len , & buffer [ BCAST_SRC_LEN_OFF ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len + 1 ) ; memcpy ( srcInfo . name , & buffer [ BCAST_SRC_OFF ] , srcInfo . len ) ; srcInfo . name [ srcInfo . len ] = '\0' ; sendMessageToAll ( buffer , length , & srcInfo ) ; break ; case MESSAGE : memcpy ( & destInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; destInfo . name = malloc ( destInfo . len + 1 ) ; memcpy ( destInfo . name , & buffer [ INIT_SIZE_CONST ] , destInfo . len ) ; destInfo . name [ destInfo . len ] = '\0' ; if ( findHandle ( destInfo . name ) == NOT_FOUND ) { sendBadDest ( clientSocket , & destInfo ) ; } else { destSocket = getSocket ( destInfo . name ) ; if ( destSocket == FAIL ) { printf ( "Something went wrong in handleList!\n" ) ; exit ( FAIL ) ; } sendMessage ( destSocket , buffer , length ) ; } 
(2) FILE: ../../server.c LINES:199:5 TOKENS:1032:1090 DIST:0.0

case INIT_HANDLE : memcpy ( & srcInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len ) ; memcpy ( srcInfo . name , & buffer [ INIT_SIZE_CONST ] , srcInfo . len ) ; if ( findHandle ( srcInfo . name ) > 0 ) { sendBadHandle ( clientSocket ) ; } else { addHandle ( srcInfo . name , srcInfo . len , clientSocket ) ; sendHandleACK ( clientSocket ) ; } free ( srcInfo . name ) ; break ; case BROADCAST : memcpy ( & srcInfo . len , & buffer [ BCAST_SRC_LEN_OFF ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len + 1 ) ; memcpy ( srcInfo . name , & buffer [ BCAST_SRC_OFF ] , srcInfo . len ) ; srcInfo . name [ srcInfo . len ] = '\0' ; 
(3) FILE: ../../server.c LINES:208:5 TOKENS:1103:1162 DIST:1.4

case INIT_HANDLE : memcpy ( & srcInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len ) ; memcpy ( srcInfo . name , & buffer [ INIT_SIZE_CONST ] , srcInfo . len ) ; if ( findHandle ( srcInfo . name ) > 0 ) { sendBadHandle ( clientSocket ) ; } else { addHandle ( srcInfo . name , srcInfo . len , clientSocket ) ; sendHandleACK ( clientSocket ) ; } free ( srcInfo . name ) ; break ; case BROADCAST : memcpy ( & srcInfo . len , & buffer [ BCAST_SRC_LEN_OFF ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len + 1 ) ; memcpy ( srcInfo . name , & buffer [ BCAST_SRC_OFF ] , srcInfo . len ) ; srcInfo . name [ srcInfo . len ] = '\0' ; sendMessageToAll ( buffer , length , & srcInfo ) ; break ; case MESSAGE : memcpy ( & destInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; destInfo . name = malloc ( destInfo . len + 1 ) ; memcpy ( destInfo . name , & buffer [ INIT_SIZE_CONST ] , destInfo . len ) ; destInfo . name [ destInfo . len ] = '\0' ; 
========== 3 ==========
(1) FILE: ../../server.c LINES:53:7 TOKENS:139:189 DIST:0.0

char * data = malloc ( NUM_CLIENT_CONST ) ; int32_t num = htonl ( numHandles ) ; int flag = NUM_HANDLES ; int length = htons ( NUM_CLIENT_CONST ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & num , 4 ) ; 
(2) FILE: ../../server.c LINES:70:5 TOKENS:245:294 DIST:3.3

char * data = malloc ( GIVE_HANDLE_CONST + handle -> length ) ; int flag = GIVE_HANDLE ; int length = htons ( GIVE_HANDLE_CONST + handle -> length ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & length , 1 ) ; 
========== 4 ==========
(1) FILE: ../../cclient.c LINES:65:4 TOKENS:235:285 DIST:0.0

messagePacket * msgPck = malloc ( sizeof ( messagePacket ) ) ; int size = MSG_SIZE_CONST + src -> len + dest -> len + msg -> size ; unsigned char * data = malloc ( size ) ; int index = HEAD_SIZE_CONST ; msgPck -> head . packetLen = htons ( size ) ; msgPck -> head . flag = MESSAGE ; msgPck -> dest = dest ; msgPck -> src = src ; msgPck -> text = msg ; memcpy ( data , & msgPck -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & msgPck -> dest -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> dest -> name , msgPck -> dest -> len ) ; index += msgPck -> dest -> len ; 
(2) FILE: ../../cclient.c LINES:67:4 TOKENS:257:307 DIST:0.0

messagePacket * msgPck = malloc ( sizeof ( messagePacket ) ) ; int size = MSG_SIZE_CONST + src -> len + dest -> len + msg -> size ; unsigned char * data = malloc ( size ) ; int index = HEAD_SIZE_CONST ; msgPck -> head . packetLen = htons ( size ) ; msgPck -> head . flag = MESSAGE ; msgPck -> dest = dest ; msgPck -> src = src ; msgPck -> text = msg ; memcpy ( data , & msgPck -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & msgPck -> dest -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> dest -> name , msgPck -> dest -> len ) ; index += msgPck -> dest -> len ; memcpy ( & data [ index ] , & msgPck -> src -> len , 1 ) ; index += 1 ; 
(3) FILE: ../../cclient.c LINES:69:4 TOKENS:286:336 DIST:0.0

messagePacket * msgPck = malloc ( sizeof ( messagePacket ) ) ; int size = MSG_SIZE_CONST + src -> len + dest -> len + msg -> size ; unsigned char * data = malloc ( size ) ; int index = HEAD_SIZE_CONST ; msgPck -> head . packetLen = htons ( size ) ; msgPck -> head . flag = MESSAGE ; msgPck -> dest = dest ; msgPck -> src = src ; msgPck -> text = msg ; memcpy ( data , & msgPck -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & msgPck -> dest -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> dest -> name , msgPck -> dest -> len ) ; index += msgPck -> dest -> len ; memcpy ( & data [ index ] , & msgPck -> src -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> src -> name , msgPck -> src -> len ) ; index += msgPck -> src -> len ; 
========== 5 ==========
(1) FILE: ../../cclient.c LINES:105:8 TOKENS:547:603 DIST:0.0

void sendListRequest ( ) { listReq * data = malloc ( sizeof ( listReq ) ) ; data -> packetLen = htons ( HEAD_SIZE_CONST ) ; data -> flag = REQ_HANDLES ; if ( send ( socket , ( void * ) data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( FAIL ) ; } free ( data ) ; } 
(2) FILE: ../../cclient.c LINES:115:10 TOKENS:610:665 DIST:1.4

char BUFFER [ MAXBUF ] ; void sendInitPacket ( ) { ; unsigned char * data = malloc ( INIT_SIZE_CONST + clientInfo -> len ) ; sendInfo . head . flag = INIT_HANDLE ; sendInfo . head . packetLen = htons ( INIT_SIZE_CONST + clientInfo -> len ) ; sendInfo . handle = clientInfo ; memcpy ( data , & sendInfo . head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & clientInfo -> len , 1 ) ; memcpy ( & data [ INIT_SIZE_CONST ] , clientInfo -> name , clientInfo -> len ) ; if ( send ( socket_num , data , INIT_SIZE_CONST + clientInfo -> len , 0 ) < 0 ) { perror ( "Send on Client" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendMessage ( ) { messagePacket * msgPck = malloc ( sizeof ( messagePacket ) ) ; int size = MSG_SIZE_CONST + src -> len + dest -> len + msg -> size ; unsigned char * data = malloc ( size ) ; int index = HEAD_SIZE_CONST ; msgPck -> head . packetLen = htons ( size ) ; msgPck -> head . flag = MESSAGE ; msgPck -> dest = dest ; msgPck -> src = src ; msgPck -> text = msg ; memcpy ( data , & msgPck -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & msgPck -> dest -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> dest -> name , msgPck -> dest -> len ) ; index += msgPck -> dest -> len ; memcpy ( & data [ index ] , & msgPck -> src -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> src -> name , msgPck -> src -> len ) ; index += msgPck -> src -> len ; memcpy ( & data [ index ] , msgPck -> text -> msg , msgPck -> text -> size ) ; if ( send ( socket , ( void * ) data , size , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( FAIL ) ; } free ( msgPck ) ; free ( data ) ; } void sendMsgToAll ( ) { ; int length = BCAST_SIZE_CONST + myInfo -> len + textMsg -> size ; char * data = malloc ( length ) ; head . packetLen = htons ( length ) ; head . flag = BROADCAST ; memcpy ( data , & head , HEAD_SIZE_CONST ) ; memcpy ( & data [ BCAST_SRC_LEN_OFF ] , & myInfo -> len , 1 ) ; memcpy ( & data [ BCAST_SRC_OFF ] , myInfo -> name , myInfo -> len ) ; memcpy ( & data [ BCAST_SRC_OFF + myInfo -> len ] , textMsg -> msg , strlen ( textMsg -> msg ) ) ; if ( send ( socketNum , ( void * ) data , length , 0 ) < 0 ) { perror ( "Send broadcast" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendListRequest ( ) { listReq * data = malloc ( sizeof ( listReq ) ) ; data -> packetLen = htons ( HEAD_SIZE_CONST ) ; data -> flag = REQ_HANDLES ; if ( send ( socket , ( void * ) data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendExitRequest ( ) { exitReq * data = malloc ( sizeof ( exitReq ) ) ; data -> packetLen = htons ( HEAD_SIZE_CONST ) ; data -> flag = EXIT_REQ ; if ( send ( socket , ( void * ) data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send Exit Req" ) ; exit ( FAIL ) ; } free ( data ) ; } 
========== 6 ==========
(1) FILE: ../../server.c LINES:208:5 TOKENS:1103:1162 DIST:3.6

case INIT_HANDLE : memcpy ( & srcInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len ) ; memcpy ( srcInfo . name , & buffer [ INIT_SIZE_CONST ] , srcInfo . len ) ; if ( findHandle ( srcInfo . name ) > 0 ) { sendBadHandle ( clientSocket ) ; } else { addHandle ( srcInfo . name , srcInfo . len , clientSocket ) ; sendHandleACK ( clientSocket ) ; } free ( srcInfo . name ) ; break ; case BROADCAST : memcpy ( & srcInfo . len , & buffer [ BCAST_SRC_LEN_OFF ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len + 1 ) ; memcpy ( srcInfo . name , & buffer [ BCAST_SRC_OFF ] , srcInfo . len ) ; srcInfo . name [ srcInfo . len ] = '\0' ; sendMessageToAll ( buffer , length , & srcInfo ) ; break ; case MESSAGE : memcpy ( & destInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; destInfo . name = malloc ( destInfo . len + 1 ) ; memcpy ( destInfo . name , & buffer [ INIT_SIZE_CONST ] , destInfo . len ) ; destInfo . name [ destInfo . len ] = '\0' ; 
(2) FILE: ../../server.c LINES:183:7 TOKENS:931:992 DIST:0.0

switch ( flag ) { case INIT_HANDLE : memcpy ( & srcInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len ) ; memcpy ( srcInfo . name , & buffer [ INIT_SIZE_CONST ] , srcInfo . len ) ; if ( findHandle ( srcInfo . name ) > 0 ) { sendBadHandle ( clientSocket ) ; } else { addHandle ( srcInfo . name , srcInfo . len , clientSocket ) ; sendHandleACK ( clientSocket ) ; } free ( srcInfo . name ) ; break ; case BROADCAST : memcpy ( & srcInfo . len , & buffer [ BCAST_SRC_LEN_OFF ] , 1 ) ; srcInfo . name = malloc ( srcInfo . len + 1 ) ; memcpy ( srcInfo . name , & buffer [ BCAST_SRC_OFF ] , srcInfo . len ) ; srcInfo . name [ srcInfo . len ] = '\0' ; sendMessageToAll ( buffer , length , & srcInfo ) ; break ; case MESSAGE : memcpy ( & destInfo . len , & buffer [ HEAD_SIZE_CONST ] , 1 ) ; destInfo . name = malloc ( destInfo . len + 1 ) ; memcpy ( destInfo . name , & buffer [ INIT_SIZE_CONST ] , destInfo . len ) ; destInfo . name [ destInfo . len ] = '\0' ; if ( findHandle ( destInfo . name ) == NOT_FOUND ) { sendBadDest ( clientSocket , & destInfo ) ; } else { destSocket = getSocket ( destInfo . name ) ; if ( destSocket == FAIL ) { printf ( "Something went wrong in handleList!\n" ) ; exit ( FAIL ) ; } sendMessage ( destSocket , buffer , length ) ; } free ( destInfo . name ) ; break ; case EXIT_REQ : sendExitPacket ( clientSocket ) ; break ; case REQ_HANDLES : numHandles = getNumHandles ( ) ; sendNumClientsPacket ( clientSocket , numHandles ) ; sendHandlePackets ( clientSocket , numHandles ) ; break ; default : printf ( "Bad flag!\n" ) ; printf ( "Flag is: %d\n" , flag ) ; break ; } 
========== 7 ==========
(1) FILE: ../../cclient.c LINES:105:12 TOKENS:547:615 DIST:0.0

void sendListRequest ( ) { listReq * data = malloc ( sizeof ( listReq ) ) ; data -> packetLen = htons ( HEAD_SIZE_CONST ) ; data -> flag = REQ_HANDLES ; if ( send ( socket , ( void * ) data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( FAIL ) ; } free ( data ) ; } 
(2) FILE: ../../cclient.c LINES:118:12 TOKENS:616:684 DIST:0.0

void sendExitRequest ( ) { exitReq * data = malloc ( sizeof ( exitReq ) ) ; data -> packetLen = htons ( HEAD_SIZE_CONST ) ; data -> flag = EXIT_REQ ; if ( send ( socket , ( void * ) data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send Exit Req" ) ; exit ( FAIL ) ; } free ( data ) ; } 
========== 8 ==========
(1) FILE: ../../server.c LINES:101:10 TOKENS:449:502 DIST:0.0

void sendBadHandle ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = BAD_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } void sendHandleACK ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = ACK_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } void sendNumClientsPacket ( int socket , int32_t numHandles ) { char * data = malloc ( NUM_CLIENT_CONST ) ; int32_t num = htonl ( numHandles ) ; int flag = NUM_HANDLES ; int length = htons ( NUM_CLIENT_CONST ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & num , 4 ) ; if ( send ( socket , ( void * ) data , NUM_CLIENT_CONST , 0 ) < 0 ) { perror ( "Sending number of clients" ) ; exit ( FAIL ) ; } } void sendHandle ( ) { char * data = malloc ( GIVE_HANDLE_CONST + handle -> length ) ; int flag = GIVE_HANDLE ; int length = htons ( GIVE_HANDLE_CONST + handle -> length ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & length , 1 ) ; memcpy ( & data [ GIVE_HANDLE_CONST ] , handle -> name , handle -> length ) ; if ( send ( socket , ( void * ) data , GIVE_HANDLE_CONST + handle -> length , 0 ) < 0 ) { perror ( "Sending handle data" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendHandlePackets ( int socket , int32_t numHandles ) { int ndx = 0 ; for ( ndx = 0 ; ndx < numHandles ; ndx ++ ) { Handle * handle = getClientData ( ndx ) ; sendHandle ( socket , handle ) ; } } void sendExitPacket ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = ACK_EXIT ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send Exit ACK" ) ; exit ( FAIL ) ; } } void sendBadDest ( ) { badDest * packet = malloc ( sizeof ( badDest ) ) ; int size = INIT_SIZE_CONST + handle -> len ; unsigned char * data = malloc ( size ) ; packet -> head . packetLen = htons ( size ) ; packet -> head . flag = BAD_DEST ; packet -> handle = handle ; memcpy ( data , & packet -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & packet -> handle -> len , 1 ) ; memcpy ( & data [ INIT_SIZE_CONST ] , packet -> handle -> name , packet -> handle -> len ) ; if ( send ( socketNum , data , size , 0 ) < 0 ) { perror ( "Send Bad Dest" ) ; exit ( FAIL ) ; } free ( data ) ; free ( packet ) ; } 
(2) FILE: ../../cclient.c LINES:46:10 TOKENS:125:180 DIST:3.3

char BUFFER [ MAXBUF ] ; void sendInitPacket ( ) { ; unsigned char * data = malloc ( INIT_SIZE_CONST + clientInfo -> len ) ; sendInfo . head . flag = INIT_HANDLE ; sendInfo . head . packetLen = htons ( INIT_SIZE_CONST + clientInfo -> len ) ; sendInfo . handle = clientInfo ; memcpy ( data , & sendInfo . head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & clientInfo -> len , 1 ) ; memcpy ( & data [ INIT_SIZE_CONST ] , clientInfo -> name , clientInfo -> len ) ; if ( send ( socket_num , data , INIT_SIZE_CONST + clientInfo -> len , 0 ) < 0 ) { perror ( "Send on Client" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendMessage ( ) { messagePacket * msgPck = malloc ( sizeof ( messagePacket ) ) ; int size = MSG_SIZE_CONST + src -> len + dest -> len + msg -> size ; unsigned char * data = malloc ( size ) ; int index = HEAD_SIZE_CONST ; msgPck -> head . packetLen = htons ( size ) ; msgPck -> head . flag = MESSAGE ; msgPck -> dest = dest ; msgPck -> src = src ; msgPck -> text = msg ; memcpy ( data , & msgPck -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & msgPck -> dest -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> dest -> name , msgPck -> dest -> len ) ; index += msgPck -> dest -> len ; memcpy ( & data [ index ] , & msgPck -> src -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> src -> name , msgPck -> src -> len ) ; index += msgPck -> src -> len ; memcpy ( & data [ index ] , msgPck -> text -> msg , msgPck -> text -> size ) ; if ( send ( socket , ( void * ) data , size , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( FAIL ) ; } free ( msgPck ) ; free ( data ) ; } 
========== 9 ==========
(1) FILE: ../../cclient.c LINES:295:10 TOKENS:1440:1499 DIST:0.0

while ( received != numHandles ) { int nbytes = recv ( socket , BUFFER , MAXBUF , 0 ) ; if ( nbytes < 0 ) { perror ( "read" ) ; exit ( FAIL ) ; } else if ( nbytes == 0 ) { fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( PASS ) ; } else { getPacketHandle ( & dest , REQ_HANDLE_LEN_OFF ) ; printf ( "\t%s\n" , dest . name ) ; received ++ ; free ( dest . name ) ; } } 
(2) FILE: ../../cclient.c LINES:343:10 TOKENS:1655:1712 DIST:3.0

if ( ndx == socketNum ) { int nbytes = read ( ndx , BUFFER , MAXBUF ) ; if ( nbytes < 0 ) { perror ( "read" ) ; exit ( FAIL ) ; } else if ( nbytes == 0 ) { FD_CLR ( ndx , & saveFds ) ; fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( PASS ) ; } else { parseDetails ( nbytes , socketNum , ndx , myInfo ) ; } } 
========== 10 ==========
(1) FILE: ../../cclient.c LINES:97:12 TOKENS:512:572 DIST:0.0

char BUFFER [ MAXBUF ] ; void sendInitPacket ( ) { ; unsigned char * data = malloc ( INIT_SIZE_CONST + clientInfo -> len ) ; sendInfo . head . flag = INIT_HANDLE ; sendInfo . head . packetLen = htons ( INIT_SIZE_CONST + clientInfo -> len ) ; sendInfo . handle = clientInfo ; memcpy ( data , & sendInfo . head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & clientInfo -> len , 1 ) ; memcpy ( & data [ INIT_SIZE_CONST ] , clientInfo -> name , clientInfo -> len ) ; if ( send ( socket_num , data , INIT_SIZE_CONST + clientInfo -> len , 0 ) < 0 ) { perror ( "Send on Client" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendMessage ( ) { messagePacket * msgPck = malloc ( sizeof ( messagePacket ) ) ; int size = MSG_SIZE_CONST + src -> len + dest -> len + msg -> size ; unsigned char * data = malloc ( size ) ; int index = HEAD_SIZE_CONST ; msgPck -> head . packetLen = htons ( size ) ; msgPck -> head . flag = MESSAGE ; msgPck -> dest = dest ; msgPck -> src = src ; msgPck -> text = msg ; memcpy ( data , & msgPck -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & msgPck -> dest -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> dest -> name , msgPck -> dest -> len ) ; index += msgPck -> dest -> len ; memcpy ( & data [ index ] , & msgPck -> src -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> src -> name , msgPck -> src -> len ) ; index += msgPck -> src -> len ; memcpy ( & data [ index ] , msgPck -> text -> msg , msgPck -> text -> size ) ; if ( send ( socket , ( void * ) data , size , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( FAIL ) ; } free ( msgPck ) ; free ( data ) ; } void sendMsgToAll ( ) { ; int length = BCAST_SIZE_CONST + myInfo -> len + textMsg -> size ; char * data = malloc ( length ) ; head . packetLen = htons ( length ) ; head . flag = BROADCAST ; memcpy ( data , & head , HEAD_SIZE_CONST ) ; memcpy ( & data [ BCAST_SRC_LEN_OFF ] , & myInfo -> len , 1 ) ; memcpy ( & data [ BCAST_SRC_OFF ] , myInfo -> name , myInfo -> len ) ; memcpy ( & data [ BCAST_SRC_OFF + myInfo -> len ] , textMsg -> msg , strlen ( textMsg -> msg ) ) ; if ( send ( socketNum , ( void * ) data , length , 0 ) < 0 ) { perror ( "Send broadcast" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendListRequest ( ) { listReq * data = malloc ( sizeof ( listReq ) ) ; data -> packetLen = htons ( HEAD_SIZE_CONST ) ; data -> flag = REQ_HANDLES ; if ( send ( socket , ( void * ) data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( FAIL ) ; } free ( data ) ; } 
(2) FILE: ../../cclient.c LINES:109:11 TOKENS:573:632 DIST:3.3

char BUFFER [ MAXBUF ] ; void sendInitPacket ( ) { ; unsigned char * data = malloc ( INIT_SIZE_CONST + clientInfo -> len ) ; sendInfo . head . flag = INIT_HANDLE ; sendInfo . head . packetLen = htons ( INIT_SIZE_CONST + clientInfo -> len ) ; sendInfo . handle = clientInfo ; memcpy ( data , & sendInfo . head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & clientInfo -> len , 1 ) ; memcpy ( & data [ INIT_SIZE_CONST ] , clientInfo -> name , clientInfo -> len ) ; if ( send ( socket_num , data , INIT_SIZE_CONST + clientInfo -> len , 0 ) < 0 ) { perror ( "Send on Client" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendMessage ( ) { messagePacket * msgPck = malloc ( sizeof ( messagePacket ) ) ; int size = MSG_SIZE_CONST + src -> len + dest -> len + msg -> size ; unsigned char * data = malloc ( size ) ; int index = HEAD_SIZE_CONST ; msgPck -> head . packetLen = htons ( size ) ; msgPck -> head . flag = MESSAGE ; msgPck -> dest = dest ; msgPck -> src = src ; msgPck -> text = msg ; memcpy ( data , & msgPck -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & msgPck -> dest -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> dest -> name , msgPck -> dest -> len ) ; index += msgPck -> dest -> len ; memcpy ( & data [ index ] , & msgPck -> src -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> src -> name , msgPck -> src -> len ) ; index += msgPck -> src -> len ; memcpy ( & data [ index ] , msgPck -> text -> msg , msgPck -> text -> size ) ; if ( send ( socket , ( void * ) data , size , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( FAIL ) ; } free ( msgPck ) ; free ( data ) ; } void sendMsgToAll ( ) { ; int length = BCAST_SIZE_CONST + myInfo -> len + textMsg -> size ; char * data = malloc ( length ) ; head . packetLen = htons ( length ) ; head . flag = BROADCAST ; memcpy ( data , & head , HEAD_SIZE_CONST ) ; memcpy ( & data [ BCAST_SRC_LEN_OFF ] , & myInfo -> len , 1 ) ; memcpy ( & data [ BCAST_SRC_OFF ] , myInfo -> name , myInfo -> len ) ; memcpy ( & data [ BCAST_SRC_OFF + myInfo -> len ] , textMsg -> msg , strlen ( textMsg -> msg ) ) ; if ( send ( socketNum , ( void * ) data , length , 0 ) < 0 ) { perror ( "Send broadcast" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendListRequest ( ) { listReq * data = malloc ( sizeof ( listReq ) ) ; data -> packetLen = htons ( HEAD_SIZE_CONST ) ; data -> flag = REQ_HANDLES ; if ( send ( socket , ( void * ) data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendExitRequest ( ) { exitReq * data = malloc ( sizeof ( exitReq ) ) ; data -> packetLen = htons ( HEAD_SIZE_CONST ) ; data -> flag = EXIT_REQ ; if ( send ( socket , ( void * ) data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send Exit Req" ) ; exit ( FAIL ) ; } free ( data ) ; } 
========== 11 ==========
(1) FILE: ../../server.c LINES:121:13 TOKENS:589:652 DIST:3.2

void sendBadHandle ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = BAD_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } void sendHandleACK ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = ACK_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } void sendNumClientsPacket ( int socket , int32_t numHandles ) { char * data = malloc ( NUM_CLIENT_CONST ) ; int32_t num = htonl ( numHandles ) ; int flag = NUM_HANDLES ; int length = htons ( NUM_CLIENT_CONST ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & num , 4 ) ; if ( send ( socket , ( void * ) data , NUM_CLIENT_CONST , 0 ) < 0 ) { perror ( "Sending number of clients" ) ; exit ( FAIL ) ; } } void sendHandle ( ) { char * data = malloc ( GIVE_HANDLE_CONST + handle -> length ) ; int flag = GIVE_HANDLE ; int length = htons ( GIVE_HANDLE_CONST + handle -> length ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & length , 1 ) ; memcpy ( & data [ GIVE_HANDLE_CONST ] , handle -> name , handle -> length ) ; if ( send ( socket , ( void * ) data , GIVE_HANDLE_CONST + handle -> length , 0 ) < 0 ) { perror ( "Sending handle data" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendHandlePackets ( int socket , int32_t numHandles ) { int ndx = 0 ; for ( ndx = 0 ; ndx < numHandles ; ndx ++ ) { Handle * handle = getClientData ( ndx ) ; sendHandle ( socket , handle ) ; } } void sendExitPacket ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = ACK_EXIT ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send Exit ACK" ) ; exit ( FAIL ) ; } } void sendBadDest ( ) { badDest * packet = malloc ( sizeof ( badDest ) ) ; int size = INIT_SIZE_CONST + handle -> len ; unsigned char * data = malloc ( size ) ; packet -> head . packetLen = htons ( size ) ; packet -> head . flag = BAD_DEST ; packet -> handle = handle ; memcpy ( data , & packet -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & packet -> handle -> len , 1 ) ; memcpy ( & data [ INIT_SIZE_CONST ] , packet -> handle -> name , packet -> handle -> len ) ; if ( send ( socketNum , data , size , 0 ) < 0 ) { perror ( "Send Bad Dest" ) ; exit ( FAIL ) ; } free ( data ) ; free ( packet ) ; } void sendMessage ( int socket , char * buffer , int length ) { unsigned char * data = malloc ( length ) ; memcpy ( data , buffer , length ) ; if ( send ( socket , data , length , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( FAIL ) ; } free ( data ) ; } 
(2) FILE: ../../server.c LINES:128:12 TOKENS:606:671 DIST:0.0

void sendMessage ( int socket , char * buffer , int length ) { unsigned char * data = malloc ( length ) ; memcpy ( data , buffer , length ) ; if ( send ( socket , data , length , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( FAIL ) ; } free ( data ) ; } 
========== 12 ==========
(1) FILE: ../../cclient.c LINES:373:9 TOKENS:1786:1845 DIST:0.0

int socketNum = 0 ; cclient * myInfo = malloc ( sizeof ( cclient ) ) ; if ( argc != 4 ) { printf ( "usage: %s handle server-name server-port\n" , argv [ 0 ] ) ; exit ( 1 ) ; } myInfo -> len = strlen ( argv [ 1 ] ) ; myInfo -> name = malloc ( myInfo -> len ) ; memcpy ( myInfo -> name , argv [ 1 ] , myInfo -> len ) ; 
(2) FILE: ../../cclient.c LINES:380:10 TOKENS:1819:1874 DIST:3.5

int socketNum = 0 ; cclient * myInfo = malloc ( sizeof ( cclient ) ) ; if ( argc != 4 ) { printf ( "usage: %s handle server-name server-port\n" , argv [ 0 ] ) ; exit ( 1 ) ; } myInfo -> len = strlen ( argv [ 1 ] ) ; myInfo -> name = malloc ( myInfo -> len ) ; memcpy ( myInfo -> name , argv [ 1 ] , myInfo -> len ) ; socketNum = tcpClientSetup ( argv [ 2 ] , argv [ 3 ] ) ; sendInitPacket ( myInfo , socketNum ) ; fprintf ( stderr , "$:" ) ; 
========== 13 ==========
(1) FILE: ../../server.c LINES:128:9 TOKENS:607:665 DIST:2.8

void sendMessage ( int socket , char * buffer , int length ) { unsigned char * data = malloc ( length ) ; memcpy ( data , buffer , length ) ; if ( send ( socket , data , length , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( FAIL ) ; } free ( data ) ; } 
(2) FILE: ../../server.c LINES:119:11 TOKENS:570:629 DIST:0.0

void sendBadHandle ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = BAD_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } void sendHandleACK ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = ACK_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } void sendNumClientsPacket ( int socket , int32_t numHandles ) { char * data = malloc ( NUM_CLIENT_CONST ) ; int32_t num = htonl ( numHandles ) ; int flag = NUM_HANDLES ; int length = htons ( NUM_CLIENT_CONST ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & num , 4 ) ; if ( send ( socket , ( void * ) data , NUM_CLIENT_CONST , 0 ) < 0 ) { perror ( "Sending number of clients" ) ; exit ( FAIL ) ; } } void sendHandle ( ) { char * data = malloc ( GIVE_HANDLE_CONST + handle -> length ) ; int flag = GIVE_HANDLE ; int length = htons ( GIVE_HANDLE_CONST + handle -> length ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & length , 1 ) ; memcpy ( & data [ GIVE_HANDLE_CONST ] , handle -> name , handle -> length ) ; if ( send ( socket , ( void * ) data , GIVE_HANDLE_CONST + handle -> length , 0 ) < 0 ) { perror ( "Sending handle data" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendHandlePackets ( int socket , int32_t numHandles ) { int ndx = 0 ; for ( ndx = 0 ; ndx < numHandles ; ndx ++ ) { Handle * handle = getClientData ( ndx ) ; sendHandle ( socket , handle ) ; } } void sendExitPacket ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = ACK_EXIT ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send Exit ACK" ) ; exit ( FAIL ) ; } } void sendBadDest ( ) { badDest * packet = malloc ( sizeof ( badDest ) ) ; int size = INIT_SIZE_CONST + handle -> len ; unsigned char * data = malloc ( size ) ; packet -> head . packetLen = htons ( size ) ; packet -> head . flag = BAD_DEST ; packet -> handle = handle ; memcpy ( data , & packet -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & packet -> handle -> len , 1 ) ; memcpy ( & data [ INIT_SIZE_CONST ] , packet -> handle -> name , packet -> handle -> len ) ; if ( send ( socketNum , data , size , 0 ) < 0 ) { perror ( "Send Bad Dest" ) ; exit ( FAIL ) ; } free ( data ) ; free ( packet ) ; } void sendMessage ( int socket , char * buffer , int length ) { unsigned char * data = malloc ( length ) ; memcpy ( data , buffer , length ) ; if ( send ( socket , data , length , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( FAIL ) ; } free ( data ) ; } 
========== 14 ==========
(1) FILE: ../../server.c LINES:25:13 TOKENS:3:56 DIST:0.0

void sendBadHandle ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = BAD_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } void sendHandleACK ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = ACK_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } 
(2) FILE: ../../server.c LINES:37:14 TOKENS:60:113 DIST:1.7

void sendBadHandle ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = BAD_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } void sendHandleACK ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = ACK_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } void sendNumClientsPacket ( int socket , int32_t numHandles ) { char * data = malloc ( NUM_CLIENT_CONST ) ; int32_t num = htonl ( numHandles ) ; int flag = NUM_HANDLES ; int length = htons ( NUM_CLIENT_CONST ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & num , 4 ) ; if ( send ( socket , ( void * ) data , NUM_CLIENT_CONST , 0 ) < 0 ) { perror ( "Sending number of clients" ) ; exit ( FAIL ) ; } } 
(3) FILE: ../../server.c LINES:93:13 TOKENS:403:456 DIST:0.0

void sendBadHandle ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = BAD_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } void sendHandleACK ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = ACK_HANDLE ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send on Server" ) ; exit ( FAIL ) ; } } void sendNumClientsPacket ( int socket , int32_t numHandles ) { char * data = malloc ( NUM_CLIENT_CONST ) ; int32_t num = htonl ( numHandles ) ; int flag = NUM_HANDLES ; int length = htons ( NUM_CLIENT_CONST ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & num , 4 ) ; if ( send ( socket , ( void * ) data , NUM_CLIENT_CONST , 0 ) < 0 ) { perror ( "Sending number of clients" ) ; exit ( FAIL ) ; } } void sendHandle ( ) { char * data = malloc ( GIVE_HANDLE_CONST + handle -> length ) ; int flag = GIVE_HANDLE ; int length = htons ( GIVE_HANDLE_CONST + handle -> length ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & length , 1 ) ; memcpy ( & data [ GIVE_HANDLE_CONST ] , handle -> name , handle -> length ) ; if ( send ( socket , ( void * ) data , GIVE_HANDLE_CONST + handle -> length , 0 ) < 0 ) { perror ( "Sending handle data" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendHandlePackets ( int socket , int32_t numHandles ) { int ndx = 0 ; for ( ndx = 0 ; ndx < numHandles ; ndx ++ ) { Handle * handle = getClientData ( ndx ) ; sendHandle ( socket , handle ) ; } } void sendExitPacket ( int socket ) { ; data . packetLen = htons ( HEAD_SIZE_CONST ) ; data . flag = ACK_EXIT ; if ( send ( socket , ( void * ) & data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send Exit ACK" ) ; exit ( FAIL ) ; } } void sendBadDest ( ) { badDest * packet = malloc ( sizeof ( badDest ) ) ; int size = INIT_SIZE_CONST + handle -> len ; unsigned char * data = malloc ( size ) ; packet -> head . packetLen = htons ( size ) ; packet -> head . flag = BAD_DEST ; packet -> handle = handle ; memcpy ( data , & packet -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & packet -> handle -> len , 1 ) ; memcpy ( & data [ INIT_SIZE_CONST ] , packet -> handle -> name , packet -> handle -> len ) ; if ( send ( socketNum , data , size , 0 ) < 0 ) { perror ( "Send Bad Dest" ) ; exit ( FAIL ) ; } free ( data ) ; free ( packet ) ; } 
========== 15 ==========
(1) FILE: ../../cclient.c LINES:106:9 TOKENS:552:609 DIST:3.6

listReq * data = malloc ( sizeof ( listReq ) ) ; data -> packetLen = htons ( HEAD_SIZE_CONST ) ; data -> flag = REQ_HANDLES ; if ( send ( socket , ( void * ) data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( FAIL ) ; } 
(2) FILE: ../../cclient.c LINES:99:13 TOKENS:535:596 DIST:0.0

char BUFFER [ MAXBUF ] ; void sendInitPacket ( ) { ; unsigned char * data = malloc ( INIT_SIZE_CONST + clientInfo -> len ) ; sendInfo . head . flag = INIT_HANDLE ; sendInfo . head . packetLen = htons ( INIT_SIZE_CONST + clientInfo -> len ) ; sendInfo . handle = clientInfo ; memcpy ( data , & sendInfo . head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & clientInfo -> len , 1 ) ; memcpy ( & data [ INIT_SIZE_CONST ] , clientInfo -> name , clientInfo -> len ) ; if ( send ( socket_num , data , INIT_SIZE_CONST + clientInfo -> len , 0 ) < 0 ) { perror ( "Send on Client" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendMessage ( ) { messagePacket * msgPck = malloc ( sizeof ( messagePacket ) ) ; int size = MSG_SIZE_CONST + src -> len + dest -> len + msg -> size ; unsigned char * data = malloc ( size ) ; int index = HEAD_SIZE_CONST ; msgPck -> head . packetLen = htons ( size ) ; msgPck -> head . flag = MESSAGE ; msgPck -> dest = dest ; msgPck -> src = src ; msgPck -> text = msg ; memcpy ( data , & msgPck -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & msgPck -> dest -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> dest -> name , msgPck -> dest -> len ) ; index += msgPck -> dest -> len ; memcpy ( & data [ index ] , & msgPck -> src -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> src -> name , msgPck -> src -> len ) ; index += msgPck -> src -> len ; memcpy ( & data [ index ] , msgPck -> text -> msg , msgPck -> text -> size ) ; if ( send ( socket , ( void * ) data , size , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( FAIL ) ; } free ( msgPck ) ; free ( data ) ; } void sendMsgToAll ( ) { ; int length = BCAST_SIZE_CONST + myInfo -> len + textMsg -> size ; char * data = malloc ( length ) ; head . packetLen = htons ( length ) ; head . flag = BROADCAST ; memcpy ( data , & head , HEAD_SIZE_CONST ) ; memcpy ( & data [ BCAST_SRC_LEN_OFF ] , & myInfo -> len , 1 ) ; memcpy ( & data [ BCAST_SRC_OFF ] , myInfo -> name , myInfo -> len ) ; memcpy ( & data [ BCAST_SRC_OFF + myInfo -> len ] , textMsg -> msg , strlen ( textMsg -> msg ) ) ; if ( send ( socketNum , ( void * ) data , length , 0 ) < 0 ) { perror ( "Send broadcast" ) ; exit ( FAIL ) ; } free ( data ) ; } void sendListRequest ( ) { listReq * data = malloc ( sizeof ( listReq ) ) ; data -> packetLen = htons ( HEAD_SIZE_CONST ) ; data -> flag = REQ_HANDLES ; if ( send ( socket , ( void * ) data , HEAD_SIZE_CONST , 0 ) < 0 ) { perror ( "Send List Req" ) ; exit ( FAIL ) ; } free ( data ) ; } 
========== 16 ==========
(1) FILE: ../../cclient.c LINES:73:6 TOKENS:337:388 DIST:3.0

messagePacket * msgPck = malloc ( sizeof ( messagePacket ) ) ; int size = MSG_SIZE_CONST + src -> len + dest -> len + msg -> size ; unsigned char * data = malloc ( size ) ; int index = HEAD_SIZE_CONST ; msgPck -> head . packetLen = htons ( size ) ; msgPck -> head . flag = MESSAGE ; msgPck -> dest = dest ; msgPck -> src = src ; msgPck -> text = msg ; memcpy ( data , & msgPck -> head , HEAD_SIZE_CONST ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & msgPck -> dest -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> dest -> name , msgPck -> dest -> len ) ; index += msgPck -> dest -> len ; memcpy ( & data [ index ] , & msgPck -> src -> len , 1 ) ; index += 1 ; memcpy ( & data [ index ] , msgPck -> src -> name , msgPck -> src -> len ) ; index += msgPck -> src -> len ; memcpy ( & data [ index ] , msgPck -> text -> msg , msgPck -> text -> size ) ; if ( send ( socket , ( void * ) data , size , 0 ) < 0 ) { perror ( "Send Message" ) ; exit ( FAIL ) ; } 
(2) FILE: ../../server.c LINES:75:6 TOKENS:295:346 DIST:0.0

char * data = malloc ( GIVE_HANDLE_CONST + handle -> length ) ; int flag = GIVE_HANDLE ; int length = htons ( GIVE_HANDLE_CONST + handle -> length ) ; memcpy ( data , & length , 2 ) ; memcpy ( & data [ FLAG_OFF ] , & flag , 1 ) ; memcpy ( & data [ HEAD_SIZE_CONST ] , & length , 1 ) ; memcpy ( & data [ GIVE_HANDLE_CONST ] , handle -> name , handle -> length ) ; if ( send ( socket , ( void * ) data , GIVE_HANDLE_CONST + handle -> length , 0 ) < 0 ) { perror ( "Sending handle data" ) ; exit ( FAIL ) ; } 
========== 17 ==========
(1) FILE: ../../cclient.c LINES:332:9 TOKENS:1591:1650 DIST:1.0

while ( 1 ) { useFds = saveFds ; if ( select ( FD_SETSIZE , & useFds , NULL , NULL , NULL ) < 0 ) { perror ( "select" ) ; exit ( FAIL ) ; } for ( ndx = 0 ; ndx < FD_SETSIZE ; ndx ++ ) { if ( FD_ISSET ( ndx , & useFds ) ) { if ( ndx == socketNum ) { int nbytes = read ( ndx , BUFFER , MAXBUF ) ; if ( nbytes < 0 ) { perror ( "read" ) ; exit ( FAIL ) ; } else if ( nbytes == 0 ) { FD_CLR ( ndx , & saveFds ) ; fprintf ( stderr , "\nServer Terminated.\n" ) ; exit ( PASS ) ; } else { parseDetails ( nbytes , socketNum , ndx , myInfo ) ; } } else if ( ndx == CONSOLE ) { processCommands ( myInfo , socketNum ) ; } } } } 
(2) FILE: ../../server.c LINES:255:9 TOKENS:1319:1380 DIST:0.0

while ( 1 ) { useFds = saveFds ; if ( select ( FD_SETSIZE , & useFds , NULL , NULL , NULL ) < 0 ) { perror ( "select" ) ; exit ( FAIL ) ; } for ( ndx = 0 ; ndx < FD_SETSIZE ; ndx ++ ) { if ( FD_ISSET ( ndx , & useFds ) ) { if ( ndx == socketNum ) { client_socket = tcpAccept ( socketNum ) ; FD_SET ( client_socket , & saveFds ) ; numFds ++ ; } else { char * buffer = malloc ( MAXBUF ) ; int nbytes = read ( ndx , buffer , MAXBUF ) ; if ( nbytes < 0 ) { perror ( "read" ) ; exit ( FAIL ) ; } else if ( nbytes == 0 ) { FD_CLR ( ndx , & saveFds ) ; removeSocket ( ndx ) ; } else { parseDetails ( nbytes , buffer , socketNum , ndx ) ; } free ( buffer ) ; } } } } 

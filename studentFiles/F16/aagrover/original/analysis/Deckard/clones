========== 1 ==========
(1) FILE: ../../server.c LINES:114:19 TOKENS:423:484 DIST:0.0

{ case 1 : initialPacket ( packet , client_socket ) ; break ; case 5 : sendMessage ( packet , client_socket ) ; break ; case 4 : broadcastMessage ( packet , client_socket ) ; break ; case 8 : exitClient ( packet , client_socket ) ; break ; case 10 : listAllHandles ( packet , client_socket ) ; break ; } 
(2) FILE: ../../cclient.c LINES:112:17 TOKENS:396:453 DIST:3.5

switch ( flag ) { case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } break ; default : break ; } 
========== 2 ==========
(1) FILE: ../../server.c LINES:24:5 TOKENS:0:53 DIST:0.0

void receiveData ( int client_socket ) ; void initialPacket ( char * packet , int client_socket ) ; void sendMessage ( char * packet , int client_socket ) ; void destinationError ( int client_socket , char * invalid , char * send_to , int send_to_len , char * send_from , int send_from_len ) ; 
(2) FILE: ../../cclient.c LINES:28:4 TOKENS:31:86 DIST:2.0

void startUp ( int socket_fd ) ; void printPrompt ( void ) ; void initPacket ( char * client_handle , int socket_fd ) ; void promptUser ( int socket_fd ) ; void message ( char * input , int socket_fd , int send_len ) ; void broadcast ( char * input , int socket_fd , int send_len ) ; void handleList ( char * input , int socket_fd , int send_len ) ; void exitClient ( char * input , int socket_fd , int send_len ) ; 
========== 3 ==========
(1) FILE: ../../server.c LINES:297:6 TOKENS:1366:1418 DIST:0.0

char * send_to , * send_from , * text , * invalid ; uint8_t send_to_len , send_from_len , flag ; int fd_index = - 1 , fd_send , sent , text_len ; uint16_t packet_len ; send_to_len = * ( packet + HEADER ) ; send_to = packet + HEADER + BYTE ; send_from_len = * ( packet + HEADER + BYTE + send_to_len ) ; send_from = packet + HEADER + BYTE + send_to_len + BYTE ; text = packet + HEADER + BYTE + send_to_len + BYTE + send_from_len ; text_len = * ( uint16_t * ) packet - HEADER - BYTE - send_to_len - BYTE - send_from_len ; if ( strlen ( text ) == 0 ) { text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; text_len = 1 ; } invalid = malloc ( send_to_len ) ; memcpy ( invalid , send_to , send_to_len ) ; fd_index = compareClients ( send_to , send_to_len ) ; flag = 5 ; packet_len = HEADER + BYTE + send_from_len + text_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; memcpy ( packet + PACKET_LEN + BYTE , & send_from_len , BYTE ) ; 
(2) FILE: ../../server.c LINES:357:6 TOKENS:1740:1790 DIST:3.0

char * packet_new , * send_from , * text ; uint16_t packet_len , text_len , packet_new_len ; uint8_t send_from_len , flag = 5 ; packet_len = * ( ( uint16_t * ) packet ) ; send_from_len = * ( ( uint8_t * ) ( packet + HEADER ) ) ; send_from = packet + HEADER + BYTE ; text = packet + HEADER + BYTE + send_from_len ; text_len = packet_len - HEADER - BYTE - send_from_len ; if ( strlen ( text ) == 0 ) { text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; text_len = 1 ; } packet_new_len = HEADER + BYTE + send_from_len + text_len ; packet_new = malloc ( packet_new_len ) ; memcpy ( packet_new , & packet_new_len , PACKET_LEN ) ; memcpy ( packet_new + PACKET_LEN , & flag , BYTE ) ; memcpy ( packet_new + HEADER , & send_from_len , BYTE ) ; 
(3) FILE: ../../server.c LINES:384:5 TOKENS:1918:1968 DIST:3.0

char * packet ; uint16_t packet_len ; uint8_t flag = 7 , len = send_to_len ; int sent ; packet_len = HEADER + BYTE + send_to_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; memcpy ( packet + PACKET_LEN + BYTE , & len , BYTE ) ; 
========== 4 ==========
(1) FILE: ../../server.c LINES:386:4 TOKENS:1933:1983 DIST:0.0

char * packet ; uint16_t packet_len ; uint8_t flag = 7 , len = send_to_len ; int sent ; packet_len = HEADER + BYTE + send_to_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; memcpy ( packet + PACKET_LEN + BYTE , & len , BYTE ) ; memcpy ( packet + PACKET_LEN + BYTE + BYTE , send_to , len ) ; 
(2) FILE: ../../server.c LINES:300:4 TOKENS:1383:1433 DIST:0.0

char * send_to , * send_from , * text , * invalid ; uint8_t send_to_len , send_from_len , flag ; int fd_index = - 1 , fd_send , sent , text_len ; uint16_t packet_len ; send_to_len = * ( packet + HEADER ) ; send_to = packet + HEADER + BYTE ; send_from_len = * ( packet + HEADER + BYTE + send_to_len ) ; send_from = packet + HEADER + BYTE + send_to_len + BYTE ; text = packet + HEADER + BYTE + send_to_len + BYTE + send_from_len ; text_len = * ( uint16_t * ) packet - HEADER - BYTE - send_to_len - BYTE - send_from_len ; if ( strlen ( text ) == 0 ) { text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; text_len = 1 ; } invalid = malloc ( send_to_len ) ; memcpy ( invalid , send_to , send_to_len ) ; fd_index = compareClients ( send_to , send_to_len ) ; flag = 5 ; packet_len = HEADER + BYTE + send_from_len + text_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; memcpy ( packet + PACKET_LEN + BYTE , & send_from_len , BYTE ) ; memcpy ( packet + PACKET_LEN + BYTE + BYTE , send_from , send_from_len ) ; 
========== 5 ==========
(1) FILE: ../../cclient.c LINES:397:10 TOKENS:1654:1710 DIST:0.0

void exitClient ( char * input , int socket_fd , int send_len ) { uint16_t packet_len ; uint8_t flag = 8 ; char * packet ; int sent ; packet_len = HEADER ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; sent = send ( socket_fd , packet , packet_len , 0 ) ; } 
(2) FILE: ../../cclient.c LINES:382:10 TOKENS:1579:1634 DIST:3.5

void handleList ( char * input , int socket_fd , int send_len ) { char * packet ; uint16_t packet_len = HEADER ; uint8_t flag = 10 ; int sent ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; sent = send ( socket_fd , packet , packet_len , 0 ) ; } 
========== 6 ==========
(1) FILE: ../../cclient.c LINES:382:13 TOKENS:1575:1648 DIST:0.0

void handleList ( char * input , int socket_fd , int send_len ) { char * packet ; uint16_t packet_len = HEADER ; uint8_t flag = 10 ; int sent ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; sent = send ( socket_fd , packet , packet_len , 0 ) ; } 
(2) FILE: ../../cclient.c LINES:397:13 TOKENS:1649:1724 DIST:3.3

void exitClient ( char * input , int socket_fd , int send_len ) { uint16_t packet_len ; uint8_t flag = 8 ; char * packet ; int sent ; packet_len = HEADER ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; sent = send ( socket_fd , packet , packet_len , 0 ) ; } 
========== 7 ==========
(1) FILE: ../../cclient.c LINES:121:14 TOKENS:422:471 DIST:3.2

case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } break ; 
(2) FILE: ../../server.c LINES:123:16 TOKENS:449:503 DIST:2.4

if ( ! list_flag ) { packet_len = * ( uint16_t * ) packet ; flag = * ( ( uint8_t * ) ( packet + PACKET_LEN ) ) ; switch ( flag ) { case 1 : initialPacket ( packet , client_socket ) ; break ; case 5 : sendMessage ( packet , client_socket ) ; break ; case 4 : broadcastMessage ( packet , client_socket ) ; break ; case 8 : exitClient ( packet , client_socket ) ; break ; case 10 : listAllHandles ( packet , client_socket ) ; break ; } } else { if ( sending_index == num_handles_name ) { sending_index = 0 ; list_flag = 0 ; } else { sendHandle ( sending_index ) ; } } 
========== 8 ==========
(1) FILE: ../../cclient.c LINES:397:12 TOKENS:1660:1723 DIST:3.6

void exitClient ( char * input , int socket_fd , int send_len ) { uint16_t packet_len ; uint8_t flag = 8 ; char * packet ; int sent ; packet_len = HEADER ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; sent = send ( socket_fd , packet , packet_len , 0 ) ; } 
(2) FILE: ../../cclient.c LINES:382:12 TOKENS:1585:1647 DIST:0.0

void handleList ( char * input , int socket_fd , int send_len ) { char * packet ; uint16_t packet_len = HEADER ; uint8_t flag = 10 ; int sent ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; sent = send ( socket_fd , packet , packet_len , 0 ) ; } 
========== 9 ==========
(1) FILE: ../../cclient.c LINES:270:13 TOKENS:1007:1057 DIST:2.8

case 'm' : message ( send_buf , socket_fd , send_len ) ; break ; case 'b' : broadcast ( send_buf , socket_fd , send_len ) ; break ; case 'l' : handleList ( send_buf , socket_fd , send_len ) ; break ; case 'e' : exitClient ( send_buf , socket_fd , send_len ) ; break ; default : printf ( "Invalid command\n" ) ; break ; 
(2) FILE: ../../server.c LINES:114:16 TOKENS:421:472 DIST:0.0

switch ( flag ) { case 1 : initialPacket ( packet , client_socket ) ; break ; case 5 : sendMessage ( packet , client_socket ) ; break ; case 4 : broadcastMessage ( packet , client_socket ) ; break ; case 8 : exitClient ( packet , client_socket ) ; break ; case 10 : listAllHandles ( packet , client_socket ) ; break ; } 
========== 10 ==========
(1) FILE: ../../server.c LINES:123:16 TOKENS:449:503 DIST:2.8

if ( ! list_flag ) { packet_len = * ( uint16_t * ) packet ; flag = * ( ( uint8_t * ) ( packet + PACKET_LEN ) ) ; switch ( flag ) { case 1 : initialPacket ( packet , client_socket ) ; break ; case 5 : sendMessage ( packet , client_socket ) ; break ; case 4 : broadcastMessage ( packet , client_socket ) ; break ; case 8 : exitClient ( packet , client_socket ) ; break ; case 10 : listAllHandles ( packet , client_socket ) ; break ; } } else { if ( sending_index == num_handles_name ) { sending_index = 0 ; list_flag = 0 ; } else { sendHandle ( sending_index ) ; } } 
(2) FILE: ../../cclient.c LINES:120:14 TOKENS:420:469 DIST:0.0

case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } 
========== 11 ==========
(1) FILE: ../../cclient.c LINES:270:13 TOKENS:1007:1057 DIST:3.0

case 'm' : message ( send_buf , socket_fd , send_len ) ; break ; case 'b' : broadcast ( send_buf , socket_fd , send_len ) ; break ; case 'l' : handleList ( send_buf , socket_fd , send_len ) ; break ; case 'e' : exitClient ( send_buf , socket_fd , send_len ) ; break ; default : printf ( "Invalid command\n" ) ; break ; 
(2) FILE: ../../server.c LINES:115:15 TOKENS:425:474 DIST:0.0

case 1 : initialPacket ( packet , client_socket ) ; break ; case 5 : sendMessage ( packet , client_socket ) ; break ; case 4 : broadcastMessage ( packet , client_socket ) ; break ; case 8 : exitClient ( packet , client_socket ) ; break ; case 10 : 
========== 12 ==========
(1) FILE: ../../server.c LINES:288:10 TOKENS:1323:1375 DIST:0.0

char * send_to , * send_from , * text , * invalid ; uint8_t send_to_len , send_from_len , flag ; int fd_index = - 1 , fd_send , sent , text_len ; uint16_t packet_len ; send_to_len = * ( packet + HEADER ) ; send_to = packet + HEADER + BYTE ; send_from_len = * ( packet + HEADER + BYTE + send_to_len ) ; send_from = packet + HEADER + BYTE + send_to_len + BYTE ; text = packet + HEADER + BYTE + send_to_len + BYTE + send_from_len ; text_len = * ( uint16_t * ) packet - HEADER - BYTE - send_to_len - BYTE - send_from_len ; if ( strlen ( text ) == 0 ) { text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; text_len = 1 ; } invalid = malloc ( send_to_len ) ; memcpy ( invalid , send_to , send_to_len ) ; fd_index = compareClients ( send_to , send_to_len ) ; flag = 5 ; packet_len = HEADER + BYTE + send_from_len + text_len ; 
(2) FILE: ../../server.c LINES:351:10 TOKENS:1711:1766 DIST:3.2

char * packet_new , * send_from , * text ; uint16_t packet_len , text_len , packet_new_len ; uint8_t send_from_len , flag = 5 ; packet_len = * ( ( uint16_t * ) packet ) ; send_from_len = * ( ( uint8_t * ) ( packet + HEADER ) ) ; send_from = packet + HEADER + BYTE ; text = packet + HEADER + BYTE + send_from_len ; text_len = packet_len - HEADER - BYTE - send_from_len ; if ( strlen ( text ) == 0 ) { text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; text_len = 1 ; } packet_new_len = HEADER + BYTE + send_from_len + text_len ; packet_new = malloc ( packet_new_len ) ; memcpy ( packet_new , & packet_new_len , PACKET_LEN ) ; 
========== 13 ==========
(1) FILE: ../../cclient.c LINES:358:13 TOKENS:1456:1512 DIST:3.3

char * token = input , * handle , * packet , * text ; uint8_t sending_len , flag = 4 ; int total_len , txt_len , sent ; token = strtok ( token , " " ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 3 ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( NULL , " " ) ) != NULL ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; handle = global_handle ; strcat ( text , "\0" ) ; total_len = 3 + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; 
(2) FILE: ../../cclient.c LINES:309:12 TOKENS:1190:1247 DIST:0.0

char * token = send_buf , * handle , * packet , * text ; const char * delim = " " , flag = 5 ; int sent , txt_len = 0 ; uint16_t total_len = 0 ; uint8_t handle_len , sending_len ; token = strtok ( token , delim ) ; handle = strtok ( NULL , delim ) ; handle_len = strlen ( handle ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 4 - handle_len ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( NULL , delim ) ) != NULL ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; total_len = 3 + 1 + handle_len + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; 
========== 14 ==========
(1) FILE: ../../cclient.c LINES:397:10 TOKENS:1657:1710 DIST:3.5

void exitClient ( char * input , int socket_fd , int send_len ) { uint16_t packet_len ; uint8_t flag = 8 ; char * packet ; int sent ; packet_len = HEADER ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; sent = send ( socket_fd , packet , packet_len , 0 ) ; } 
(2) FILE: ../../server.c LINES:177:11 TOKENS:697:749 DIST:0.0

void listAllHandles ( char * packet , int client_socket ) { char * ret_packet ; uint16_t packet_len ; uint8_t flag = 11 ; int sent ; packet_len = HEADER + 4 ; ret_packet = malloc ( packet_len ) ; memcpy ( ret_packet , & packet_len , PACKET_LEN ) ; memcpy ( ret_packet + PACKET_LEN , & flag , BYTE ) ; memcpy ( ret_packet + HEADER , & num_handles_name , 4 ) ; sent = send ( client_socket , ret_packet , packet_len , 0 ) ; free ( ret_packet ) ; list_flag = 1 ; list_client = client_socket ; } 
========== 15 ==========
(1) FILE: ../../cclient.c LINES:178:10 TOKENS:663:714 DIST:1.4

void startUp ( int socket_fd ) ; void printPrompt ( void ) ; void initPacket ( char * client_handle , int socket_fd ) ; void promptUser ( int socket_fd ) ; void message ( char * input , int socket_fd , int send_len ) ; void broadcast ( char * input , int socket_fd , int send_len ) ; void handleList ( char * input , int socket_fd , int send_len ) ; void exitClient ( char * input , int socket_fd , int send_len ) ; void transmitCheck ( int socket_fd ) ; void receivingMessage ( char * packet ) ; void errorMessage ( char * packet ) ; void receiveNumHandles ( char * packet , int socket_fd ) ; void printHandles ( char * packet , int socket_fd ) ; void terminateClient ( char * packet ) ; char * global_handle ; int max_socket = 3 ; int list_flag = 0 ; int actual_clients = 0 ; int count_clients = 0 ; int main ( int argc , char * argv [ ] ) { int socket_fd = 0 ; if ( argc != 4 ) { fprintf ( stderr , "Error - must include IP address, port number, and client handle name\n" ) ; exit ( EXIT_FAILURE ) ; } socket_fd = tcpClientSetup ( argv [ 2 ] , argv [ 3 ] ) ; initPacket ( argv [ 1 ] , socket_fd ) ; startUp ( socket_fd ) ; close ( socket_fd ) ; return 0 ; } void startUp ( int socket_fd ) { ; FD_ZERO ( & fdvar ) ; FD_SET ( socket_fd , & fdvar ) ; while ( 1 ) { if ( ! list_flag ) { printPrompt ( ) ; } while ( 1 ) { ; } if ( ! list_flag ) { if ( FD_ISSET ( STDIN_FILENO , & fdvar ) ) { promptUser ( socket_fd ) ; } } break ; } break ; } } } void transmitCheck ( int socket_fd ) { char * packet = NULL ; int bytes_recv = - 1 ; uint8_t flag ; static struct timeval timeout ; timeout . tv_sec = 1 ; timeout . tv_usec = 0 ; packet = malloc ( MAXBUF ) ; bytes_recv = recv ( socket_fd , packet , MAXBUF , 0 ) ; if ( bytes_recv != - 1 ) { flag = * ( packet + PACKET_LEN ) ; switch ( flag ) { case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } break ; default : break ; } } } void terminateClient ( char * packet ) { printf ( "\n" ) ; exit ( EXIT_SUCCESS ) ; } void printHandles ( char * packet , int socket_fd ) { uint16_t packet_len , gar_len = HEADER ; uint8_t flag ; uint8_t handle_len ; char * handle , * garbage = malloc ( HEADER ) ; packet_len = * ( uint16_t * ) packet ; handle_len = * ( ( uint8_t * ) ( packet + HEADER ) ) ; handle = packet + HEADER + BYTE ; printf ( "\t%s\n" , handle ) ; flag = 0 ; memcpy ( garbage , & gar_len , PACKET_LEN ) ; memcpy ( garbage + PACKET_LEN , & flag , BYTE ) ; send ( socket_fd , garbage , gar_len , 0 ) ; } void receiveNumHandles ( char * packet , int socket_fd ) { uint32_t num_clients ; char * garbage = malloc ( HEADER ) ; uint16_t gar_len = HEADER ; int flag = 0 ; num_clients = * ( ( uint32_t * ) ( packet + HEADER ) ) ; actual_clients = num_clients ; printf ( "\nNumber of clients: %d\n" , num_clients ) ; list_flag = 1 ; memcpy ( garbage , & gar_len , PACKET_LEN ) ; memcpy ( garbage + PACKET_LEN , & flag , BYTE ) ; send ( socket_fd , garbage , gar_len , 0 ) ; } void receivingMessage ( char * packet ) { char * sender , * text , * buf ; uint16_t packet_len ; uint8_t sender_len ; packet_len = * ( ( uint16_t * ) packet ) ; sender_len = * ( packet + HEADER ) ; sender = packet + HEADER + BYTE ; text = packet + HEADER + BYTE + sender_len ; buf = malloc ( sender_len ) ; memcpy ( buf , sender , sender_len ) ; printf ( "\n%s: %s\n" , buf , text ) ; free ( buf ) ; } 
(2) FILE: ../../cclient.c LINES:157:12 TOKENS:566:618 DIST:0.0

void startUp ( int socket_fd ) ; void printPrompt ( void ) ; void initPacket ( char * client_handle , int socket_fd ) ; void promptUser ( int socket_fd ) ; void message ( char * input , int socket_fd , int send_len ) ; void broadcast ( char * input , int socket_fd , int send_len ) ; void handleList ( char * input , int socket_fd , int send_len ) ; void exitClient ( char * input , int socket_fd , int send_len ) ; void transmitCheck ( int socket_fd ) ; void receivingMessage ( char * packet ) ; void errorMessage ( char * packet ) ; void receiveNumHandles ( char * packet , int socket_fd ) ; void printHandles ( char * packet , int socket_fd ) ; void terminateClient ( char * packet ) ; char * global_handle ; int max_socket = 3 ; int list_flag = 0 ; int actual_clients = 0 ; int count_clients = 0 ; int main ( int argc , char * argv [ ] ) { int socket_fd = 0 ; if ( argc != 4 ) { fprintf ( stderr , "Error - must include IP address, port number, and client handle name\n" ) ; exit ( EXIT_FAILURE ) ; } socket_fd = tcpClientSetup ( argv [ 2 ] , argv [ 3 ] ) ; initPacket ( argv [ 1 ] , socket_fd ) ; startUp ( socket_fd ) ; close ( socket_fd ) ; return 0 ; } void startUp ( int socket_fd ) { ; FD_ZERO ( & fdvar ) ; FD_SET ( socket_fd , & fdvar ) ; while ( 1 ) { if ( ! list_flag ) { printPrompt ( ) ; } while ( 1 ) { ; } if ( ! list_flag ) { if ( FD_ISSET ( STDIN_FILENO , & fdvar ) ) { promptUser ( socket_fd ) ; } } break ; } break ; } } } void transmitCheck ( int socket_fd ) { char * packet = NULL ; int bytes_recv = - 1 ; uint8_t flag ; static struct timeval timeout ; timeout . tv_sec = 1 ; timeout . tv_usec = 0 ; packet = malloc ( MAXBUF ) ; bytes_recv = recv ( socket_fd , packet , MAXBUF , 0 ) ; if ( bytes_recv != - 1 ) { flag = * ( packet + PACKET_LEN ) ; switch ( flag ) { case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } break ; default : break ; } } } void terminateClient ( char * packet ) { printf ( "\n" ) ; exit ( EXIT_SUCCESS ) ; } void printHandles ( char * packet , int socket_fd ) { uint16_t packet_len , gar_len = HEADER ; uint8_t flag ; uint8_t handle_len ; char * handle , * garbage = malloc ( HEADER ) ; packet_len = * ( uint16_t * ) packet ; handle_len = * ( ( uint8_t * ) ( packet + HEADER ) ) ; handle = packet + HEADER + BYTE ; printf ( "\t%s\n" , handle ) ; flag = 0 ; memcpy ( garbage , & gar_len , PACKET_LEN ) ; memcpy ( garbage + PACKET_LEN , & flag , BYTE ) ; send ( socket_fd , garbage , gar_len , 0 ) ; } void receiveNumHandles ( char * packet , int socket_fd ) { uint32_t num_clients ; char * garbage = malloc ( HEADER ) ; uint16_t gar_len = HEADER ; int flag = 0 ; num_clients = * ( ( uint32_t * ) ( packet + HEADER ) ) ; actual_clients = num_clients ; printf ( "\nNumber of clients: %d\n" , num_clients ) ; list_flag = 1 ; memcpy ( garbage , & gar_len , PACKET_LEN ) ; memcpy ( garbage + PACKET_LEN , & flag , BYTE ) ; send ( socket_fd , garbage , gar_len , 0 ) ; } 
========== 16 ==========
(1) FILE: ../../server.c LINES:29:6 TOKENS:54:111 DIST:0.0

void receiveData ( int client_socket ) ; void initialPacket ( char * packet , int client_socket ) ; void sendMessage ( char * packet , int client_socket ) ; void destinationError ( int client_socket , char * invalid , char * send_to , int send_to_len , char * send_from , int send_from_len ) ; int compareClients ( char * send_to , int send_to_len ) ; void selectCall ( int server_socket ) ; void broadcastMessage ( char * packet , int client_socket ) ; void listAllHandles ( char * packet , int client_socket ) ; void sendHandle ( int sending_index ) ; void exitClient ( char * packet , int client_socket ) ; 
(2) FILE: ../../cclient.c LINES:24:6 TOKENS:0:58 DIST:1.7

void startUp ( int socket_fd ) ; void printPrompt ( void ) ; void initPacket ( char * client_handle , int socket_fd ) ; void promptUser ( int socket_fd ) ; void message ( char * input , int socket_fd , int send_len ) ; void broadcast ( char * input , int socket_fd , int send_len ) ; 
========== 17 ==========
(1) FILE: ../../cclient.c LINES:382:10 TOKENS:1576:1634 DIST:1.4

void handleList ( char * input , int socket_fd , int send_len ) { char * packet ; uint16_t packet_len = HEADER ; uint8_t flag = 10 ; int sent ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , PACKET_LEN ) ; memcpy ( packet + PACKET_LEN , & flag , BYTE ) ; sent = send ( socket_fd , packet , packet_len , 0 ) ; } 
(2) FILE: ../../server.c LINES:145:9 TOKENS:514:570 DIST:0.0

void exitClient ( char * packet , int client_socket ) { char * ret_packet ; uint16_t packet_len = HEADER ; uint8_t flag = 9 ; int sent ; ret_packet = malloc ( HEADER ) ; memcpy ( ret_packet , & packet_len , PACKET_LEN ) ; memcpy ( ret_packet + PACKET_LEN , & flag , BYTE ) ; int i , index = - 1 ; for ( i = 0 ; i < num_handles_fd ; i ++ ) { if ( handle_list_fds [ i ] == client_socket ) { index = i ; } } for ( i = index ; i < num_handles_fd - 1 ; i ++ ) { handle_list_fds [ i ] = handle_list_fds [ i + 1 ] ; } for ( i = index - 1 ; i < num_handles_name - 1 ; i ++ ) { handle_list [ i ] = handle_list [ i + 1 ] ; } num_handles_name -- ; num_handles_fd -- ; sent = send ( client_socket , ret_packet , packet_len , 0 ) ; } 
========== 18 ==========
(1) FILE: ../../cclient.c LINES:119:15 TOKENS:417:469 DIST:2.8

case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } 
(2) FILE: ../../server.c LINES:122:17 TOKENS:446:503 DIST:0.0

if ( ! list_flag ) { packet_len = * ( uint16_t * ) packet ; flag = * ( ( uint8_t * ) ( packet + PACKET_LEN ) ) ; switch ( flag ) { case 1 : initialPacket ( packet , client_socket ) ; break ; case 5 : sendMessage ( packet , client_socket ) ; break ; case 4 : broadcastMessage ( packet , client_socket ) ; break ; case 8 : exitClient ( packet , client_socket ) ; break ; case 10 : listAllHandles ( packet , client_socket ) ; break ; } } else { if ( sending_index == num_handles_name ) { sending_index = 0 ; list_flag = 0 ; } else { sendHandle ( sending_index ) ; } } 

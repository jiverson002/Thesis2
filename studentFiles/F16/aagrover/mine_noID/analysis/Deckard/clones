========== 1 ==========
(1) FILE: ../../cclient.c LINES:81:14 TOKENS:435:486 DIST:3.3

case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } 
(2) FILE: ../../server.c LINES:80:15 TOKENS:452:507 DIST:0.0

if ( ! list_flag ) { flag = * ( ( uint8_t * ) ( packet + 2 ) ) ; switch ( flag ) { case 1 : initialPacket ( packet , client_socket ) ; break ; case 5 : sendMessage ( packet , client_socket ) ; break ; case 4 : broadcastMessage ( packet , client_socket ) ; break ; case 8 : exitClient ( packet , client_socket ) ; break ; case 10 : listAllHandles ( packet , client_socket ) ; break ; } } else { if ( sending_index == num_handles_name ) { sending_index = 0 ; list_flag = 0 ; } else { sendHandle ( sending_index ) ; } } 
========== 2 ==========
(1) FILE: ../../cclient.c LINES:261:8 TOKENS:1643:1697 DIST:3.5

void handleList ( char * input , int socket_fd , int send_len ) { int sent ; char * packet ; uint8_t flag = 10 ; uint16_t packet_len = 3 ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; sent = mySend ( socket_fd , packet , packet_len , 0 ) ; } 
(2) FILE: ../../cclient.c LINES:271:9 TOKENS:1716:1773 DIST:0.0

void exitClient ( char * input , int socket_fd , int send_len ) { uint16_t packet_len ; char * packet ; uint8_t flag = 8 ; int sent ; packet_len = 3 ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; sent = mySend ( socket_fd , packet , packet_len , 0 ) ; } 
========== 3 ==========
(1) FILE: ../../cclient.c LINES:82:14 TOKENS:438:492 DIST:3.0

case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } 
(2) FILE: ../../server.c LINES:81:15 TOKENS:454:513 DIST:0.0

if ( ! list_flag ) { flag = * ( ( uint8_t * ) ( packet + 2 ) ) ; switch ( flag ) { case 1 : initialPacket ( packet , client_socket ) ; break ; case 5 : sendMessage ( packet , client_socket ) ; break ; case 4 : broadcastMessage ( packet , client_socket ) ; break ; case 8 : exitClient ( packet , client_socket ) ; break ; case 10 : listAllHandles ( packet , client_socket ) ; break ; } } else { if ( sending_index == num_handles_name ) { sending_index = 0 ; list_flag = 0 ; } else { sendHandle ( sending_index ) ; } } 
========== 4 ==========
(1) FILE: ../../cclient.c LINES:141:8 TOKENS:780:830 DIST:0.0

void startUp ( int socket_fd ) ; void printPrompt ( void ) ; void initPacket ( char * client_handle , int socket_fd ) ; void promptUser ( int socket_fd ) ; void message ( char * input , int socket_fd , int send_len ) ; void broadcast ( char * input , int socket_fd , int send_len ) ; void handleList ( char * input , int socket_fd , int send_len ) ; void exitClient ( char * input , int socket_fd , int send_len ) ; void transmitCheck ( int socket_fd ) ; void receivingMessage ( char * packet ) ; void errorMessage ( char * packet ) ; void receiveNumHandles ( char * packet , int socket_fd ) ; void printHandles ( char * packet , int socket_fd ) ; void terminateClient ( char * packet ) ; char * global_handle ; int max_socket = 3 ; int list_flag = 0 ; int actual_clients = 0 ; int count_clients = 0 ; unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int main ( int argc , char * argv ) { int socket_fd = 0 ; if ( argc != 4 ) { fprintf ( stderr , "Error - must include IP address, port number, and client handle name\n" ) ; exit ( 1 ) ; } socket_fd = tcpClientSetup ( argv [ 2 ] , argv [ 3 ] ) ; initPacket ( argv [ 1 ] , socket_fd ) ; startUp ( socket_fd ) ; close ( socket_fd ) ; return 0 ; } void startUp ( int socket_fd ) { ; int max_socket = socket_fd ; FD_ZERO ( & fdvar ) ; FD_SET ( socket_fd , & fdvar ) ; while ( 1 ) { if ( ! list_flag ) { printPrompt ( ) ; } while ( 1 ) { ; } if ( ! list_flag ) { if ( FD_ISSET ( 0 , & fdvar ) ) { promptUser ( socket_fd ) ; } } break ; } break ; } } } void transmitCheck ( int socket_fd ) { uint8_t flag ; char * packet = ( ( void * ) 0 ) ; int bytes_recv = - 1 ; struct timeval timeout ; timeout . tv_usec = 0 ; timeout . tv_sec = 1 ; packet = malloc ( 1024 ) ; bytes_recv = myRecv ( socket_fd , packet , 1024 , 0 ) ; if ( bytes_recv != - 1 ) { flag = * ( packet + 2 ) ; switch ( flag ) { case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } break ; default : break ; } } } void terminateClient ( char * packet ) { printf ( "\n" ) ; exit ( 0 ) ; } void printHandles ( char * packet , int socket_fd ) { uint16_t packet_len , gar_len = 3 ; uint8_t flag ; char * handle , * garbage = malloc ( 3 ) ; uint8_t handle_len ; flag = 0 ; packet_len = * ( uint16_t * ) packet ; handle_len = * ( ( uint8_t * ) ( packet + 3 ) ) ; handle = packet + 3 + 1 ; printf ( "\t%s\n" , handle ) ; memcpy ( garbage , & gar_len , 2 ) ; memcpy ( garbage + 2 , & flag , 1 ) ; mySend ( socket_fd , garbage , gar_len , 0 ) ; } void receiveNumHandles ( char * packet , int socket_fd ) { int flag = 0 ; uint32_t num_clients ; char * garbage = malloc ( 3 ) ; uint16_t gar_len = 3 ; list_flag = 1 ; num_clients = * ( ( uint32_t * ) ( packet + 3 ) ) ; actual_clients = num_clients ; printf ( "\nNumber of clients: %d\n" , num_clients ) ; memcpy ( garbage , & gar_len , 2 ) ; memcpy ( garbage + 2 , & flag , 1 ) ; mySend ( socket_fd , garbage , gar_len , 0 ) ; } void receivingMessage ( char * packet ) { char * sender , * text , * buf ; uint16_t packet_len ; uint8_t sender_len ; packet_len = * ( ( uint16_t * ) packet ) ; sender_len = * ( packet + 3 ) ; text = packet + 3 + 1 + sender_len ; sender = packet + 3 + 1 ; buf = malloc ( sender_len ) ; memcpy ( buf , sender , sender_len ) ; printf ( "\n%s: %s\n" , buf , text ) ; free ( buf ) ; } void initPacket ( char * client_handle , int socket_fd ) { ; if ( FD_ISSET ( socket_fd , & fdvar ) ) { global_handle = client_handle ; msg_len = myRecv ( socket_fd , packet , 1024 , 0 ) ; packet_len = * ( uint16_t * ) packet ; flag = * ( ( uint8_t * ) packet + 2 ) ; if ( flag == 3 ) { fprintf ( stderr , "Handle already in use: <%s>\n" , client_handle ) ; exit ( 1 ) ; } free ( packet ) ; } } 
(2) FILE: ../../cclient.c LINES:222:7 TOKENS:1234:1286 DIST:3.5

uint16_t total_len = 0 ; char * delim = " " , flag = 5 ; uint8_t handle_len , sending_len ; int sent , txt_len = 0 ; char * token = send_buf , * handle , * packet , * text ; token = strtok ( token , delim ) ; handle = strtok ( ( ( void * ) 0 ) , delim ) ; handle_len = strlen ( handle ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 4 - handle_len ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , delim ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; total_len = 3 + 1 + handle_len + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; 
========== 5 ==========
(1) FILE: ../../server.c LINES:3:4 TOKENS:18:71 DIST:0.0
void sendMessage(char *packet, int client_socket); /* void sendMessage(char *packet, int client_socket) */

void receiveData ( int client_socket ) ; void initialPacket ( char * packet , int client_socket ) ; void sendMessage ( char * packet , int client_socket ) ; void destinationError ( int client_socket , char * invalid , char * send_to , int send_to_len , char * send_from , int send_from_len ) ; int compareClients ( char * send_to , int send_to_len ) ; void selectCall ( int server_socket ) ; 
(2) FILE: ../../server.c LINES:1:4 TOKENS:0:53 DIST:0.0
void receiveData(int client_socket); /* void receiveData(int client_socket) */
void initialPacket(char *packet, int client_socket); /* void initialPacket(char *packet, int client_socket) */
void sendMessage(char *packet, int client_socket); /* void sendMessage(char *packet, int client_socket) */

void receiveData ( int client_socket ) ; void initialPacket ( char * packet , int client_socket ) ; void sendMessage ( char * packet , int client_socket ) ; void destinationError ( int client_socket , char * invalid , char * send_to , int send_to_len , char * send_from , int send_from_len ) ; 
(3) FILE: ../../cclient.c LINES:5:4 TOKENS:31:86 DIST:2.0

void startUp ( int socket_fd ) ; void printPrompt ( void ) ; void initPacket ( char * client_handle , int socket_fd ) ; void promptUser ( int socket_fd ) ; void message ( char * input , int socket_fd , int send_len ) ; void broadcast ( char * input , int socket_fd , int send_len ) ; void handleList ( char * input , int socket_fd , int send_len ) ; void exitClient ( char * input , int socket_fd , int send_len ) ; 
========== 6 ==========
(1) FILE: ../../cclient.c LINES:229:4 TOKENS:1287:1345 DIST:2.4

uint16_t total_len = 0 ; char * delim = " " , flag = 5 ; uint8_t handle_len , sending_len ; int sent , txt_len = 0 ; char * token = send_buf , * handle , * packet , * text ; token = strtok ( token , delim ) ; handle = strtok ( ( ( void * ) 0 ) , delim ) ; handle_len = strlen ( handle ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 4 - handle_len ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , delim ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; total_len = 3 + 1 + handle_len + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & handle_len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , handle , handle_len ) ; memcpy ( packet + 2 + 1 + 1 + handle_len , & sending_len , 1 ) ; 
(2) FILE: ../../server.c LINES:220:4 TOKENS:1416:1473 DIST:0.0

uint16_t packet_len ; uint8_t send_to_len , send_from_len , flag ; int fd_index = - 1 , fd_send , sent , text_len ; char * send_to , * send_from , * text , * invalid ; flag = 5 ; send_to_len = * ( packet + 3 ) ; send_from = packet + 3 + 1 + send_to_len + 1 ; send_to = packet + 3 + 1 ; send_from_len = * ( packet + 3 + 1 + send_to_len ) ; text = packet + 3 + 1 + send_to_len + 1 + send_from_len ; text_len = * ( uint16_t * ) packet - 3 - 1 - send_to_len - 1 - send_from_len ; if ( strlen ( text ) == 0 ) { text_len = 1 ; text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; } invalid = malloc ( send_to_len ) ; memcpy ( invalid , send_to , send_to_len ) ; fd_index = compareClients ( send_to , send_to_len ) ; packet_len = 3 + 1 + send_from_len + text_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & send_from_len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , send_from , send_from_len ) ; memcpy ( packet + 2 + 1 + 1 + send_from_len , text , text_len ) ; 
========== 7 ==========
(1) FILE: ../../cclient.c LINES:219:6 TOKENS:1189:1248 DIST:0.0

uint16_t total_len = 0 ; char * delim = " " , flag = 5 ; uint8_t handle_len , sending_len ; int sent , txt_len = 0 ; char * token = send_buf , * handle , * packet , * text ; token = strtok ( token , delim ) ; handle = strtok ( ( ( void * ) 0 ) , delim ) ; handle_len = strlen ( handle ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 4 - handle_len ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , delim ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } 
(2) FILE: ../../cclient.c LINES:244:6 TOKENS:1465:1522 DIST:3.6

uint8_t sending_len , flag = 4 ; int total_len , txt_len , sent ; char * token = input , * handle , * packet , * text ; handle = global_handle ; token = strtok ( token , " " ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 3 ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , " " ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } 
========== 8 ==========
(1) FILE: ../../cclient.c LINES:242:5 TOKENS:1449:1505 DIST:3.2

uint8_t sending_len , flag = 4 ; int total_len , txt_len , sent ; char * token = input , * handle , * packet , * text ; handle = global_handle ; token = strtok ( token , " " ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 3 ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , " " ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } 
(2) FILE: ../../cclient.c LINES:217:5 TOKENS:1175:1231 DIST:0.0

uint16_t total_len = 0 ; char * delim = " " , flag = 5 ; uint8_t handle_len , sending_len ; int sent , txt_len = 0 ; char * token = send_buf , * handle , * packet , * text ; token = strtok ( token , delim ) ; handle = strtok ( ( ( void * ) 0 ) , delim ) ; handle_len = strlen ( handle ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 4 - handle_len ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , delim ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } 
========== 9 ==========
(1) FILE: ../../cclient.c LINES:193:12 TOKENS:1039:1089 DIST:2.4

case 'm' : message ( send_buf , socket_fd , send_len ) ; break ; case 'b' : broadcast ( send_buf , socket_fd , send_len ) ; break ; case 'l' : handleList ( send_buf , socket_fd , send_len ) ; break ; case 'e' : exitClient ( send_buf , socket_fd , send_len ) ; break ; default : printf ( "Invalid command\n" ) ; 
(2) FILE: ../../server.c LINES:76:13 TOKENS:434:486 DIST:0.0

switch ( flag ) { case 1 : initialPacket ( packet , client_socket ) ; break ; case 5 : sendMessage ( packet , client_socket ) ; break ; case 4 : broadcastMessage ( packet , client_socket ) ; break ; case 8 : exitClient ( packet , client_socket ) ; break ; case 10 : listAllHandles ( packet , client_socket ) ; break ; } 
(3) FILE: ../../cclient.c LINES:81:14 TOKENS:435:486 DIST:2.8

case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } 
========== 10 ==========
(1) FILE: ../../cclient.c LINES:1:6 TOKENS:0:58 DIST:1.7
void startUp(int socket_fd); /* void startUp(int socket_fd) */
void printPrompt(void); /* void printPrompt(void) */
void initPacket(char *client_handle, int socket_fd); /* void initPacket(char *client_handle, int socket_fd) */
void promptUser(int socket_fd); /* void promptUser(int socket_fd) */
void message(char *input, int socket_fd, int send_len); /* void message(char *input, int socket_fd, int send_len) */

void startUp ( int socket_fd ) ; void printPrompt ( void ) ; void initPacket ( char * client_handle , int socket_fd ) ; void promptUser ( int socket_fd ) ; void message ( char * input , int socket_fd , int send_len ) ; void broadcast ( char * input , int socket_fd , int send_len ) ; 
(2) FILE: ../../server.c LINES:5:6 TOKENS:54:111 DIST:0.0
int compareClients(char *send_to, int send_to_len); /* int compareClients(char *send_to, int send_to_len) */

void receiveData ( int client_socket ) ; void initialPacket ( char * packet , int client_socket ) ; void sendMessage ( char * packet , int client_socket ) ; void destinationError ( int client_socket , char * invalid , char * send_to , int send_to_len , char * send_from , int send_from_len ) ; int compareClients ( char * send_to , int send_to_len ) ; void selectCall ( int server_socket ) ; void broadcastMessage ( char * packet , int client_socket ) ; void listAllHandles ( char * packet , int client_socket ) ; void sendHandle ( int sending_index ) ; void exitClient ( char * packet , int client_socket ) ; 
========== 11 ==========
(1) FILE: ../../cclient.c LINES:227:5 TOKENS:1270:1327 DIST:3.5

uint16_t total_len = 0 ; char * delim = " " , flag = 5 ; uint8_t handle_len , sending_len ; int sent , txt_len = 0 ; char * token = send_buf , * handle , * packet , * text ; token = strtok ( token , delim ) ; handle = strtok ( ( ( void * ) 0 ) , delim ) ; handle_len = strlen ( handle ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 4 - handle_len ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , delim ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; total_len = 3 + 1 + handle_len + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & handle_len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , handle , handle_len ) ; 
(2) FILE: ../../server.c LINES:218:5 TOKENS:1399:1456 DIST:3.5

uint16_t packet_len ; uint8_t send_to_len , send_from_len , flag ; int fd_index = - 1 , fd_send , sent , text_len ; char * send_to , * send_from , * text , * invalid ; flag = 5 ; send_to_len = * ( packet + 3 ) ; send_from = packet + 3 + 1 + send_to_len + 1 ; send_to = packet + 3 + 1 ; send_from_len = * ( packet + 3 + 1 + send_to_len ) ; text = packet + 3 + 1 + send_to_len + 1 + send_from_len ; text_len = * ( uint16_t * ) packet - 3 - 1 - send_to_len - 1 - send_from_len ; if ( strlen ( text ) == 0 ) { text_len = 1 ; text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; } invalid = malloc ( send_to_len ) ; memcpy ( invalid , send_to , send_to_len ) ; fd_index = compareClients ( send_to , send_to_len ) ; packet_len = 3 + 1 + send_from_len + text_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & send_from_len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , send_from , send_from_len ) ; 
(3) FILE: ../../server.c LINES:265:5 TOKENS:1787:1848 DIST:0.0

int i , cur_fd , sent ; char * packet_new , * send_from , * text ; uint8_t send_from_len , flag = 5 ; uint16_t packet_len , text_len , packet_new_len ; packet_len = * ( ( uint16_t * ) packet ) ; send_from_len = * ( ( uint8_t * ) ( packet + 3 ) ) ; text_len = packet_len - 3 - 1 - send_from_len ; text = packet + 3 + 1 + send_from_len ; send_from = packet + 3 + 1 ; if ( strlen ( text ) == 0 ) { text_len = 1 ; text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; } packet_new_len = 3 + 1 + send_from_len + text_len ; packet_new = malloc ( packet_new_len ) ; memcpy ( packet_new , & packet_new_len , 2 ) ; memcpy ( packet_new + 2 , & flag , 1 ) ; memcpy ( packet_new + 3 , & send_from_len , 1 ) ; memcpy ( packet_new + 3 + 1 , send_from , send_from_len ) ; memcpy ( packet_new + 3 + 1 + send_from_len , text , text_len ) ; 
(4) FILE: ../../server.c LINES:283:5 TOKENS:1949:2006 DIST:3.5

int sent ; char * packet ; uint16_t packet_len ; uint8_t flag = 7 , len = send_to_len ; packet_len = 3 + 1 + send_to_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , send_to , len ) ; 
========== 12 ==========
(1) FILE: ../../cclient.c LINES:252:5 TOKENS:1537:1589 DIST:2.8

uint8_t sending_len , flag = 4 ; int total_len , txt_len , sent ; char * token = input , * handle , * packet , * text ; handle = global_handle ; token = strtok ( token , " " ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 3 ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , " " ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; strcat ( text , "\0" ) ; total_len = 3 + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & sending_len , 1 ) ; 
(2) FILE: ../../server.c LINES:285:4 TOKENS:1966:2019 DIST:0.0

int sent ; char * packet ; uint16_t packet_len ; uint8_t flag = 7 , len = send_to_len ; packet_len = 3 + 1 + send_to_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , send_to , len ) ; sent = mySend ( client_socket , packet , packet_len , 0 ) ; 
========== 13 ==========
(1) FILE: ../../cclient.c LINES:227:5 TOKENS:1270:1327 DIST:3.6

uint16_t total_len = 0 ; char * delim = " " , flag = 5 ; uint8_t handle_len , sending_len ; int sent , txt_len = 0 ; char * token = send_buf , * handle , * packet , * text ; token = strtok ( token , delim ) ; handle = strtok ( ( ( void * ) 0 ) , delim ) ; handle_len = strlen ( handle ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 4 - handle_len ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , delim ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; total_len = 3 + 1 + handle_len + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & handle_len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , handle , handle_len ) ; 
(2) FILE: ../../server.c LINES:218:5 TOKENS:1399:1456 DIST:3.6

uint16_t packet_len ; uint8_t send_to_len , send_from_len , flag ; int fd_index = - 1 , fd_send , sent , text_len ; char * send_to , * send_from , * text , * invalid ; flag = 5 ; send_to_len = * ( packet + 3 ) ; send_from = packet + 3 + 1 + send_to_len + 1 ; send_to = packet + 3 + 1 ; send_from_len = * ( packet + 3 + 1 + send_to_len ) ; text = packet + 3 + 1 + send_to_len + 1 + send_from_len ; text_len = * ( uint16_t * ) packet - 3 - 1 - send_to_len - 1 - send_from_len ; if ( strlen ( text ) == 0 ) { text_len = 1 ; text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; } invalid = malloc ( send_to_len ) ; memcpy ( invalid , send_to , send_to_len ) ; fd_index = compareClients ( send_to , send_to_len ) ; packet_len = 3 + 1 + send_from_len + text_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & send_from_len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , send_from , send_from_len ) ; 
(3) FILE: ../../server.c LINES:151:5 TOKENS:866:925 DIST:0.0

uint8_t handle_len , flag = 12 ; int sent ; uint16_t packet_len ; char * ret_packet , * handle ; sending_index ++ ; handle = handle_list [ handle_index ] ; handle_len = strlen ( handle_list [ handle_index ] ) ; packet_len = 3 + 1 + handle_len ; ret_packet = malloc ( packet_len ) ; memcpy ( ret_packet , & packet_len , 2 ) ; memcpy ( ret_packet + 2 , & flag , 1 ) ; memcpy ( ret_packet + 3 , & handle_len , 1 ) ; memcpy ( ret_packet + 3 + 1 , handle , handle_len ) ; sent = mySend ( list_client , ret_packet , packet_len , 0 ) ; 
(4) FILE: ../../server.c LINES:283:5 TOKENS:1949:2006 DIST:3.6

int sent ; char * packet ; uint16_t packet_len ; uint8_t flag = 7 , len = send_to_len ; packet_len = 3 + 1 + send_to_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , send_to , len ) ; 
========== 14 ==========
(1) FILE: ../../cclient.c LINES:272:9 TOKENS:1726:1786 DIST:3.6

uint16_t packet_len ; char * packet ; uint8_t flag = 8 ; int sent ; packet_len = 3 ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; sent = mySend ( socket_fd , packet , packet_len , 0 ) ; 
(2) FILE: ../../cclient.c LINES:261:9 TOKENS:1649:1710 DIST:1.7

void handleList ( char * input , int socket_fd , int send_len ) { int sent ; char * packet ; uint8_t flag = 10 ; uint16_t packet_len = 3 ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; sent = mySend ( socket_fd , packet , packet_len , 0 ) ; } 
========== 15 ==========
(1) FILE: ../../server.c LINES:3:4 TOKENS:18:71 DIST:0.0
void sendMessage(char *packet, int client_socket); /* void sendMessage(char *packet, int client_socket) */

void receiveData ( int client_socket ) ; void initialPacket ( char * packet , int client_socket ) ; void sendMessage ( char * packet , int client_socket ) ; void destinationError ( int client_socket , char * invalid , char * send_to , int send_to_len , char * send_from , int send_from_len ) ; int compareClients ( char * send_to , int send_to_len ) ; void selectCall ( int server_socket ) ; 
(2) FILE: ../../server.c LINES:1:4 TOKENS:0:53 DIST:0.0
void receiveData(int client_socket); /* void receiveData(int client_socket) */
void initialPacket(char *packet, int client_socket); /* void initialPacket(char *packet, int client_socket) */
void sendMessage(char *packet, int client_socket); /* void sendMessage(char *packet, int client_socket) */

void receiveData ( int client_socket ) ; void initialPacket ( char * packet , int client_socket ) ; void sendMessage ( char * packet , int client_socket ) ; void destinationError ( int client_socket , char * invalid , char * send_to , int send_to_len , char * send_from , int send_from_len ) ; 
========== 16 ==========
(1) FILE: ../../server.c LINES:83:15 TOKENS:465:518 DIST:3.2

if ( ! list_flag ) { flag = * ( ( uint8_t * ) ( packet + 2 ) ) ; switch ( flag ) { case 1 : initialPacket ( packet , client_socket ) ; break ; case 5 : sendMessage ( packet , client_socket ) ; break ; case 4 : broadcastMessage ( packet , client_socket ) ; break ; case 8 : exitClient ( packet , client_socket ) ; break ; case 10 : listAllHandles ( packet , client_socket ) ; break ; } } else { if ( sending_index == num_handles_name ) { sending_index = 0 ; list_flag = 0 ; } else { sendHandle ( sending_index ) ; } } 
(2) FILE: ../../cclient.c LINES:85:14 TOKENS:449:499 DIST:0.0

case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } break ; 
========== 17 ==========
(1) FILE: ../../server.c LINES:149:6 TOKENS:851:912 DIST:0.0

uint8_t handle_len , flag = 12 ; int sent ; uint16_t packet_len ; char * ret_packet , * handle ; sending_index ++ ; handle = handle_list [ handle_index ] ; handle_len = strlen ( handle_list [ handle_index ] ) ; packet_len = 3 + 1 + handle_len ; ret_packet = malloc ( packet_len ) ; memcpy ( ret_packet , & packet_len , 2 ) ; memcpy ( ret_packet + 2 , & flag , 1 ) ; memcpy ( ret_packet + 3 , & handle_len , 1 ) ; memcpy ( ret_packet + 3 + 1 , handle , handle_len ) ; 
(2) FILE: ../../server.c LINES:216:6 TOKENS:1380:1441 DIST:3.5

uint16_t packet_len ; uint8_t send_to_len , send_from_len , flag ; int fd_index = - 1 , fd_send , sent , text_len ; char * send_to , * send_from , * text , * invalid ; flag = 5 ; send_to_len = * ( packet + 3 ) ; send_from = packet + 3 + 1 + send_to_len + 1 ; send_to = packet + 3 + 1 ; send_from_len = * ( packet + 3 + 1 + send_to_len ) ; text = packet + 3 + 1 + send_to_len + 1 + send_from_len ; text_len = * ( uint16_t * ) packet - 3 - 1 - send_to_len - 1 - send_from_len ; if ( strlen ( text ) == 0 ) { text_len = 1 ; text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; } invalid = malloc ( send_to_len ) ; memcpy ( invalid , send_to , send_to_len ) ; fd_index = compareClients ( send_to , send_to_len ) ; packet_len = 3 + 1 + send_from_len + text_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & send_from_len , 1 ) ; 
========== 18 ==========
(1) FILE: ../../server.c LINES:83:15 TOKENS:463:518 DIST:0.0

if ( ! list_flag ) { flag = * ( ( uint8_t * ) ( packet + 2 ) ) ; switch ( flag ) { case 1 : initialPacket ( packet , client_socket ) ; break ; case 5 : sendMessage ( packet , client_socket ) ; break ; case 4 : broadcastMessage ( packet , client_socket ) ; break ; case 8 : exitClient ( packet , client_socket ) ; break ; case 10 : listAllHandles ( packet , client_socket ) ; break ; } } else { if ( sending_index == num_handles_name ) { sending_index = 0 ; list_flag = 0 ; } else { sendHandle ( sending_index ) ; } } 
(2) FILE: ../../cclient.c LINES:85:13 TOKENS:447:497 DIST:2.8

case 5 : receivingMessage ( packet ) ; break ; case 7 : errorMessage ( packet ) ; break ; case 9 : terminateClient ( packet ) ; break ; case 11 : receiveNumHandles ( packet , socket_fd ) ; break ; case 12 : count_clients ++ ; printHandles ( packet , socket_fd ) ; if ( count_clients == actual_clients ) { list_flag = 0 ; count_clients = 0 ; } 
========== 19 ==========
(1) FILE: ../../cclient.c LINES:166:6 TOKENS:852:906 DIST:0.0

global_handle = client_handle ; msg_len = myRecv ( socket_fd , packet , 1024 , 0 ) ; packet_len = * ( uint16_t * ) packet ; flag = * ( ( uint8_t * ) packet + 2 ) ; if ( flag == 3 ) { fprintf ( stderr , "Handle already in use: <%s>\n" , client_handle ) ; exit ( 1 ) ; } 
(2) FILE: ../../cclient.c LINES:148:23 TOKENS:837:895 DIST:3.5

void initPacket ( char * client_handle , int socket_fd ) { ; if ( FD_ISSET ( socket_fd , & fdvar ) ) { global_handle = client_handle ; msg_len = myRecv ( socket_fd , packet , 1024 , 0 ) ; packet_len = * ( uint16_t * ) packet ; flag = * ( ( uint8_t * ) packet + 2 ) ; if ( flag == 3 ) { fprintf ( stderr , "Handle already in use: <%s>\n" , client_handle ) ; exit ( 1 ) ; } free ( packet ) ; } } 
========== 20 ==========
(1) FILE: ../../cclient.c LINES:261:10 TOKENS:1638:1711 DIST:0.0

void handleList ( char * input , int socket_fd , int send_len ) { int sent ; char * packet ; uint8_t flag = 10 ; uint16_t packet_len = 3 ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; sent = mySend ( socket_fd , packet , packet_len , 0 ) ; } 
(2) FILE: ../../cclient.c LINES:271:11 TOKENS:1712:1787 DIST:3.3

void exitClient ( char * input , int socket_fd , int send_len ) { uint16_t packet_len ; char * packet ; uint8_t flag = 8 ; int sent ; packet_len = 3 ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; sent = mySend ( socket_fd , packet , packet_len , 0 ) ; } 
========== 21 ==========
(1) FILE: ../../cclient.c LINES:246:5 TOKENS:1480:1529 DIST:1.4

uint8_t sending_len , flag = 4 ; int total_len , txt_len , sent ; char * token = input , * handle , * packet , * text ; handle = global_handle ; token = strtok ( token , " " ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 3 ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , " " ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; 
(2) FILE: ../../cclient.c LINES:221:5 TOKENS:1206:1255 DIST:0.0

uint16_t total_len = 0 ; char * delim = " " , flag = 5 ; uint8_t handle_len , sending_len ; int sent , txt_len = 0 ; char * token = send_buf , * handle , * packet , * text ; token = strtok ( token , delim ) ; handle = strtok ( ( ( void * ) 0 ) , delim ) ; handle_len = strlen ( handle ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 4 - handle_len ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , delim ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; 
========== 22 ==========
(1) FILE: ../../cclient.c LINES:222:7 TOKENS:1234:1286 DIST:2.8

uint16_t total_len = 0 ; char * delim = " " , flag = 5 ; uint8_t handle_len , sending_len ; int sent , txt_len = 0 ; char * token = send_buf , * handle , * packet , * text ; token = strtok ( token , delim ) ; handle = strtok ( ( ( void * ) 0 ) , delim ) ; handle_len = strlen ( handle ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 4 - handle_len ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , delim ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; total_len = 3 + 1 + handle_len + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; 
(2) FILE: ../../cclient.c LINES:250:6 TOKENS:1523:1575 DIST:0.0

uint8_t sending_len , flag = 4 ; int total_len , txt_len , sent ; char * token = input , * handle , * packet , * text ; handle = global_handle ; token = strtok ( token , " " ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 3 ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , " " ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; strcat ( text , "\0" ) ; total_len = 3 + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; 
========== 23 ==========
(1) FILE: ../../server.c LINES:263:5 TOKENS:1770:1820 DIST:0.0

int i , cur_fd , sent ; char * packet_new , * send_from , * text ; uint8_t send_from_len , flag = 5 ; uint16_t packet_len , text_len , packet_new_len ; packet_len = * ( ( uint16_t * ) packet ) ; send_from_len = * ( ( uint8_t * ) ( packet + 3 ) ) ; text_len = packet_len - 3 - 1 - send_from_len ; text = packet + 3 + 1 + send_from_len ; send_from = packet + 3 + 1 ; if ( strlen ( text ) == 0 ) { text_len = 1 ; text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; } packet_new_len = 3 + 1 + send_from_len + text_len ; packet_new = malloc ( packet_new_len ) ; memcpy ( packet_new , & packet_new_len , 2 ) ; memcpy ( packet_new + 2 , & flag , 1 ) ; memcpy ( packet_new + 3 , & send_from_len , 1 ) ; 
(2) FILE: ../../cclient.c LINES:252:5 TOKENS:1537:1589 DIST:3.0

uint8_t sending_len , flag = 4 ; int total_len , txt_len , sent ; char * token = input , * handle , * packet , * text ; handle = global_handle ; token = strtok ( token , " " ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 3 ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , " " ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; strcat ( text , "\0" ) ; total_len = 3 + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & sending_len , 1 ) ; 
(3) FILE: ../../cclient.c LINES:225:5 TOKENS:1249:1298 DIST:2.8

uint16_t total_len = 0 ; char * delim = " " , flag = 5 ; uint8_t handle_len , sending_len ; int sent , txt_len = 0 ; char * token = send_buf , * handle , * packet , * text ; token = strtok ( token , delim ) ; handle = strtok ( ( ( void * ) 0 ) , delim ) ; handle_len = strlen ( handle ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 4 - handle_len ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , delim ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; total_len = 3 + 1 + handle_len + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; 
========== 24 ==========
(1) FILE: ../../cclient.c LINES:227:5 TOKENS:1270:1327 DIST:3.3

uint16_t total_len = 0 ; char * delim = " " , flag = 5 ; uint8_t handle_len , sending_len ; int sent , txt_len = 0 ; char * token = send_buf , * handle , * packet , * text ; token = strtok ( token , delim ) ; handle = strtok ( ( ( void * ) 0 ) , delim ) ; handle_len = strlen ( handle ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 4 - handle_len ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , delim ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; total_len = 3 + 1 + handle_len + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & handle_len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , handle , handle_len ) ; 
(2) FILE: ../../server.c LINES:218:5 TOKENS:1399:1456 DIST:3.3

uint16_t packet_len ; uint8_t send_to_len , send_from_len , flag ; int fd_index = - 1 , fd_send , sent , text_len ; char * send_to , * send_from , * text , * invalid ; flag = 5 ; send_to_len = * ( packet + 3 ) ; send_from = packet + 3 + 1 + send_to_len + 1 ; send_to = packet + 3 + 1 ; send_from_len = * ( packet + 3 + 1 + send_to_len ) ; text = packet + 3 + 1 + send_to_len + 1 + send_from_len ; text_len = * ( uint16_t * ) packet - 3 - 1 - send_to_len - 1 - send_from_len ; if ( strlen ( text ) == 0 ) { text_len = 1 ; text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; } invalid = malloc ( send_to_len ) ; memcpy ( invalid , send_to , send_to_len ) ; fd_index = compareClients ( send_to , send_to_len ) ; packet_len = 3 + 1 + send_from_len + text_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & send_from_len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , send_from , send_from_len ) ; 
(3) FILE: ../../cclient.c LINES:252:5 TOKENS:1537:1589 DIST:0.0

uint8_t sending_len , flag = 4 ; int total_len , txt_len , sent ; char * token = input , * handle , * packet , * text ; handle = global_handle ; token = strtok ( token , " " ) ; sending_len = strlen ( global_handle ) ; txt_len = send_len - 3 ; text = malloc ( txt_len + 1 ) ; while ( ( token = strtok ( ( ( void * ) 0 ) , " " ) ) != ( ( void * ) 0 ) ) { strcat ( text , token ) ; strcat ( text , " " ) ; } strcat ( text , "\0" ) ; strcat ( text , "\0" ) ; total_len = 3 + 1 + sending_len + txt_len ; packet = malloc ( total_len ) ; memcpy ( packet , & total_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & sending_len , 1 ) ; 
(4) FILE: ../../server.c LINES:283:5 TOKENS:1949:2006 DIST:3.3

int sent ; char * packet ; uint16_t packet_len ; uint8_t flag = 7 , len = send_to_len ; packet_len = 3 + 1 + send_to_len ; packet = malloc ( packet_len ) ; memcpy ( packet , & packet_len , 2 ) ; memcpy ( packet + 2 , & flag , 1 ) ; memcpy ( packet + 2 + 1 , & len , 1 ) ; memcpy ( packet + 2 + 1 + 1 , send_to , len ) ; 
========== 25 ==========
(1) FILE: ../../server.c LINES:131:7 TOKENS:730:784 DIST:0.0

int sent ; char * ret_packet ; uint16_t packet_len ; uint8_t flag = 11 ; list_flag = 1 ; list_client = client_socket ; packet_len = 3 + 4 ; ret_packet = malloc ( packet_len ) ; memcpy ( ret_packet , & packet_len , 2 ) ; memcpy ( ret_packet + 2 , & flag , 1 ) ; memcpy ( ret_packet + 3 , & num_handles_name , 4 ) ; 
(2) FILE: ../../server.c LINES:260:7 TOKENS:1753:1808 DIST:3.5

int i , cur_fd , sent ; char * packet_new , * send_from , * text ; uint8_t send_from_len , flag = 5 ; uint16_t packet_len , text_len , packet_new_len ; packet_len = * ( ( uint16_t * ) packet ) ; send_from_len = * ( ( uint8_t * ) ( packet + 3 ) ) ; text_len = packet_len - 3 - 1 - send_from_len ; text = packet + 3 + 1 + send_from_len ; send_from = packet + 3 + 1 ; if ( strlen ( text ) == 0 ) { text_len = 1 ; text = malloc ( 1 ) ; memcpy ( text , " " , 1 ) ; } packet_new_len = 3 + 1 + send_from_len + text_len ; packet_new = malloc ( packet_new_len ) ; memcpy ( packet_new , & packet_new_len , 2 ) ; memcpy ( packet_new + 2 , & flag , 1 ) ; 

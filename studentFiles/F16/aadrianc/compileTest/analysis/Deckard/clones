========== 1 ==========
(1) FILE: ../../cclient.c LINES:203:9 TOKENS:1239:1305 DIST:3.5

if ( strcmp ( d , "%E" ) == 0 || strcmp ( d , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; f = 1 ; } if ( strcmp ( d , "%B" ) == 0 || strcmp ( d , "%b" ) == 0 ) { f = 1 ; e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( e , global_c ) ; } } if ( strcmp ( d , "%M" ) == 0 || strcmp ( d , "%m" ) == 0 ) { f = 1 ; a = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( a == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( e , a , global_c ) ; } } } if ( strcmp ( d , "%L" ) == 0 || strcmp ( d , "%l" ) == 0 ) { sendPacketFlag ( 10 , global_c ) ; f = 1 ; } 
(2) FILE: ../../cclient.c LINES:189:9 TOKENS:1129:1196 DIST:0.0

if ( strcmp ( d , "%E" ) == 0 || strcmp ( d , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; f = 1 ; } if ( strcmp ( d , "%B" ) == 0 || strcmp ( d , "%b" ) == 0 ) { f = 1 ; e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( e , global_c ) ; } } if ( strcmp ( d , "%M" ) == 0 || strcmp ( d , "%m" ) == 0 ) { f = 1 ; a = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( a == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( e , a , global_c ) ; } } } 
========== 2 ==========
(1) FILE: ../../cclient.c LINES:19:10 TOKENS:103:161 DIST:0.0

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } 
(2) FILE: ../../server.c LINES:190:10 TOKENS:1216:1277 DIST:2.6

int global_b ; int * global_d = ( ( void * ) 0 ) ; char * * global_a = ( ( void * ) 0 ) ; int global_c = 0 ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { global_b = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int a ) { global_c ++ ; global_d = realloc ( global_d , sizeof ( int ) * global_c ) ; global_d [ global_c - 1 ] = a ; global_a = realloc ( global_a , sizeof ( char * ) * global_c ) ; global_a [ global_c - 1 ] = ( ( void * ) 0 ) ; } void setClientName ( void * a , int b ) { int c = 0 ; char * d = ( ( void * ) 0 ) ; getFirstHandle ( a , & d ) ; for ( c = 0 ; c < global_c ; c ++ ) { if ( global_d [ c ] == b ) { if ( getFDForName ( d ) != - 1 ) { free ( d ) ; sendPacketFlag ( 3 , global_d [ c ] ) ; removeClient ( b ) ; } else { global_a [ c ] = d ; sendPacketFlag ( 2 , global_d [ c ] ) ; printf ( "Welcome: %s\n" , global_a [ c ] ) ; } return ; } } } int getFDForName ( char * a ) { int b = 0 ; for ( b = 0 ; b < global_c ; b ++ ) { if ( global_a [ b ] != ( ( void * ) 0 ) && strcmp ( a , global_a [ b ] ) == 0 ) { return global_d [ b ] ; } } return - 1 ; } void removeClient ( int a ) { int b = 0 ; int c = 0 ; int * d ; char * * e ; global_c -- ; d = ( int * ) malloc ( sizeof ( int ) * global_c ) ; e = ( char * * ) malloc ( sizeof ( char * ) * global_c ) ; for ( c = 0 ; c <= global_c ; c ++ ) { if ( global_d [ c ] != a ) { if ( ! b ) { d [ c ] = global_d [ c ] ; e [ c ] = global_a [ c ] ; } else { d [ c - 1 ] = global_d [ c ] ; e [ c - 1 ] = global_a [ c ] ; } } else { b = 1 ; if ( global_a [ c ] != ( ( void * ) 0 ) ) { printf ( "Bye %s\n" , global_a [ c ] ) ; } free ( global_a [ c ] ) ; close ( global_d [ c ] ) ; } } free ( global_a ) ; free ( global_d ) ; global_a = e ; global_d = d ; } int getFDForInput ( ) { ; int c = global_b + 1 ; FD_ZERO ( & b ) ; FD_SET ( global_b , & b ) ; if ( global_c > 0 ) { c = global_d [ global_c - 1 ] + 1 ; } for ( a = 0 ; a < global_c ; a ++ ) { FD_SET ( global_d [ a ] , & b ) ; } if ( mySelect ( c , ( ) & b , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_b , & b ) ) { return global_b ; } else { for ( a = 0 ; a < global_c ; a ++ ) { if ( FD_ISSET ( global_d [ a ] , & b ) ) { return global_d [ a ] ; } } } return - 1 ; } void acceptClient ( ) { int a = tcpAccept ( global_b ) ; addClient ( a ) ; } void process ( ) { int a ; while ( 1 ) { a = getFDForInput ( ) ; if ( a == global_b ) { acceptClient ( ) ; } else { processPacket ( a ) ; } } } void processPacket ( int a ) { uint8_t * b = malloc ( 1000 ) ; int c = 0 ; if ( ( c = myRecv ( a , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { removeClient ( a ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( b , a ) ; break ; case 8 : sendPacketFlag ( 9 , a ) ; removeClient ( a ) ; break ; case 4 : broadCast ( a , b ) ; break ; case 5 : forwardMessage ( a , b ) ; break ; case 10 : sendPacketHandleAck ( 11 , a ) ; sendHandles ( a ) ; break ; default : break ; } free ( b ) ; } void broadCast ( int a , void * b ) { int c = 0 ; for ( c = 0 ; c < global_c ; c ++ ) { if ( global_d [ c ] != a ) { if ( sendPacket ( b , global_d [ c ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } } void forwardMessage ( int a , void * b ) { char * c = ( ( void * ) 0 ) ; int d = 0 ; int e = 0 ; getDestHandle ( b , & c ) ; for ( e = 0 ; e < global_c ; e ++ ) { if ( strcmp ( c , global_a [ e ] ) == 0 ) { d = 1 ; if ( sendPacket ( b , global_d [ e ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } break ; } } if ( d == 0 ) { sendPacketFlag ( 7 , a ) ; } free ( c ) ; } void sendPacketHandleAck ( uint8_t a , int b ) { ; headerSetLen ( ( ) & c , ( uint16_t ) ( sizeof ( packetHandleAck ) - sizeof ( header ) ) ) ; packetHandleAckSetNum ( & c , global_c ) ; c . head . flag = a ; if ( mySend ( b , & c , sizeof ( packetHandleAck ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } void sendPacketHandle ( int a , char * b ) { int c = strlen ( b ) ; void * d = makePacketHandle ( 12 , c , b ) ; if ( sendPacket ( d , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( d ) ; } 
========== 3 ==========
(1) FILE: ../../server.c LINES:119:11 TOKENS:777:837 DIST:0.0

int global_b ; int * global_d = ( ( void * ) 0 ) ; char * * global_a = ( ( void * ) 0 ) ; int global_c = 0 ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { global_b = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int a ) { global_c ++ ; global_d = realloc ( global_d , sizeof ( int ) * global_c ) ; global_d [ global_c - 1 ] = a ; global_a = realloc ( global_a , sizeof ( char * ) * global_c ) ; global_a [ global_c - 1 ] = ( ( void * ) 0 ) ; } void setClientName ( void * a , int b ) { int c = 0 ; char * d = ( ( void * ) 0 ) ; getFirstHandle ( a , & d ) ; for ( c = 0 ; c < global_c ; c ++ ) { if ( global_d [ c ] == b ) { if ( getFDForName ( d ) != - 1 ) { free ( d ) ; sendPacketFlag ( 3 , global_d [ c ] ) ; removeClient ( b ) ; } else { global_a [ c ] = d ; sendPacketFlag ( 2 , global_d [ c ] ) ; printf ( "Welcome: %s\n" , global_a [ c ] ) ; } return ; } } } int getFDForName ( char * a ) { int b = 0 ; for ( b = 0 ; b < global_c ; b ++ ) { if ( global_a [ b ] != ( ( void * ) 0 ) && strcmp ( a , global_a [ b ] ) == 0 ) { return global_d [ b ] ; } } return - 1 ; } void removeClient ( int a ) { int b = 0 ; int c = 0 ; int * d ; char * * e ; global_c -- ; d = ( int * ) malloc ( sizeof ( int ) * global_c ) ; e = ( char * * ) malloc ( sizeof ( char * ) * global_c ) ; for ( c = 0 ; c <= global_c ; c ++ ) { if ( global_d [ c ] != a ) { if ( ! b ) { d [ c ] = global_d [ c ] ; e [ c ] = global_a [ c ] ; } else { d [ c - 1 ] = global_d [ c ] ; e [ c - 1 ] = global_a [ c ] ; } } else { b = 1 ; if ( global_a [ c ] != ( ( void * ) 0 ) ) { printf ( "Bye %s\n" , global_a [ c ] ) ; } free ( global_a [ c ] ) ; close ( global_d [ c ] ) ; } } free ( global_a ) ; free ( global_d ) ; global_a = e ; global_d = d ; } int getFDForInput ( ) { ; int c = global_b + 1 ; FD_ZERO ( & b ) ; FD_SET ( global_b , & b ) ; if ( global_c > 0 ) { c = global_d [ global_c - 1 ] + 1 ; } for ( a = 0 ; a < global_c ; a ++ ) { FD_SET ( global_d [ a ] , & b ) ; } if ( mySelect ( c , ( ) & b , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_b , & b ) ) { return global_b ; } else { for ( a = 0 ; a < global_c ; a ++ ) { if ( FD_ISSET ( global_d [ a ] , & b ) ) { return global_d [ a ] ; } } } return - 1 ; } void acceptClient ( ) { int a = tcpAccept ( global_b ) ; addClient ( a ) ; } void process ( ) { int a ; while ( 1 ) { a = getFDForInput ( ) ; if ( a == global_b ) { acceptClient ( ) ; } else { processPacket ( a ) ; } } } void processPacket ( int a ) { uint8_t * b = malloc ( 1000 ) ; int c = 0 ; if ( ( c = myRecv ( a , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { removeClient ( a ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( b , a ) ; break ; case 8 : sendPacketFlag ( 9 , a ) ; removeClient ( a ) ; break ; case 4 : broadCast ( a , b ) ; break ; case 5 : forwardMessage ( a , b ) ; break ; case 10 : sendPacketHandleAck ( 11 , a ) ; sendHandles ( a ) ; break ; default : break ; } free ( b ) ; } 
(2) FILE: ../../cclient.c LINES:123:12 TOKENS:843:904 DIST:3.2

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } void sendPacketBroadCast ( char * a , int b ) { int c = 0 ; void * d ; char * e ; int f = strlen ( global_b ) ; int g = 1000 - f - sizeof ( header ) - 1 ; int h = ( strlen ( a ) + 1 ) / g ; int i = ( ( strlen ( a ) + 1 ) % g ) + h ; e = malloc ( g ) ; while ( h > 0 ) { h -- ; memcpy ( e , a + c , g - 1 ) ; e [ g - 1 ] = 0 ; c += g - 1 ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; } free ( e ) ; e = malloc ( i ) ; memcpy ( e , a + c , i ) ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( e ) ; } void sendPacketMssg ( char * a , char * b , int c ) { void * d ; int e = 0 ; char * f ; int g = strlen ( global_b ) ; int h = strlen ( b ) ; int i = 1000 - ( g + 1 ) - ( h + 1 ) - sizeof ( header ) ; int j = ( strlen ( a ) + 1 ) / i ; int k = ( ( strlen ( a ) + 1 ) % i ) + j ; f = malloc ( i ) ; while ( j > 0 ) { memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; } free ( f ) ; f = malloc ( k ) ; memcpy ( f , a + e , k ) ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; free ( f ) ; } int getFDForInput ( ) { ; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_c , & a ) ) { return global_c ; } if ( global_a && FD_ISSET ( fileno ( stdin ) , & a ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int a ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; a = getFDForInput ( ) ; if ( a == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { int a = 0 ; uint8_t * b = malloc ( 1000 ) ; uint8_t * c = packet ; if ( ( a = myRecv ( global_c , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( a == 0 ) { printf ( "Server terminated\n" ) ; close ( global_c ) ; exit ( 1 ) ; } while ( a > 0 ) { ; } free ( c ) ; } 
========== 4 ==========
(1) FILE: ../../cclient.c LINES:85:6 TOKENS:592:648 DIST:2.8

void * d ; int e = 0 ; char * f ; int g = strlen ( global_b ) ; int h = strlen ( b ) ; int i = 1000 - ( g + 1 ) - ( h + 1 ) - sizeof ( header ) ; int j = ( strlen ( a ) + 1 ) / i ; int k = ( ( strlen ( a ) + 1 ) % i ) + j ; f = malloc ( i ) ; while ( j > 0 ) { memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; } free ( f ) ; f = malloc ( k ) ; memcpy ( f , a + e , k ) ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } 
(2) FILE: ../../cclient.c LINES:50:8 TOKENS:327:385 DIST:0.0

int c = 0 ; void * d ; char * e ; int f = strlen ( global_b ) ; int g = 1000 - f - sizeof ( header ) - 1 ; int h = ( strlen ( a ) + 1 ) / g ; int i = ( ( strlen ( a ) + 1 ) % g ) + h ; e = malloc ( g ) ; while ( h > 0 ) { h -- ; memcpy ( e , a + c , g - 1 ) ; e [ g - 1 ] = 0 ; c += g - 1 ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; } free ( e ) ; e = malloc ( i ) ; memcpy ( e , a + c , i ) ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } 
========== 5 ==========
(1) FILE: ../../server.c LINES:163:7 TOKENS:1020:1083 DIST:3.5

void forwardMessage ( int a , void * b ) { char * c = ( ( void * ) 0 ) ; int d = 0 ; int e = 0 ; getDestHandle ( b , & c ) ; for ( e = 0 ; e < global_c ; e ++ ) { if ( strcmp ( c , global_a [ e ] ) == 0 ) { d = 1 ; if ( sendPacket ( b , global_d [ e ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } break ; } } if ( d == 0 ) { sendPacketFlag ( 7 , a ) ; } free ( c ) ; } 
(2) FILE: ../../server.c LINES:24:7 TOKENS:148:211 DIST:1.7

void setClientName ( void * a , int b ) { int c = 0 ; char * d = ( ( void * ) 0 ) ; getFirstHandle ( a , & d ) ; for ( c = 0 ; c < global_c ; c ++ ) { if ( global_d [ c ] == b ) { if ( getFDForName ( d ) != - 1 ) { free ( d ) ; sendPacketFlag ( 3 , global_d [ c ] ) ; removeClient ( b ) ; } else { global_a [ c ] = d ; sendPacketFlag ( 2 , global_d [ c ] ) ; printf ( "Welcome: %s\n" , global_a [ c ] ) ; } return ; } } } 
========== 6 ==========
(1) FILE: ../../chatShared.c LINES:122:10 TOKENS:870:924 DIST:2.6

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int test ( ) { char * a = "xyz" ; char * b = "Hello world" ; char * c ; char * d ; char * e ; char * f = "abc" ; packetHandle * g = makePacketMssg ( 1 , getHLen ( f ) , f , getHLen ( a ) , a , b ) ; printf ( "%d\n" , headerGetLen ( & ( g -> head ) ) ) ; getDestHandle ( g , & c ) ; getSrcHandle ( g , & e ) ; getMssg ( g , & b ) ; printf ( "%s\n" , c ) ; printf ( "%s\n" , e ) ; printf ( "%s\n" , b ) ; return 0 ; } void headerSetLen ( ) { a -> packetLen = htons ( b + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( a -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { a -> numHandles = htonl ( b ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( a -> numHandles ) ; } void * makePacketHandle ( uint8_t a , uint8_t b , char * c ) { ; f -> head . flag = a ; headerSetLen ( & ( f -> head ) , d ) ; f -> handleLen = b ; memcpy ( & ( f -> handleStart ) , c , b ) ; return e ; } void * makePacketBroadcast ( uint8_t a , uint8_t b , char * c , char * d ) { ; h -> handleLen = b ; memcpy ( & ( h -> handleStart ) , c , b ) ; memcpy ( & ( h -> handleStart ) + b , d , e ) ; return g ; } void * makePacketMssg ( uint8_t a , uint8_t b , char * c , uint8_t d , char * e , char * f ) { ; j -> head . flag = a ; headerSetLen ( & ( j -> head ) , h ) ; j -> handleLen = b ; memcpy ( & ( j -> handleStart ) , c , b ) ; * ( ( uint8_t * ) & ( j -> handleStart ) + b ) = d ; memcpy ( & ( j -> handleStart ) + b + 1 , e , d ) ; memcpy ( & ( j -> handleStart ) + b + 1 + d , f , g ) ; return i ; } void getFirstHandle ( void * a , char * * b ) { ; * b = malloc ( c -> handleLen + 1 ) ; memcpy ( * b , & ( c -> handleStart ) , c -> handleLen ) ; ( * b ) [ c -> handleLen ] = 0 ; } void getDestHandle ( void * a , char * * b ) { getFirstHandle ( a , b ) ; } void getSrcHandle ( void * a , char * * b ) { getSecondHandle ( a , b ) ; } void getSecondHandle ( void * a , char * * b ) { ; c = ( ( void * ) c ) + c -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; * b = malloc ( c -> handleLen + 1 ) ; memcpy ( * b , & ( c -> handleStart ) , c -> handleLen ) ; ( * b ) [ c -> handleLen ] = 0 ; } void getMssg ( void * a , char * * b ) { ; unsigned e = d -> handleLen ; unsigned f = headerGetLen ( a ) ; d = ( ( void * ) d ) + d -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; c = d -> handleLen ; unsigned g = f - ( e + 1 ) - ( c + 1 ) ; * b = malloc ( g ) ; memcpy ( * b , & ( d -> handleStart ) + d -> handleLen , g ) ; } void getBroadCastMssg ( void * a , char * * b ) { ; unsigned d = headerGetLen ( a ) - ( c -> handleLen + 1 ) ; * b = malloc ( d ) ; memcpy ( * b , & ( c -> handleStart ) + c -> handleLen , d ) ; } uint8_t getHLen ( char * a ) { unsigned b = strlen ( ( char * ) a ) ; if ( b > getMaxHLen ( ) ) { printf ( "The handle you entered is too long\n" ) ; exit ( - 1 ) ; } return b ; } uint8_t getMaxHLen ( ) { uint8_t a = 0 ; return a - 1 ; } void sendPacketFlag ( uint8_t a , int b ) { ; headerSetLen ( & c , 0 ) ; c . flag = a ; if ( mySend ( b , & c , sizeof ( header ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } int sendPacket ( void * a , int b ) { ; } 
(2) FILE: ../../server.c LINES:186:8 TOKENS:1175:1226 DIST:0.0

int global_b ; int * global_d = ( ( void * ) 0 ) ; char * * global_a = ( ( void * ) 0 ) ; int global_c = 0 ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { global_b = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int a ) { global_c ++ ; global_d = realloc ( global_d , sizeof ( int ) * global_c ) ; global_d [ global_c - 1 ] = a ; global_a = realloc ( global_a , sizeof ( char * ) * global_c ) ; global_a [ global_c - 1 ] = ( ( void * ) 0 ) ; } void setClientName ( void * a , int b ) { int c = 0 ; char * d = ( ( void * ) 0 ) ; getFirstHandle ( a , & d ) ; for ( c = 0 ; c < global_c ; c ++ ) { if ( global_d [ c ] == b ) { if ( getFDForName ( d ) != - 1 ) { free ( d ) ; sendPacketFlag ( 3 , global_d [ c ] ) ; removeClient ( b ) ; } else { global_a [ c ] = d ; sendPacketFlag ( 2 , global_d [ c ] ) ; printf ( "Welcome: %s\n" , global_a [ c ] ) ; } return ; } } } int getFDForName ( char * a ) { int b = 0 ; for ( b = 0 ; b < global_c ; b ++ ) { if ( global_a [ b ] != ( ( void * ) 0 ) && strcmp ( a , global_a [ b ] ) == 0 ) { return global_d [ b ] ; } } return - 1 ; } void removeClient ( int a ) { int b = 0 ; int c = 0 ; int * d ; char * * e ; global_c -- ; d = ( int * ) malloc ( sizeof ( int ) * global_c ) ; e = ( char * * ) malloc ( sizeof ( char * ) * global_c ) ; for ( c = 0 ; c <= global_c ; c ++ ) { if ( global_d [ c ] != a ) { if ( ! b ) { d [ c ] = global_d [ c ] ; e [ c ] = global_a [ c ] ; } else { d [ c - 1 ] = global_d [ c ] ; e [ c - 1 ] = global_a [ c ] ; } } else { b = 1 ; if ( global_a [ c ] != ( ( void * ) 0 ) ) { printf ( "Bye %s\n" , global_a [ c ] ) ; } free ( global_a [ c ] ) ; close ( global_d [ c ] ) ; } } free ( global_a ) ; free ( global_d ) ; global_a = e ; global_d = d ; } int getFDForInput ( ) { ; int c = global_b + 1 ; FD_ZERO ( & b ) ; FD_SET ( global_b , & b ) ; if ( global_c > 0 ) { c = global_d [ global_c - 1 ] + 1 ; } for ( a = 0 ; a < global_c ; a ++ ) { FD_SET ( global_d [ a ] , & b ) ; } if ( mySelect ( c , ( ) & b , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_b , & b ) ) { return global_b ; } else { for ( a = 0 ; a < global_c ; a ++ ) { if ( FD_ISSET ( global_d [ a ] , & b ) ) { return global_d [ a ] ; } } } return - 1 ; } void acceptClient ( ) { int a = tcpAccept ( global_b ) ; addClient ( a ) ; } void process ( ) { int a ; while ( 1 ) { a = getFDForInput ( ) ; if ( a == global_b ) { acceptClient ( ) ; } else { processPacket ( a ) ; } } } void processPacket ( int a ) { uint8_t * b = malloc ( 1000 ) ; int c = 0 ; if ( ( c = myRecv ( a , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { removeClient ( a ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( b , a ) ; break ; case 8 : sendPacketFlag ( 9 , a ) ; removeClient ( a ) ; break ; case 4 : broadCast ( a , b ) ; break ; case 5 : forwardMessage ( a , b ) ; break ; case 10 : sendPacketHandleAck ( 11 , a ) ; sendHandles ( a ) ; break ; default : break ; } free ( b ) ; } void broadCast ( int a , void * b ) { int c = 0 ; for ( c = 0 ; c < global_c ; c ++ ) { if ( global_d [ c ] != a ) { if ( sendPacket ( b , global_d [ c ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } } void forwardMessage ( int a , void * b ) { char * c = ( ( void * ) 0 ) ; int d = 0 ; int e = 0 ; getDestHandle ( b , & c ) ; for ( e = 0 ; e < global_c ; e ++ ) { if ( strcmp ( c , global_a [ e ] ) == 0 ) { d = 1 ; if ( sendPacket ( b , global_d [ e ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } break ; } } if ( d == 0 ) { sendPacketFlag ( 7 , a ) ; } free ( c ) ; } void sendPacketHandleAck ( uint8_t a , int b ) { ; headerSetLen ( ( ) & c , ( uint16_t ) ( sizeof ( packetHandleAck ) - sizeof ( header ) ) ) ; packetHandleAckSetNum ( & c , global_c ) ; c . head . flag = a ; if ( mySend ( b , & c , sizeof ( packetHandleAck ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } void sendPacketHandle ( int a , char * b ) { int c = strlen ( b ) ; void * d = makePacketHandle ( 12 , c , b ) ; if ( sendPacket ( d , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( d ) ; } 
========== 7 ==========
(1) FILE: ../../cclient.c LINES:87:6 TOKENS:604:654 DIST:3.0

void * d ; int e = 0 ; char * f ; int g = strlen ( global_b ) ; int h = strlen ( b ) ; int i = 1000 - ( g + 1 ) - ( h + 1 ) - sizeof ( header ) ; int j = ( strlen ( a ) + 1 ) / i ; int k = ( ( strlen ( a ) + 1 ) % i ) + j ; f = malloc ( i ) ; while ( j > 0 ) { memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; } free ( f ) ; f = malloc ( k ) ; memcpy ( f , a + e , k ) ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } 
(2) FILE: ../../cclient.c LINES:77:7 TOKENS:540:590 DIST:0.0

memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; 
========== 8 ==========
(1) FILE: ../../chatShared.c LINES:101:6 TOKENS:717:774 DIST:1.4

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int test ( ) { char * a = "xyz" ; char * b = "Hello world" ; char * c ; char * d ; char * e ; char * f = "abc" ; packetHandle * g = makePacketMssg ( 1 , getHLen ( f ) , f , getHLen ( a ) , a , b ) ; printf ( "%d\n" , headerGetLen ( & ( g -> head ) ) ) ; getDestHandle ( g , & c ) ; getSrcHandle ( g , & e ) ; getMssg ( g , & b ) ; printf ( "%s\n" , c ) ; printf ( "%s\n" , e ) ; printf ( "%s\n" , b ) ; return 0 ; } void headerSetLen ( ) { a -> packetLen = htons ( b + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( a -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { a -> numHandles = htonl ( b ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( a -> numHandles ) ; } void * makePacketHandle ( uint8_t a , uint8_t b , char * c ) { ; f -> head . flag = a ; headerSetLen ( & ( f -> head ) , d ) ; f -> handleLen = b ; memcpy ( & ( f -> handleStart ) , c , b ) ; return e ; } void * makePacketBroadcast ( uint8_t a , uint8_t b , char * c , char * d ) { ; h -> handleLen = b ; memcpy ( & ( h -> handleStart ) , c , b ) ; memcpy ( & ( h -> handleStart ) + b , d , e ) ; return g ; } void * makePacketMssg ( uint8_t a , uint8_t b , char * c , uint8_t d , char * e , char * f ) { ; j -> head . flag = a ; headerSetLen ( & ( j -> head ) , h ) ; j -> handleLen = b ; memcpy ( & ( j -> handleStart ) , c , b ) ; * ( ( uint8_t * ) & ( j -> handleStart ) + b ) = d ; memcpy ( & ( j -> handleStart ) + b + 1 , e , d ) ; memcpy ( & ( j -> handleStart ) + b + 1 + d , f , g ) ; return i ; } void getFirstHandle ( void * a , char * * b ) { ; * b = malloc ( c -> handleLen + 1 ) ; memcpy ( * b , & ( c -> handleStart ) , c -> handleLen ) ; ( * b ) [ c -> handleLen ] = 0 ; } void getDestHandle ( void * a , char * * b ) { getFirstHandle ( a , b ) ; } void getSrcHandle ( void * a , char * * b ) { getSecondHandle ( a , b ) ; } void getSecondHandle ( void * a , char * * b ) { ; c = ( ( void * ) c ) + c -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; * b = malloc ( c -> handleLen + 1 ) ; memcpy ( * b , & ( c -> handleStart ) , c -> handleLen ) ; ( * b ) [ c -> handleLen ] = 0 ; } void getMssg ( void * a , char * * b ) { ; unsigned e = d -> handleLen ; unsigned f = headerGetLen ( a ) ; d = ( ( void * ) d ) + d -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; c = d -> handleLen ; unsigned g = f - ( e + 1 ) - ( c + 1 ) ; * b = malloc ( g ) ; memcpy ( * b , & ( d -> handleStart ) + d -> handleLen , g ) ; } void getBroadCastMssg ( void * a , char * * b ) { ; unsigned d = headerGetLen ( a ) - ( c -> handleLen + 1 ) ; * b = malloc ( d ) ; memcpy ( * b , & ( c -> handleStart ) + c -> handleLen , d ) ; } 
(2) FILE: ../../chatShared.c LINES:104:7 TOKENS:753:807 DIST:3.5

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int test ( ) { char * a = "xyz" ; char * b = "Hello world" ; char * c ; char * d ; char * e ; char * f = "abc" ; packetHandle * g = makePacketMssg ( 1 , getHLen ( f ) , f , getHLen ( a ) , a , b ) ; printf ( "%d\n" , headerGetLen ( & ( g -> head ) ) ) ; getDestHandle ( g , & c ) ; getSrcHandle ( g , & e ) ; getMssg ( g , & b ) ; printf ( "%s\n" , c ) ; printf ( "%s\n" , e ) ; printf ( "%s\n" , b ) ; return 0 ; } void headerSetLen ( ) { a -> packetLen = htons ( b + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( a -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { a -> numHandles = htonl ( b ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( a -> numHandles ) ; } void * makePacketHandle ( uint8_t a , uint8_t b , char * c ) { ; f -> head . flag = a ; headerSetLen ( & ( f -> head ) , d ) ; f -> handleLen = b ; memcpy ( & ( f -> handleStart ) , c , b ) ; return e ; } void * makePacketBroadcast ( uint8_t a , uint8_t b , char * c , char * d ) { ; h -> handleLen = b ; memcpy ( & ( h -> handleStart ) , c , b ) ; memcpy ( & ( h -> handleStart ) + b , d , e ) ; return g ; } void * makePacketMssg ( uint8_t a , uint8_t b , char * c , uint8_t d , char * e , char * f ) { ; j -> head . flag = a ; headerSetLen ( & ( j -> head ) , h ) ; j -> handleLen = b ; memcpy ( & ( j -> handleStart ) , c , b ) ; * ( ( uint8_t * ) & ( j -> handleStart ) + b ) = d ; memcpy ( & ( j -> handleStart ) + b + 1 , e , d ) ; memcpy ( & ( j -> handleStart ) + b + 1 + d , f , g ) ; return i ; } void getFirstHandle ( void * a , char * * b ) { ; * b = malloc ( c -> handleLen + 1 ) ; memcpy ( * b , & ( c -> handleStart ) , c -> handleLen ) ; ( * b ) [ c -> handleLen ] = 0 ; } void getDestHandle ( void * a , char * * b ) { getFirstHandle ( a , b ) ; } void getSrcHandle ( void * a , char * * b ) { getSecondHandle ( a , b ) ; } void getSecondHandle ( void * a , char * * b ) { ; c = ( ( void * ) c ) + c -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; * b = malloc ( c -> handleLen + 1 ) ; memcpy ( * b , & ( c -> handleStart ) , c -> handleLen ) ; ( * b ) [ c -> handleLen ] = 0 ; } void getMssg ( void * a , char * * b ) { ; unsigned e = d -> handleLen ; unsigned f = headerGetLen ( a ) ; d = ( ( void * ) d ) + d -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; c = d -> handleLen ; unsigned g = f - ( e + 1 ) - ( c + 1 ) ; * b = malloc ( g ) ; memcpy ( * b , & ( d -> handleStart ) + d -> handleLen , g ) ; } void getBroadCastMssg ( void * a , char * * b ) { ; unsigned d = headerGetLen ( a ) - ( c -> handleLen + 1 ) ; * b = malloc ( d ) ; memcpy ( * b , & ( c -> handleStart ) + c -> handleLen , d ) ; } uint8_t getHLen ( char * a ) { unsigned b = strlen ( ( char * ) a ) ; if ( b > getMaxHLen ( ) ) { printf ( "The handle you entered is too long\n" ) ; exit ( - 1 ) ; } return b ; } 
========== 9 ==========
(1) FILE: ../../cclient.c LINES:230:6 TOKENS:1389:1440 DIST:1.7

void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
(2) FILE: ../../cclient.c LINES:239:6 TOKENS:1455:1508 DIST:0.0

void printMessage ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getSrcHandle ( a , & b ) ; getMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
========== 10 ==========
(1) FILE: ../../cclient.c LINES:22:8 TOKENS:115:166 DIST:1.4

void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } 
(2) FILE: ../../server.c LINES:194:9 TOKENS:1234:1284 DIST:0.0

int global_b ; int * global_d = ( ( void * ) 0 ) ; char * * global_a = ( ( void * ) 0 ) ; int global_c = 0 ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { global_b = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int a ) { global_c ++ ; global_d = realloc ( global_d , sizeof ( int ) * global_c ) ; global_d [ global_c - 1 ] = a ; global_a = realloc ( global_a , sizeof ( char * ) * global_c ) ; global_a [ global_c - 1 ] = ( ( void * ) 0 ) ; } void setClientName ( void * a , int b ) { int c = 0 ; char * d = ( ( void * ) 0 ) ; getFirstHandle ( a , & d ) ; for ( c = 0 ; c < global_c ; c ++ ) { if ( global_d [ c ] == b ) { if ( getFDForName ( d ) != - 1 ) { free ( d ) ; sendPacketFlag ( 3 , global_d [ c ] ) ; removeClient ( b ) ; } else { global_a [ c ] = d ; sendPacketFlag ( 2 , global_d [ c ] ) ; printf ( "Welcome: %s\n" , global_a [ c ] ) ; } return ; } } } int getFDForName ( char * a ) { int b = 0 ; for ( b = 0 ; b < global_c ; b ++ ) { if ( global_a [ b ] != ( ( void * ) 0 ) && strcmp ( a , global_a [ b ] ) == 0 ) { return global_d [ b ] ; } } return - 1 ; } void removeClient ( int a ) { int b = 0 ; int c = 0 ; int * d ; char * * e ; global_c -- ; d = ( int * ) malloc ( sizeof ( int ) * global_c ) ; e = ( char * * ) malloc ( sizeof ( char * ) * global_c ) ; for ( c = 0 ; c <= global_c ; c ++ ) { if ( global_d [ c ] != a ) { if ( ! b ) { d [ c ] = global_d [ c ] ; e [ c ] = global_a [ c ] ; } else { d [ c - 1 ] = global_d [ c ] ; e [ c - 1 ] = global_a [ c ] ; } } else { b = 1 ; if ( global_a [ c ] != ( ( void * ) 0 ) ) { printf ( "Bye %s\n" , global_a [ c ] ) ; } free ( global_a [ c ] ) ; close ( global_d [ c ] ) ; } } free ( global_a ) ; free ( global_d ) ; global_a = e ; global_d = d ; } int getFDForInput ( ) { ; int c = global_b + 1 ; FD_ZERO ( & b ) ; FD_SET ( global_b , & b ) ; if ( global_c > 0 ) { c = global_d [ global_c - 1 ] + 1 ; } for ( a = 0 ; a < global_c ; a ++ ) { FD_SET ( global_d [ a ] , & b ) ; } if ( mySelect ( c , ( ) & b , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_b , & b ) ) { return global_b ; } else { for ( a = 0 ; a < global_c ; a ++ ) { if ( FD_ISSET ( global_d [ a ] , & b ) ) { return global_d [ a ] ; } } } return - 1 ; } void acceptClient ( ) { int a = tcpAccept ( global_b ) ; addClient ( a ) ; } void process ( ) { int a ; while ( 1 ) { a = getFDForInput ( ) ; if ( a == global_b ) { acceptClient ( ) ; } else { processPacket ( a ) ; } } } void processPacket ( int a ) { uint8_t * b = malloc ( 1000 ) ; int c = 0 ; if ( ( c = myRecv ( a , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { removeClient ( a ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( b , a ) ; break ; case 8 : sendPacketFlag ( 9 , a ) ; removeClient ( a ) ; break ; case 4 : broadCast ( a , b ) ; break ; case 5 : forwardMessage ( a , b ) ; break ; case 10 : sendPacketHandleAck ( 11 , a ) ; sendHandles ( a ) ; break ; default : break ; } free ( b ) ; } void broadCast ( int a , void * b ) { int c = 0 ; for ( c = 0 ; c < global_c ; c ++ ) { if ( global_d [ c ] != a ) { if ( sendPacket ( b , global_d [ c ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } } void forwardMessage ( int a , void * b ) { char * c = ( ( void * ) 0 ) ; int d = 0 ; int e = 0 ; getDestHandle ( b , & c ) ; for ( e = 0 ; e < global_c ; e ++ ) { if ( strcmp ( c , global_a [ e ] ) == 0 ) { d = 1 ; if ( sendPacket ( b , global_d [ e ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } break ; } } if ( d == 0 ) { sendPacketFlag ( 7 , a ) ; } free ( c ) ; } void sendPacketHandleAck ( uint8_t a , int b ) { ; headerSetLen ( ( ) & c , ( uint16_t ) ( sizeof ( packetHandleAck ) - sizeof ( header ) ) ) ; packetHandleAckSetNum ( & c , global_c ) ; c . head . flag = a ; if ( mySend ( b , & c , sizeof ( packetHandleAck ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } void sendPacketHandle ( int a , char * b ) { int c = strlen ( b ) ; void * d = makePacketHandle ( 12 , c , b ) ; if ( sendPacket ( d , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( d ) ; } void sendHandles ( int a ) { int b = 0 ; for ( b = 0 ; b < global_c ; b ++ ) { sendPacketHandle ( a , global_a [ b ] ) ; } } 
========== 11 ==========
(1) FILE: ../../cclient.c LINES:101:4 TOKENS:695:747 DIST:2.4

; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } 
(2) FILE: ../../server.c LINES:93:4 TOKENS:610:666 DIST:0.0

; int c = global_b + 1 ; FD_ZERO ( & b ) ; FD_SET ( global_b , & b ) ; if ( global_c > 0 ) { c = global_d [ global_c - 1 ] + 1 ; } for ( a = 0 ; a < global_c ; a ++ ) { FD_SET ( global_d [ a ] , & b ) ; } if ( mySelect ( c , ( ) & b , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } 
========== 12 ==========
(1) FILE: ../../chatShared.c LINES:42:7 TOKENS:228:280 DIST:3.3

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int test ( ) { char * a = "xyz" ; char * b = "Hello world" ; char * c ; char * d ; char * e ; char * f = "abc" ; packetHandle * g = makePacketMssg ( 1 , getHLen ( f ) , f , getHLen ( a ) , a , b ) ; printf ( "%d\n" , headerGetLen ( & ( g -> head ) ) ) ; getDestHandle ( g , & c ) ; getSrcHandle ( g , & e ) ; getMssg ( g , & b ) ; printf ( "%s\n" , c ) ; printf ( "%s\n" , e ) ; printf ( "%s\n" , b ) ; return 0 ; } void headerSetLen ( ) { a -> packetLen = htons ( b + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( a -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { a -> numHandles = htonl ( b ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( a -> numHandles ) ; } void * makePacketHandle ( uint8_t a , uint8_t b , char * c ) { ; f -> head . flag = a ; headerSetLen ( & ( f -> head ) , d ) ; f -> handleLen = b ; memcpy ( & ( f -> handleStart ) , c , b ) ; return e ; } void * makePacketBroadcast ( uint8_t a , uint8_t b , char * c , char * d ) { ; h -> handleLen = b ; memcpy ( & ( h -> handleStart ) , c , b ) ; memcpy ( & ( h -> handleStart ) + b , d , e ) ; return g ; } 
(2) FILE: ../../chatShared.c LINES:38:8 TOKENS:212:267 DIST:0.0

void * makePacketHandle ( uint8_t a , uint8_t b , char * c ) { ; f -> head . flag = a ; headerSetLen ( & ( f -> head ) , d ) ; f -> handleLen = b ; memcpy ( & ( f -> handleStart ) , c , b ) ; return e ; } 
(3) FILE: ../../chatShared.c LINES:60:9 TOKENS:340:398 DIST:3.3

void * makePacketMssg ( uint8_t a , uint8_t b , char * c , uint8_t d , char * e , char * f ) { ; j -> head . flag = a ; headerSetLen ( & ( j -> head ) , h ) ; j -> handleLen = b ; memcpy ( & ( j -> handleStart ) , c , b ) ; * ( ( uint8_t * ) & ( j -> handleStart ) + b ) = d ; memcpy ( & ( j -> handleStart ) + b + 1 , e , d ) ; memcpy ( & ( j -> handleStart ) + b + 1 + d , f , g ) ; return i ; } 
========== 13 ==========
(1) FILE: ../../cclient.c LINES:193:8 TOKENS:1167:1228 DIST:0.0

if ( strcmp ( d , "%E" ) == 0 || strcmp ( d , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; f = 1 ; } if ( strcmp ( d , "%B" ) == 0 || strcmp ( d , "%b" ) == 0 ) { f = 1 ; e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( e , global_c ) ; } } if ( strcmp ( d , "%M" ) == 0 || strcmp ( d , "%m" ) == 0 ) { f = 1 ; a = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( a == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( e , a , global_c ) ; } } } 
(2) FILE: ../../cclient.c LINES:197:6 TOKENS:1180:1236 DIST:3.3

if ( strcmp ( d , "%M" ) == 0 || strcmp ( d , "%m" ) == 0 ) { f = 1 ; a = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( a == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( e , a , global_c ) ; } } } 
========== 14 ==========
(1) FILE: ../../cclient.c LINES:22:9 TOKENS:111:167 DIST:2.0

void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } 
(2) FILE: ../../server.c LINES:190:10 TOKENS:1216:1277 DIST:2.0

int global_b ; int * global_d = ( ( void * ) 0 ) ; char * * global_a = ( ( void * ) 0 ) ; int global_c = 0 ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { global_b = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int a ) { global_c ++ ; global_d = realloc ( global_d , sizeof ( int ) * global_c ) ; global_d [ global_c - 1 ] = a ; global_a = realloc ( global_a , sizeof ( char * ) * global_c ) ; global_a [ global_c - 1 ] = ( ( void * ) 0 ) ; } void setClientName ( void * a , int b ) { int c = 0 ; char * d = ( ( void * ) 0 ) ; getFirstHandle ( a , & d ) ; for ( c = 0 ; c < global_c ; c ++ ) { if ( global_d [ c ] == b ) { if ( getFDForName ( d ) != - 1 ) { free ( d ) ; sendPacketFlag ( 3 , global_d [ c ] ) ; removeClient ( b ) ; } else { global_a [ c ] = d ; sendPacketFlag ( 2 , global_d [ c ] ) ; printf ( "Welcome: %s\n" , global_a [ c ] ) ; } return ; } } } int getFDForName ( char * a ) { int b = 0 ; for ( b = 0 ; b < global_c ; b ++ ) { if ( global_a [ b ] != ( ( void * ) 0 ) && strcmp ( a , global_a [ b ] ) == 0 ) { return global_d [ b ] ; } } return - 1 ; } void removeClient ( int a ) { int b = 0 ; int c = 0 ; int * d ; char * * e ; global_c -- ; d = ( int * ) malloc ( sizeof ( int ) * global_c ) ; e = ( char * * ) malloc ( sizeof ( char * ) * global_c ) ; for ( c = 0 ; c <= global_c ; c ++ ) { if ( global_d [ c ] != a ) { if ( ! b ) { d [ c ] = global_d [ c ] ; e [ c ] = global_a [ c ] ; } else { d [ c - 1 ] = global_d [ c ] ; e [ c - 1 ] = global_a [ c ] ; } } else { b = 1 ; if ( global_a [ c ] != ( ( void * ) 0 ) ) { printf ( "Bye %s\n" , global_a [ c ] ) ; } free ( global_a [ c ] ) ; close ( global_d [ c ] ) ; } } free ( global_a ) ; free ( global_d ) ; global_a = e ; global_d = d ; } int getFDForInput ( ) { ; int c = global_b + 1 ; FD_ZERO ( & b ) ; FD_SET ( global_b , & b ) ; if ( global_c > 0 ) { c = global_d [ global_c - 1 ] + 1 ; } for ( a = 0 ; a < global_c ; a ++ ) { FD_SET ( global_d [ a ] , & b ) ; } if ( mySelect ( c , ( ) & b , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_b , & b ) ) { return global_b ; } else { for ( a = 0 ; a < global_c ; a ++ ) { if ( FD_ISSET ( global_d [ a ] , & b ) ) { return global_d [ a ] ; } } } return - 1 ; } void acceptClient ( ) { int a = tcpAccept ( global_b ) ; addClient ( a ) ; } void process ( ) { int a ; while ( 1 ) { a = getFDForInput ( ) ; if ( a == global_b ) { acceptClient ( ) ; } else { processPacket ( a ) ; } } } void processPacket ( int a ) { uint8_t * b = malloc ( 1000 ) ; int c = 0 ; if ( ( c = myRecv ( a , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { removeClient ( a ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( b , a ) ; break ; case 8 : sendPacketFlag ( 9 , a ) ; removeClient ( a ) ; break ; case 4 : broadCast ( a , b ) ; break ; case 5 : forwardMessage ( a , b ) ; break ; case 10 : sendPacketHandleAck ( 11 , a ) ; sendHandles ( a ) ; break ; default : break ; } free ( b ) ; } void broadCast ( int a , void * b ) { int c = 0 ; for ( c = 0 ; c < global_c ; c ++ ) { if ( global_d [ c ] != a ) { if ( sendPacket ( b , global_d [ c ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } } void forwardMessage ( int a , void * b ) { char * c = ( ( void * ) 0 ) ; int d = 0 ; int e = 0 ; getDestHandle ( b , & c ) ; for ( e = 0 ; e < global_c ; e ++ ) { if ( strcmp ( c , global_a [ e ] ) == 0 ) { d = 1 ; if ( sendPacket ( b , global_d [ e ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } break ; } } if ( d == 0 ) { sendPacketFlag ( 7 , a ) ; } free ( c ) ; } void sendPacketHandleAck ( uint8_t a , int b ) { ; headerSetLen ( ( ) & c , ( uint16_t ) ( sizeof ( packetHandleAck ) - sizeof ( header ) ) ) ; packetHandleAckSetNum ( & c , global_c ) ; c . head . flag = a ; if ( mySend ( b , & c , sizeof ( packetHandleAck ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } void sendPacketHandle ( int a , char * b ) { int c = strlen ( b ) ; void * d = makePacketHandle ( 12 , c , b ) ; if ( sendPacket ( d , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( d ) ; } 
========== 15 ==========
(1) FILE: ../../cclient.c LINES:40:7 TOKENS:253:313 DIST:0.0

while ( h > 0 ) { h -- ; memcpy ( e , a + c , g - 1 ) ; e [ g - 1 ] = 0 ; c += g - 1 ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; } 
(2) FILE: ../../cclient.c LINES:72:7 TOKENS:501:562 DIST:3.6

void * d ; int e = 0 ; char * f ; int g = strlen ( global_b ) ; int h = strlen ( b ) ; int i = 1000 - ( g + 1 ) - ( h + 1 ) - sizeof ( header ) ; int j = ( strlen ( a ) + 1 ) / i ; int k = ( ( strlen ( a ) + 1 ) % i ) + j ; f = malloc ( i ) ; while ( j > 0 ) { memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; } 
========== 16 ==========
(1) FILE: ../../server.c LINES:136:9 TOKENS:868:918 DIST:0.0

case 1 : setClientName ( b , a ) ; break ; case 8 : sendPacketFlag ( 9 , a ) ; removeClient ( a ) ; break ; case 4 : broadCast ( a , b ) ; break ; case 5 : forwardMessage ( a , b ) ; break ; 
(2) FILE: ../../server.c LINES:140:11 TOKENS:893:945 DIST:3.0

uint8_t * b = malloc ( 1000 ) ; int c = 0 ; if ( ( c = myRecv ( a , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { removeClient ( a ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( b , a ) ; break ; case 8 : sendPacketFlag ( 9 , a ) ; removeClient ( a ) ; break ; case 4 : broadCast ( a , b ) ; break ; case 5 : forwardMessage ( a , b ) ; break ; case 10 : sendPacketHandleAck ( 11 , a ) ; sendHandles ( a ) ; break ; default : break ; } free ( b ) ; 
========== 17 ==========
(1) FILE: ../../cclient.c LINES:73:12 TOKENS:514:591 DIST:2.8

{ memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; } 
(2) FILE: ../../cclient.c LINES:40:12 TOKENS:253:332 DIST:0.0

while ( h > 0 ) { h -- ; memcpy ( e , a + c , g - 1 ) ; e [ g - 1 ] = 0 ; c += g - 1 ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; } 
========== 18 ==========
(1) FILE: ../../cclient.c LINES:34:5 TOKENS:188:245 DIST:0.0

int c = 0 ; void * d ; char * e ; int f = strlen ( global_b ) ; int g = 1000 - f - sizeof ( header ) - 1 ; int h = ( strlen ( a ) + 1 ) / g ; int i = ( ( strlen ( a ) + 1 ) % g ) + h ; 
(2) FILE: ../../cclient.c LINES:66:5 TOKENS:427:482 DIST:3.0

void * d ; int e = 0 ; char * f ; int g = strlen ( global_b ) ; int h = strlen ( b ) ; int i = 1000 - ( g + 1 ) - ( h + 1 ) - sizeof ( header ) ; int j = ( strlen ( a ) + 1 ) / i ; 
========== 19 ==========
(1) FILE: ../../cclient.c LINES:47:9 TOKENS:316:368 DIST:3.2

int c = 0 ; void * d ; char * e ; int f = strlen ( global_b ) ; int g = 1000 - f - sizeof ( header ) - 1 ; int h = ( strlen ( a ) + 1 ) / g ; int i = ( ( strlen ( a ) + 1 ) % g ) + h ; e = malloc ( g ) ; while ( h > 0 ) { h -- ; memcpy ( e , a + c , g - 1 ) ; e [ g - 1 ] = 0 ; c += g - 1 ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; } free ( e ) ; e = malloc ( i ) ; memcpy ( e , a + c , i ) ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; 
(2) FILE: ../../cclient.c LINES:81:8 TOKENS:580:631 DIST:0.0

void * d ; int e = 0 ; char * f ; int g = strlen ( global_b ) ; int h = strlen ( b ) ; int i = 1000 - ( g + 1 ) - ( h + 1 ) - sizeof ( header ) ; int j = ( strlen ( a ) + 1 ) / i ; int k = ( ( strlen ( a ) + 1 ) % i ) + j ; f = malloc ( i ) ; while ( j > 0 ) { memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; } free ( f ) ; f = malloc ( k ) ; memcpy ( f , a + e , k ) ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; 
========== 20 ==========
(1) FILE: ../../cclient.c LINES:133:8 TOKENS:881:935 DIST:2.4

int a = 0 ; uint8_t * b = malloc ( 1000 ) ; uint8_t * c = packet ; if ( ( a = myRecv ( global_c , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( a == 0 ) { printf ( "Server terminated\n" ) ; close ( global_c ) ; exit ( 1 ) ; } 
(2) FILE: ../../server.c LINES:127:8 TOKENS:804:857 DIST:0.0

uint8_t * b = malloc ( 1000 ) ; int c = 0 ; if ( ( c = myRecv ( a , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { removeClient ( a ) ; } 
========== 21 ==========
(1) FILE: ../../cclient.c LINES:239:9 TOKENS:1452:1519 DIST:0.0

void printMessage ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getSrcHandle ( a , & b ) ; getMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
(2) FILE: ../../cclient.c LINES:230:9 TOKENS:1384:1451 DIST:0.0

void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
========== 22 ==========
(1) FILE: ../../chatShared.c LINES:38:11 TOKENS:217:272 DIST:2.8

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int test ( ) { char * a = "xyz" ; char * b = "Hello world" ; char * c ; char * d ; char * e ; char * f = "abc" ; packetHandle * g = makePacketMssg ( 1 , getHLen ( f ) , f , getHLen ( a ) , a , b ) ; printf ( "%d\n" , headerGetLen ( & ( g -> head ) ) ) ; getDestHandle ( g , & c ) ; getSrcHandle ( g , & e ) ; getMssg ( g , & b ) ; printf ( "%s\n" , c ) ; printf ( "%s\n" , e ) ; printf ( "%s\n" , b ) ; return 0 ; } void headerSetLen ( ) { a -> packetLen = htons ( b + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( a -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { a -> numHandles = htonl ( b ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( a -> numHandles ) ; } void * makePacketHandle ( uint8_t a , uint8_t b , char * c ) { ; f -> head . flag = a ; headerSetLen ( & ( f -> head ) , d ) ; f -> handleLen = b ; memcpy ( & ( f -> handleStart ) , c , b ) ; return e ; } void * makePacketBroadcast ( uint8_t a , uint8_t b , char * c , char * d ) { ; h -> handleLen = b ; memcpy ( & ( h -> handleStart ) , c , b ) ; memcpy ( & ( h -> handleStart ) + b , d , e ) ; return g ; } 
(2) FILE: ../../chatShared.c LINES:44:13 TOKENS:248:311 DIST:3.3

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int test ( ) { char * a = "xyz" ; char * b = "Hello world" ; char * c ; char * d ; char * e ; char * f = "abc" ; packetHandle * g = makePacketMssg ( 1 , getHLen ( f ) , f , getHLen ( a ) , a , b ) ; printf ( "%d\n" , headerGetLen ( & ( g -> head ) ) ) ; getDestHandle ( g , & c ) ; getSrcHandle ( g , & e ) ; getMssg ( g , & b ) ; printf ( "%s\n" , c ) ; printf ( "%s\n" , e ) ; printf ( "%s\n" , b ) ; return 0 ; } void headerSetLen ( ) { a -> packetLen = htons ( b + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( a -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { a -> numHandles = htonl ( b ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( a -> numHandles ) ; } void * makePacketHandle ( uint8_t a , uint8_t b , char * c ) { ; f -> head . flag = a ; headerSetLen ( & ( f -> head ) , d ) ; f -> handleLen = b ; memcpy ( & ( f -> handleStart ) , c , b ) ; return e ; } void * makePacketBroadcast ( uint8_t a , uint8_t b , char * c , char * d ) { ; h -> handleLen = b ; memcpy ( & ( h -> handleStart ) , c , b ) ; memcpy ( & ( h -> handleStart ) + b , d , e ) ; return g ; } 
========== 23 ==========
(1) FILE: ../../cclient.c LINES:241:8 TOKENS:1472:1523 DIST:0.0

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } void sendPacketBroadCast ( char * a , int b ) { int c = 0 ; void * d ; char * e ; int f = strlen ( global_b ) ; int g = 1000 - f - sizeof ( header ) - 1 ; int h = ( strlen ( a ) + 1 ) / g ; int i = ( ( strlen ( a ) + 1 ) % g ) + h ; e = malloc ( g ) ; while ( h > 0 ) { h -- ; memcpy ( e , a + c , g - 1 ) ; e [ g - 1 ] = 0 ; c += g - 1 ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; } free ( e ) ; e = malloc ( i ) ; memcpy ( e , a + c , i ) ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( e ) ; } void sendPacketMssg ( char * a , char * b , int c ) { void * d ; int e = 0 ; char * f ; int g = strlen ( global_b ) ; int h = strlen ( b ) ; int i = 1000 - ( g + 1 ) - ( h + 1 ) - sizeof ( header ) ; int j = ( strlen ( a ) + 1 ) / i ; int k = ( ( strlen ( a ) + 1 ) % i ) + j ; f = malloc ( i ) ; while ( j > 0 ) { memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; } free ( f ) ; f = malloc ( k ) ; memcpy ( f , a + e , k ) ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; free ( f ) ; } int getFDForInput ( ) { ; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_c , & a ) ) { return global_c ; } if ( global_a && FD_ISSET ( fileno ( stdin ) , & a ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int a ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; a = getFDForInput ( ) ; if ( a == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { int a = 0 ; uint8_t * b = malloc ( 1000 ) ; uint8_t * c = packet ; if ( ( a = myRecv ( global_c , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( a == 0 ) { printf ( "Server terminated\n" ) ; close ( global_c ) ; exit ( 1 ) ; } while ( a > 0 ) { ; } free ( c ) ; } void processInput ( ) { char * a = ( ( void * ) 0 ) ; unsigned long b = - 1 ; char * c = ( ( void * ) 0 ) ; char * d = ( ( void * ) 0 ) ; char * e = ( ( void * ) 0 ) ; int f = 0 ; char * g = ( ( void * ) 0 ) ; getline ( & c , ( size_t * ) & b , stdin ) ; g = c ; d = strtok ( c , " \n\t" ) ; if ( d != ( ( void * ) 0 ) ) { if ( strcmp ( d , "%E" ) == 0 || strcmp ( d , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; f = 1 ; } if ( strcmp ( d , "%B" ) == 0 || strcmp ( d , "%b" ) == 0 ) { f = 1 ; e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( e , global_c ) ; } } if ( strcmp ( d , "%M" ) == 0 || strcmp ( d , "%m" ) == 0 ) { f = 1 ; a = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( a == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( e , a , global_c ) ; } } } if ( strcmp ( d , "%L" ) == 0 || strcmp ( d , "%l" ) == 0 ) { sendPacketFlag ( 10 , global_c ) ; f = 1 ; } } free ( g ) ; if ( f == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int a ) { int b = 0 ; global_a = 0 ; global_a = 1 ; for ( b = 0 ; b < a ; b ++ ) { getFDForInput ( ) ; processPacket ( ) ; } } void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } void printMessage ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getSrcHandle ( a , & b ) ; getMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } void printHandle ( void * a ) { char * b = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; printf ( "  -%s\n" , b ) ; free ( b ) ; } 
(2) FILE: ../../cclient.c LINES:232:8 TOKENS:1404:1455 DIST:0.0

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } void sendPacketBroadCast ( char * a , int b ) { int c = 0 ; void * d ; char * e ; int f = strlen ( global_b ) ; int g = 1000 - f - sizeof ( header ) - 1 ; int h = ( strlen ( a ) + 1 ) / g ; int i = ( ( strlen ( a ) + 1 ) % g ) + h ; e = malloc ( g ) ; while ( h > 0 ) { h -- ; memcpy ( e , a + c , g - 1 ) ; e [ g - 1 ] = 0 ; c += g - 1 ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; } free ( e ) ; e = malloc ( i ) ; memcpy ( e , a + c , i ) ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( e ) ; } void sendPacketMssg ( char * a , char * b , int c ) { void * d ; int e = 0 ; char * f ; int g = strlen ( global_b ) ; int h = strlen ( b ) ; int i = 1000 - ( g + 1 ) - ( h + 1 ) - sizeof ( header ) ; int j = ( strlen ( a ) + 1 ) / i ; int k = ( ( strlen ( a ) + 1 ) % i ) + j ; f = malloc ( i ) ; while ( j > 0 ) { memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; } free ( f ) ; f = malloc ( k ) ; memcpy ( f , a + e , k ) ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; free ( f ) ; } int getFDForInput ( ) { ; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_c , & a ) ) { return global_c ; } if ( global_a && FD_ISSET ( fileno ( stdin ) , & a ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int a ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; a = getFDForInput ( ) ; if ( a == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { int a = 0 ; uint8_t * b = malloc ( 1000 ) ; uint8_t * c = packet ; if ( ( a = myRecv ( global_c , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( a == 0 ) { printf ( "Server terminated\n" ) ; close ( global_c ) ; exit ( 1 ) ; } while ( a > 0 ) { ; } free ( c ) ; } void processInput ( ) { char * a = ( ( void * ) 0 ) ; unsigned long b = - 1 ; char * c = ( ( void * ) 0 ) ; char * d = ( ( void * ) 0 ) ; char * e = ( ( void * ) 0 ) ; int f = 0 ; char * g = ( ( void * ) 0 ) ; getline ( & c , ( size_t * ) & b , stdin ) ; g = c ; d = strtok ( c , " \n\t" ) ; if ( d != ( ( void * ) 0 ) ) { if ( strcmp ( d , "%E" ) == 0 || strcmp ( d , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; f = 1 ; } if ( strcmp ( d , "%B" ) == 0 || strcmp ( d , "%b" ) == 0 ) { f = 1 ; e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( e , global_c ) ; } } if ( strcmp ( d , "%M" ) == 0 || strcmp ( d , "%m" ) == 0 ) { f = 1 ; a = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( a == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( e , a , global_c ) ; } } } if ( strcmp ( d , "%L" ) == 0 || strcmp ( d , "%l" ) == 0 ) { sendPacketFlag ( 10 , global_c ) ; f = 1 ; } } free ( g ) ; if ( f == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int a ) { int b = 0 ; global_a = 0 ; global_a = 1 ; for ( b = 0 ; b < a ; b ++ ) { getFDForInput ( ) ; processPacket ( ) ; } } void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } void printMessage ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getSrcHandle ( a , & b ) ; getMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
========== 24 ==========
(1) FILE: ../../cclient.c LINES:104:5 TOKENS:712:769 DIST:2.8

; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_c , & a ) ) { return global_c ; } 
(2) FILE: ../../server.c LINES:93:4 TOKENS:610:666 DIST:0.0

; int c = global_b + 1 ; FD_ZERO ( & b ) ; FD_SET ( global_b , & b ) ; if ( global_c > 0 ) { c = global_d [ global_c - 1 ] + 1 ; } for ( a = 0 ; a < global_c ; a ++ ) { FD_SET ( global_d [ a ] , & b ) ; } if ( mySelect ( c , ( ) & b , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } 
========== 25 ==========
(1) FILE: ../../cclient.c LINES:188:9 TOKENS:1128:1177 DIST:0.0

{ f = 1 ; e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( e , global_c ) ; } } 
(2) FILE: ../../cclient.c LINES:201:9 TOKENS:1231:1285 DIST:3.0

if ( a == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( e , a , global_c ) ; } } 
========== 26 ==========
(1) FILE: ../../cclient.c LINES:19:10 TOKENS:103:161 DIST:3.2

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } 
(2) FILE: ../../server.c LINES:193:8 TOKENS:1227:1282 DIST:0.0

void sendPacketHandle ( int a , char * b ) { int c = strlen ( b ) ; void * d = makePacketHandle ( 12 , c , b ) ; if ( sendPacket ( d , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( d ) ; } 
========== 27 ==========
(1) FILE: ../../cclient.c LINES:31:7 TOKENS:169:227 DIST:0.0

void sendPacketBroadCast ( char * a , int b ) { int c = 0 ; void * d ; char * e ; int f = strlen ( global_b ) ; int g = 1000 - f - sizeof ( header ) - 1 ; int h = ( strlen ( a ) + 1 ) / g ; int i = ( ( strlen ( a ) + 1 ) % g ) + h ; e = malloc ( g ) ; while ( h > 0 ) { h -- ; memcpy ( e , a + c , g - 1 ) ; e [ g - 1 ] = 0 ; c += g - 1 ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; } free ( e ) ; e = malloc ( i ) ; memcpy ( e , a + c , i ) ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( e ) ; } 
(2) FILE: ../../cclient.c LINES:63:7 TOKENS:411:468 DIST:3.3

void sendPacketMssg ( char * a , char * b , int c ) { void * d ; int e = 0 ; char * f ; int g = strlen ( global_b ) ; int h = strlen ( b ) ; int i = 1000 - ( g + 1 ) - ( h + 1 ) - sizeof ( header ) ; int j = ( strlen ( a ) + 1 ) / i ; int k = ( ( strlen ( a ) + 1 ) % i ) + j ; f = malloc ( i ) ; while ( j > 0 ) { memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; } free ( f ) ; f = malloc ( k ) ; memcpy ( f , a + e , k ) ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; free ( f ) ; } 
========== 28 ==========
(1) FILE: ../../cclient.c LINES:230:6 TOKENS:1384:1440 DIST:0.0

void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
(2) FILE: ../../cclient.c LINES:236:8 TOKENS:1441:1499 DIST:3.2

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } void sendPacketBroadCast ( char * a , int b ) { int c = 0 ; void * d ; char * e ; int f = strlen ( global_b ) ; int g = 1000 - f - sizeof ( header ) - 1 ; int h = ( strlen ( a ) + 1 ) / g ; int i = ( ( strlen ( a ) + 1 ) % g ) + h ; e = malloc ( g ) ; while ( h > 0 ) { h -- ; memcpy ( e , a + c , g - 1 ) ; e [ g - 1 ] = 0 ; c += g - 1 ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; } free ( e ) ; e = malloc ( i ) ; memcpy ( e , a + c , i ) ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( e ) ; } void sendPacketMssg ( char * a , char * b , int c ) { void * d ; int e = 0 ; char * f ; int g = strlen ( global_b ) ; int h = strlen ( b ) ; int i = 1000 - ( g + 1 ) - ( h + 1 ) - sizeof ( header ) ; int j = ( strlen ( a ) + 1 ) / i ; int k = ( ( strlen ( a ) + 1 ) % i ) + j ; f = malloc ( i ) ; while ( j > 0 ) { memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; } free ( f ) ; f = malloc ( k ) ; memcpy ( f , a + e , k ) ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; free ( f ) ; } int getFDForInput ( ) { ; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_c , & a ) ) { return global_c ; } if ( global_a && FD_ISSET ( fileno ( stdin ) , & a ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int a ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; a = getFDForInput ( ) ; if ( a == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { int a = 0 ; uint8_t * b = malloc ( 1000 ) ; uint8_t * c = packet ; if ( ( a = myRecv ( global_c , b , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( a == 0 ) { printf ( "Server terminated\n" ) ; close ( global_c ) ; exit ( 1 ) ; } while ( a > 0 ) { ; } free ( c ) ; } void processInput ( ) { char * a = ( ( void * ) 0 ) ; unsigned long b = - 1 ; char * c = ( ( void * ) 0 ) ; char * d = ( ( void * ) 0 ) ; char * e = ( ( void * ) 0 ) ; int f = 0 ; char * g = ( ( void * ) 0 ) ; getline ( & c , ( size_t * ) & b , stdin ) ; g = c ; d = strtok ( c , " \n\t" ) ; if ( d != ( ( void * ) 0 ) ) { if ( strcmp ( d , "%E" ) == 0 || strcmp ( d , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; f = 1 ; } if ( strcmp ( d , "%B" ) == 0 || strcmp ( d , "%b" ) == 0 ) { f = 1 ; e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( e , global_c ) ; } } if ( strcmp ( d , "%M" ) == 0 || strcmp ( d , "%m" ) == 0 ) { f = 1 ; a = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( a == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { e = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( e == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( e , a , global_c ) ; } } } if ( strcmp ( d , "%L" ) == 0 || strcmp ( d , "%l" ) == 0 ) { sendPacketFlag ( 10 , global_c ) ; f = 1 ; } } free ( g ) ; if ( f == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int a ) { int b = 0 ; global_a = 0 ; global_a = 1 ; for ( b = 0 ; b < a ; b ++ ) { getFDForInput ( ) ; processPacket ( ) ; } } void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } void printMessage ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getSrcHandle ( a , & b ) ; getMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
========== 29 ==========
(1) FILE: ../../cclient.c LINES:20:9 TOKENS:108:161 DIST:3.0

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } 
(2) FILE: ../../server.c LINES:193:7 TOKENS:1224:1277 DIST:0.0

void sendPacketHandle ( int a , char * b ) { int c = strlen ( b ) ; void * d = makePacketHandle ( 12 , c , b ) ; if ( sendPacket ( d , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( d ) ; } 
========== 30 ==========
(1) FILE: ../../chatShared.c LINES:44:13 TOKENS:248:311 DIST:3.3

unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int test ( ) { char * a = "xyz" ; char * b = "Hello world" ; char * c ; char * d ; char * e ; char * f = "abc" ; packetHandle * g = makePacketMssg ( 1 , getHLen ( f ) , f , getHLen ( a ) , a , b ) ; printf ( "%d\n" , headerGetLen ( & ( g -> head ) ) ) ; getDestHandle ( g , & c ) ; getSrcHandle ( g , & e ) ; getMssg ( g , & b ) ; printf ( "%s\n" , c ) ; printf ( "%s\n" , e ) ; printf ( "%s\n" , b ) ; return 0 ; } void headerSetLen ( ) { a -> packetLen = htons ( b + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( a -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { a -> numHandles = htonl ( b ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( a -> numHandles ) ; } void * makePacketHandle ( uint8_t a , uint8_t b , char * c ) { ; f -> head . flag = a ; headerSetLen ( & ( f -> head ) , d ) ; f -> handleLen = b ; memcpy ( & ( f -> handleStart ) , c , b ) ; return e ; } void * makePacketBroadcast ( uint8_t a , uint8_t b , char * c , char * d ) { ; h -> handleLen = b ; memcpy ( & ( h -> handleStart ) , c , b ) ; memcpy ( & ( h -> handleStart ) + b , d , e ) ; return g ; } 
(2) FILE: ../../chatShared.c LINES:38:10 TOKENS:212:271 DIST:0.0

void * makePacketHandle ( uint8_t a , uint8_t b , char * c ) { ; f -> head . flag = a ; headerSetLen ( & ( f -> head ) , d ) ; f -> handleLen = b ; memcpy ( & ( f -> handleStart ) , c , b ) ; return e ; } 
========== 31 ==========
(1) FILE: ../../cclient.c LINES:104:4 TOKENS:710:760 DIST:0.0

if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } 
(2) FILE: ../../server.c LINES:95:4 TOKENS:622:672 DIST:0.0

if ( mySelect ( c , ( ) & b , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } 
========== 32 ==========
(1) FILE: ../../cclient.c LINES:41:6 TOKENS:260:313 DIST:0.0

h -- ; memcpy ( e , a + c , g - 1 ) ; e [ g - 1 ] = 0 ; c += g - 1 ; d = makePacketBroadcast ( 4 , f , global_b , e ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } 
(2) FILE: ../../cclient.c LINES:73:6 TOKENS:510:562 DIST:1.0

while ( j > 0 ) { memcpy ( f , a + e , i - 1 ) ; j -- ; f [ i - 1 ] = 0 ; e += i - 1 ; d = makePacketMssg ( 5 , h , b , g , global_b , f ) ; if ( sendPacket ( d , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( d ) ; } 

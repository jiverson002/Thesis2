========== 1 ==========
(1) FILE: ../../chatShared.c LINES:122:10 TOKENS:874:928 DIST:2.4

unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } void * makePacketMssg ( uint8_t flag , uint8_t destLen , char * destH , uint8_t srcLen , char * srcH , char * mssg ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = destLen ; memcpy ( & ( hPack -> handleStart ) , destH , destLen ) ; * ( ( uint8_t * ) & ( hPack -> handleStart ) + destLen ) = srcLen ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 , srcH , srcLen ) ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 + srcLen , mssg , mssgLen ) ; return packet ; } void getFirstHandle ( void * packet , char * * handle ) { ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } void getDestHandle ( void * packet , char * * handle ) { getFirstHandle ( packet , handle ) ; } void getSrcHandle ( void * packet , char * * handle ) { getSecondHandle ( packet , handle ) ; } void getSecondHandle ( void * packet , char * * handle ) { ; hPack = ( ( void * ) hPack ) + hPack -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } void getMssg ( void * packet , char * * mssg ) { ; unsigned destLen = hPack -> handleLen ; unsigned packetLen = headerGetLen ( packet ) ; unsigned srcLen ; hPack = ( ( void * ) hPack ) + hPack -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; srcLen = hPack -> handleLen ; unsigned mssgLen = packetLen - ( destLen + 1 ) - ( srcLen + 1 ) ; * mssg = malloc ( mssgLen ) ; memcpy ( * mssg , & ( hPack -> handleStart ) + hPack -> handleLen , mssgLen ) ; } void getBroadCastMssg ( void * packet , char * * mssg ) { ; unsigned mssgLen = headerGetLen ( packet ) - ( hPack -> handleLen + 1 ) ; * mssg = malloc ( mssgLen ) ; memcpy ( * mssg , & ( hPack -> handleStart ) + hPack -> handleLen , mssgLen ) ; } uint8_t getHLen ( char * handle ) { unsigned len = strlen ( ( char * ) handle ) ; if ( len > getMaxHLen ( ) ) { printf ( "The handle you entered is too long\n" ) ; exit ( - 1 ) ; } return len ; } uint8_t getMaxHLen ( ) { uint8_t max = 0 ; return max - 1 ; } void sendPacketFlag ( uint8_t flag , int socket ) { ; headerSetLen ( & head , 0 ) ; head . flag = flag ; if ( mySend ( socket , & head , sizeof ( header ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } int sendPacket ( void * packet , int socket ) { ; } 
(2) FILE: ../../server.c LINES:192:8 TOKENS:1175:1226 DIST:0.0

int serverFD ; int * clientFDs = ( ( void * ) 0 ) ; char * * handles = ( ( void * ) 0 ) ; int clientNum = 0 ; unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int main ( int argc , char * argv ) { serverFD = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int fd ) { clientNum ++ ; clientFDs = realloc ( clientFDs , sizeof ( int ) * clientNum ) ; clientFDs [ clientNum - 1 ] = fd ; handles = realloc ( handles , sizeof ( char * ) * clientNum ) ; handles [ clientNum - 1 ] = ( ( void * ) 0 ) ; } void setClientName ( void * packet , int fd ) { int i = 0 ; char * name = ( ( void * ) 0 ) ; getFirstHandle ( packet , & name ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] == fd ) { if ( getFDForName ( name ) != - 1 ) { free ( name ) ; sendPacketFlag ( 3 , clientFDs [ i ] ) ; removeClient ( fd ) ; } else { handles [ i ] = name ; sendPacketFlag ( 2 , clientFDs [ i ] ) ; printf ( "Welcome: %s\n" , handles [ i ] ) ; } return ; } } } int getFDForName ( char * name ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( handles [ i ] != ( ( void * ) 0 ) && strcmp ( name , handles [ i ] ) == 0 ) { return clientFDs [ i ] ; } } return - 1 ; } void removeClient ( int fd ) { int foundFD = 0 ; int i = 0 ; int * newClientFDs ; char * * newHandles ; clientNum -- ; newClientFDs = ( int * ) malloc ( sizeof ( int ) * clientNum ) ; newHandles = ( char * * ) malloc ( sizeof ( char * ) * clientNum ) ; for ( i = 0 ; i <= clientNum ; i ++ ) { if ( clientFDs [ i ] != fd ) { if ( ! foundFD ) { newClientFDs [ i ] = clientFDs [ i ] ; newHandles [ i ] = handles [ i ] ; } else { newClientFDs [ i - 1 ] = clientFDs [ i ] ; newHandles [ i - 1 ] = handles [ i ] ; } } else { foundFD = 1 ; if ( handles [ i ] != ( ( void * ) 0 ) ) { printf ( "Bye %s\n" , handles [ i ] ) ; } free ( handles [ i ] ) ; close ( clientFDs [ i ] ) ; } } free ( handles ) ; free ( clientFDs ) ; handles = newHandles ; clientFDs = newClientFDs ; } int getFDForInput ( ) { ; int maxFD = serverFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( serverFD , & fdvar ) ; if ( clientNum > 0 ) { maxFD = clientFDs [ clientNum - 1 ] + 1 ; } for ( i = 0 ; i < clientNum ; i ++ ) { FD_SET ( clientFDs [ i ] , & fdvar ) ; } if ( mySelect ( maxFD , ( ) & fdvar , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( serverFD , & fdvar ) ) { return serverFD ; } else { for ( i = 0 ; i < clientNum ; i ++ ) { if ( FD_ISSET ( clientFDs [ i ] , & fdvar ) ) { return clientFDs [ i ] ; } } } return - 1 ; } void acceptClient ( ) { int clientFD = tcpAccept ( serverFD ) ; addClient ( clientFD ) ; } void process ( ) { int fdToProcess ; while ( 1 ) { fdToProcess = getFDForInput ( ) ; if ( fdToProcess == serverFD ) { acceptClient ( ) ; } else { processPacket ( fdToProcess ) ; } } } void processPacket ( int fd ) { uint8_t * packet = malloc ( 1000 ) ; int numBytes = 0 ; if ( ( numBytes = myRecv ( fd , packet , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { removeClient ( fd ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( packet , fd ) ; break ; case 8 : sendPacketFlag ( 9 , fd ) ; removeClient ( fd ) ; break ; case 4 : broadCast ( fd , packet ) ; break ; case 5 : forwardMessage ( fd , packet ) ; break ; case 10 : sendPacketHandleAck ( 11 , fd ) ; sendHandles ( fd ) ; break ; default : break ; } free ( packet ) ; } void broadCast ( int senderFD , void * packet ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] != senderFD ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } } void forwardMessage ( int senderFD , void * packet ) { char * dest = ( ( void * ) 0 ) ; int sent = 0 ; int i = 0 ; getDestHandle ( packet , & dest ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( strcmp ( dest , handles [ i ] ) == 0 ) { sent = 1 ; if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } break ; } } if ( sent == 0 ) { sendPacketFlag ( 7 , senderFD ) ; } free ( dest ) ; } void sendPacketHandleAck ( uint8_t flag , int socket ) { ; headerSetLen ( ( ) & head , ( uint16_t ) ( sizeof ( packetHandleAck ) - sizeof ( header ) ) ) ; packetHandleAckSetNum ( & head , clientNum ) ; head . head . flag = flag ; if ( mySend ( socket , & head , sizeof ( packetHandleAck ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( 12 , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
========== 2 ==========
(1) FILE: ../../cclient.c LINES:241:8 TOKENS:1404:1455 DIST:0.0

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } void sendPacketBroadCast ( char * a , int b ) { char * c ; void * d ; int e = strlen ( global_b ) ; int f = 1000 - e - sizeof ( header ) - 1 ; int g = ( strlen ( a ) + 1 ) / f ; int h = 0 ; int i = ( ( strlen ( a ) + 1 ) % f ) + g ; c = malloc ( f ) ; while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } free ( c ) ; c = malloc ( i ) ; memcpy ( c , a + h , i ) ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( c ) ; } void sendPacketMssg ( char * a , char * b , int c ) { char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } free ( d ) ; d = malloc ( k ) ; memcpy ( d , a + j , k ) ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; free ( d ) ; } int getFDForInput ( ) { ; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_c , & a ) ) { return global_c ; } if ( global_a && FD_ISSET ( fileno ( stdin ) , & a ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int a ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; a = getFDForInput ( ) ; if ( a == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { uint8_t * a = malloc ( 1000 ) ; uint8_t * b = a ; int c = 0 ; if ( ( c = myRecv ( global_c , a , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { printf ( "Server terminated\n" ) ; close ( global_c ) ; exit ( 1 ) ; } while ( c > 0 ) { ; } free ( b ) ; } void processInput ( ) { int a = 0 ; unsigned long b = - 1 ; char * c = ( ( void * ) 0 ) ; char * d = ( ( void * ) 0 ) ; char * e = ( ( void * ) 0 ) ; char * f = ( ( void * ) 0 ) ; char * g = ( ( void * ) 0 ) ; getline ( & c , ( size_t * ) & b , stdin ) ; d = c ; e = strtok ( c , " \n\t" ) ; if ( e != ( ( void * ) 0 ) ) { if ( strcmp ( e , "%E" ) == 0 || strcmp ( e , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; a = 1 ; } if ( strcmp ( e , "%B" ) == 0 || strcmp ( e , "%b" ) == 0 ) { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( f , global_c ) ; } a = 1 ; } if ( strcmp ( e , "%M" ) == 0 || strcmp ( e , "%m" ) == 0 ) { g = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( g == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( f , g , global_c ) ; } } a = 1 ; } if ( strcmp ( e , "%L" ) == 0 || strcmp ( e , "%l" ) == 0 ) { sendPacketFlag ( 10 , global_c ) ; a = 1 ; } } free ( d ) ; if ( a == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int a ) { int b = 0 ; global_a = 0 ; for ( b = 0 ; b < a ; b ++ ) { getFDForInput ( ) ; processPacket ( ) ; } global_a = 1 ; } void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } void printMessage ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getSrcHandle ( a , & b ) ; getMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
(2) FILE: ../../cclient.c LINES:250:8 TOKENS:1472:1523 DIST:0.0

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } void sendPacketBroadCast ( char * a , int b ) { char * c ; void * d ; int e = strlen ( global_b ) ; int f = 1000 - e - sizeof ( header ) - 1 ; int g = ( strlen ( a ) + 1 ) / f ; int h = 0 ; int i = ( ( strlen ( a ) + 1 ) % f ) + g ; c = malloc ( f ) ; while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } free ( c ) ; c = malloc ( i ) ; memcpy ( c , a + h , i ) ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( c ) ; } void sendPacketMssg ( char * a , char * b , int c ) { char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } free ( d ) ; d = malloc ( k ) ; memcpy ( d , a + j , k ) ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; free ( d ) ; } int getFDForInput ( ) { ; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_c , & a ) ) { return global_c ; } if ( global_a && FD_ISSET ( fileno ( stdin ) , & a ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int a ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; a = getFDForInput ( ) ; if ( a == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { uint8_t * a = malloc ( 1000 ) ; uint8_t * b = a ; int c = 0 ; if ( ( c = myRecv ( global_c , a , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { printf ( "Server terminated\n" ) ; close ( global_c ) ; exit ( 1 ) ; } while ( c > 0 ) { ; } free ( b ) ; } void processInput ( ) { int a = 0 ; unsigned long b = - 1 ; char * c = ( ( void * ) 0 ) ; char * d = ( ( void * ) 0 ) ; char * e = ( ( void * ) 0 ) ; char * f = ( ( void * ) 0 ) ; char * g = ( ( void * ) 0 ) ; getline ( & c , ( size_t * ) & b , stdin ) ; d = c ; e = strtok ( c , " \n\t" ) ; if ( e != ( ( void * ) 0 ) ) { if ( strcmp ( e , "%E" ) == 0 || strcmp ( e , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; a = 1 ; } if ( strcmp ( e , "%B" ) == 0 || strcmp ( e , "%b" ) == 0 ) { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( f , global_c ) ; } a = 1 ; } if ( strcmp ( e , "%M" ) == 0 || strcmp ( e , "%m" ) == 0 ) { g = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( g == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( f , g , global_c ) ; } } a = 1 ; } if ( strcmp ( e , "%L" ) == 0 || strcmp ( e , "%l" ) == 0 ) { sendPacketFlag ( 10 , global_c ) ; a = 1 ; } } free ( d ) ; if ( a == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int a ) { int b = 0 ; global_a = 0 ; for ( b = 0 ; b < a ; b ++ ) { getFDForInput ( ) ; processPacket ( ) ; } global_a = 1 ; } void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } void printMessage ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getSrcHandle ( a , & b ) ; getMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } void printHandle ( void * a ) { char * b = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; printf ( "  -%s\n" , b ) ; free ( b ) ; } 
========== 3 ==========
(1) FILE: ../../server.c LINES:119:11 TOKENS:777:837 DIST:0.0

int serverFD ; int * clientFDs = ( ( void * ) 0 ) ; char * * handles = ( ( void * ) 0 ) ; int clientNum = 0 ; unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int main ( int argc , char * argv ) { serverFD = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int fd ) { clientNum ++ ; clientFDs = realloc ( clientFDs , sizeof ( int ) * clientNum ) ; clientFDs [ clientNum - 1 ] = fd ; handles = realloc ( handles , sizeof ( char * ) * clientNum ) ; handles [ clientNum - 1 ] = ( ( void * ) 0 ) ; } void setClientName ( void * packet , int fd ) { int i = 0 ; char * name = ( ( void * ) 0 ) ; getFirstHandle ( packet , & name ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] == fd ) { if ( getFDForName ( name ) != - 1 ) { free ( name ) ; sendPacketFlag ( 3 , clientFDs [ i ] ) ; removeClient ( fd ) ; } else { handles [ i ] = name ; sendPacketFlag ( 2 , clientFDs [ i ] ) ; printf ( "Welcome: %s\n" , handles [ i ] ) ; } return ; } } } int getFDForName ( char * name ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( handles [ i ] != ( ( void * ) 0 ) && strcmp ( name , handles [ i ] ) == 0 ) { return clientFDs [ i ] ; } } return - 1 ; } void removeClient ( int fd ) { int foundFD = 0 ; int i = 0 ; int * newClientFDs ; char * * newHandles ; clientNum -- ; newClientFDs = ( int * ) malloc ( sizeof ( int ) * clientNum ) ; newHandles = ( char * * ) malloc ( sizeof ( char * ) * clientNum ) ; for ( i = 0 ; i <= clientNum ; i ++ ) { if ( clientFDs [ i ] != fd ) { if ( ! foundFD ) { newClientFDs [ i ] = clientFDs [ i ] ; newHandles [ i ] = handles [ i ] ; } else { newClientFDs [ i - 1 ] = clientFDs [ i ] ; newHandles [ i - 1 ] = handles [ i ] ; } } else { foundFD = 1 ; if ( handles [ i ] != ( ( void * ) 0 ) ) { printf ( "Bye %s\n" , handles [ i ] ) ; } free ( handles [ i ] ) ; close ( clientFDs [ i ] ) ; } } free ( handles ) ; free ( clientFDs ) ; handles = newHandles ; clientFDs = newClientFDs ; } int getFDForInput ( ) { ; int maxFD = serverFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( serverFD , & fdvar ) ; if ( clientNum > 0 ) { maxFD = clientFDs [ clientNum - 1 ] + 1 ; } for ( i = 0 ; i < clientNum ; i ++ ) { FD_SET ( clientFDs [ i ] , & fdvar ) ; } if ( mySelect ( maxFD , ( ) & fdvar , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( serverFD , & fdvar ) ) { return serverFD ; } else { for ( i = 0 ; i < clientNum ; i ++ ) { if ( FD_ISSET ( clientFDs [ i ] , & fdvar ) ) { return clientFDs [ i ] ; } } } return - 1 ; } void acceptClient ( ) { int clientFD = tcpAccept ( serverFD ) ; addClient ( clientFD ) ; } void process ( ) { int fdToProcess ; while ( 1 ) { fdToProcess = getFDForInput ( ) ; if ( fdToProcess == serverFD ) { acceptClient ( ) ; } else { processPacket ( fdToProcess ) ; } } } void processPacket ( int fd ) { uint8_t * packet = malloc ( 1000 ) ; int numBytes = 0 ; if ( ( numBytes = myRecv ( fd , packet , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { removeClient ( fd ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( packet , fd ) ; break ; case 8 : sendPacketFlag ( 9 , fd ) ; removeClient ( fd ) ; break ; case 4 : broadCast ( fd , packet ) ; break ; case 5 : forwardMessage ( fd , packet ) ; break ; case 10 : sendPacketHandleAck ( 11 , fd ) ; sendHandles ( fd ) ; break ; default : break ; } free ( packet ) ; } 
(2) FILE: ../../cclient.c LINES:123:12 TOKENS:843:904 DIST:3.2

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } void sendPacketBroadCast ( char * a , int b ) { char * c ; void * d ; int e = strlen ( global_b ) ; int f = 1000 - e - sizeof ( header ) - 1 ; int g = ( strlen ( a ) + 1 ) / f ; int h = 0 ; int i = ( ( strlen ( a ) + 1 ) % f ) + g ; c = malloc ( f ) ; while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } free ( c ) ; c = malloc ( i ) ; memcpy ( c , a + h , i ) ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( c ) ; } void sendPacketMssg ( char * a , char * b , int c ) { char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } free ( d ) ; d = malloc ( k ) ; memcpy ( d , a + j , k ) ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; free ( d ) ; } int getFDForInput ( ) { ; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_c , & a ) ) { return global_c ; } if ( global_a && FD_ISSET ( fileno ( stdin ) , & a ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int a ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; a = getFDForInput ( ) ; if ( a == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { uint8_t * a = malloc ( 1000 ) ; uint8_t * b = a ; int c = 0 ; if ( ( c = myRecv ( global_c , a , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { printf ( "Server terminated\n" ) ; close ( global_c ) ; exit ( 1 ) ; } while ( c > 0 ) { ; } free ( b ) ; } 
========== 4 ==========
(1) FILE: ../../cclient.c LINES:85:6 TOKENS:592:648 DIST:2.8

char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } free ( d ) ; d = malloc ( k ) ; memcpy ( d , a + j , k ) ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } 
(2) FILE: ../../cclient.c LINES:50:8 TOKENS:329:385 DIST:0.0

char * c ; void * d ; int e = strlen ( global_b ) ; int f = 1000 - e - sizeof ( header ) - 1 ; int g = ( strlen ( a ) + 1 ) / f ; int h = 0 ; int i = ( ( strlen ( a ) + 1 ) % f ) + g ; c = malloc ( f ) ; while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } free ( c ) ; c = malloc ( i ) ; memcpy ( c , a + h , i ) ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } 
========== 5 ==========
(1) FILE: ../../cclient.c LINES:45:10 TOKENS:303:355 DIST:0.0

char * c ; void * d ; int e = strlen ( global_b ) ; int f = 1000 - e - sizeof ( header ) - 1 ; int g = ( strlen ( a ) + 1 ) / f ; int h = 0 ; int i = ( ( strlen ( a ) + 1 ) % f ) + g ; c = malloc ( f ) ; while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } free ( c ) ; c = malloc ( i ) ; memcpy ( c , a + h , i ) ; 
(2) FILE: ../../cclient.c LINES:77:9 TOKENS:543:596 DIST:3.0

char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } free ( d ) ; 
========== 6 ==========
(1) FILE: ../../chatShared.c LINES:102:6 TOKENS:728:785 DIST:1.4

unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } void * makePacketMssg ( uint8_t flag , uint8_t destLen , char * destH , uint8_t srcLen , char * srcH , char * mssg ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = destLen ; memcpy ( & ( hPack -> handleStart ) , destH , destLen ) ; * ( ( uint8_t * ) & ( hPack -> handleStart ) + destLen ) = srcLen ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 , srcH , srcLen ) ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 + srcLen , mssg , mssgLen ) ; return packet ; } void getFirstHandle ( void * packet , char * * handle ) { ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } void getDestHandle ( void * packet , char * * handle ) { getFirstHandle ( packet , handle ) ; } void getSrcHandle ( void * packet , char * * handle ) { getSecondHandle ( packet , handle ) ; } void getSecondHandle ( void * packet , char * * handle ) { ; hPack = ( ( void * ) hPack ) + hPack -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } void getMssg ( void * packet , char * * mssg ) { ; unsigned destLen = hPack -> handleLen ; unsigned packetLen = headerGetLen ( packet ) ; unsigned srcLen ; hPack = ( ( void * ) hPack ) + hPack -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; srcLen = hPack -> handleLen ; unsigned mssgLen = packetLen - ( destLen + 1 ) - ( srcLen + 1 ) ; * mssg = malloc ( mssgLen ) ; memcpy ( * mssg , & ( hPack -> handleStart ) + hPack -> handleLen , mssgLen ) ; } void getBroadCastMssg ( void * packet , char * * mssg ) { ; unsigned mssgLen = headerGetLen ( packet ) - ( hPack -> handleLen + 1 ) ; * mssg = malloc ( mssgLen ) ; memcpy ( * mssg , & ( hPack -> handleStart ) + hPack -> handleLen , mssgLen ) ; } 
(2) FILE: ../../chatShared.c LINES:104:7 TOKENS:757:812 DIST:3.2

unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } void * makePacketMssg ( uint8_t flag , uint8_t destLen , char * destH , uint8_t srcLen , char * srcH , char * mssg ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = destLen ; memcpy ( & ( hPack -> handleStart ) , destH , destLen ) ; * ( ( uint8_t * ) & ( hPack -> handleStart ) + destLen ) = srcLen ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 , srcH , srcLen ) ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 + srcLen , mssg , mssgLen ) ; return packet ; } void getFirstHandle ( void * packet , char * * handle ) { ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } void getDestHandle ( void * packet , char * * handle ) { getFirstHandle ( packet , handle ) ; } void getSrcHandle ( void * packet , char * * handle ) { getSecondHandle ( packet , handle ) ; } void getSecondHandle ( void * packet , char * * handle ) { ; hPack = ( ( void * ) hPack ) + hPack -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } void getMssg ( void * packet , char * * mssg ) { ; unsigned destLen = hPack -> handleLen ; unsigned packetLen = headerGetLen ( packet ) ; unsigned srcLen ; hPack = ( ( void * ) hPack ) + hPack -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; srcLen = hPack -> handleLen ; unsigned mssgLen = packetLen - ( destLen + 1 ) - ( srcLen + 1 ) ; * mssg = malloc ( mssgLen ) ; memcpy ( * mssg , & ( hPack -> handleStart ) + hPack -> handleLen , mssgLen ) ; } void getBroadCastMssg ( void * packet , char * * mssg ) { ; unsigned mssgLen = headerGetLen ( packet ) - ( hPack -> handleLen + 1 ) ; * mssg = malloc ( mssgLen ) ; memcpy ( * mssg , & ( hPack -> handleStart ) + hPack -> handleLen , mssgLen ) ; } uint8_t getHLen ( char * handle ) { unsigned len = strlen ( ( char * ) handle ) ; if ( len > getMaxHLen ( ) ) { printf ( "The handle you entered is too long\n" ) ; exit ( - 1 ) ; } return len ; } 
========== 7 ==========
(1) FILE: ../../server.c LINES:200:9 TOKENS:1234:1284 DIST:0.0

int serverFD ; int * clientFDs = ( ( void * ) 0 ) ; char * * handles = ( ( void * ) 0 ) ; int clientNum = 0 ; unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int main ( int argc , char * argv ) { serverFD = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int fd ) { clientNum ++ ; clientFDs = realloc ( clientFDs , sizeof ( int ) * clientNum ) ; clientFDs [ clientNum - 1 ] = fd ; handles = realloc ( handles , sizeof ( char * ) * clientNum ) ; handles [ clientNum - 1 ] = ( ( void * ) 0 ) ; } void setClientName ( void * packet , int fd ) { int i = 0 ; char * name = ( ( void * ) 0 ) ; getFirstHandle ( packet , & name ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] == fd ) { if ( getFDForName ( name ) != - 1 ) { free ( name ) ; sendPacketFlag ( 3 , clientFDs [ i ] ) ; removeClient ( fd ) ; } else { handles [ i ] = name ; sendPacketFlag ( 2 , clientFDs [ i ] ) ; printf ( "Welcome: %s\n" , handles [ i ] ) ; } return ; } } } int getFDForName ( char * name ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( handles [ i ] != ( ( void * ) 0 ) && strcmp ( name , handles [ i ] ) == 0 ) { return clientFDs [ i ] ; } } return - 1 ; } void removeClient ( int fd ) { int foundFD = 0 ; int i = 0 ; int * newClientFDs ; char * * newHandles ; clientNum -- ; newClientFDs = ( int * ) malloc ( sizeof ( int ) * clientNum ) ; newHandles = ( char * * ) malloc ( sizeof ( char * ) * clientNum ) ; for ( i = 0 ; i <= clientNum ; i ++ ) { if ( clientFDs [ i ] != fd ) { if ( ! foundFD ) { newClientFDs [ i ] = clientFDs [ i ] ; newHandles [ i ] = handles [ i ] ; } else { newClientFDs [ i - 1 ] = clientFDs [ i ] ; newHandles [ i - 1 ] = handles [ i ] ; } } else { foundFD = 1 ; if ( handles [ i ] != ( ( void * ) 0 ) ) { printf ( "Bye %s\n" , handles [ i ] ) ; } free ( handles [ i ] ) ; close ( clientFDs [ i ] ) ; } } free ( handles ) ; free ( clientFDs ) ; handles = newHandles ; clientFDs = newClientFDs ; } int getFDForInput ( ) { ; int maxFD = serverFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( serverFD , & fdvar ) ; if ( clientNum > 0 ) { maxFD = clientFDs [ clientNum - 1 ] + 1 ; } for ( i = 0 ; i < clientNum ; i ++ ) { FD_SET ( clientFDs [ i ] , & fdvar ) ; } if ( mySelect ( maxFD , ( ) & fdvar , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( serverFD , & fdvar ) ) { return serverFD ; } else { for ( i = 0 ; i < clientNum ; i ++ ) { if ( FD_ISSET ( clientFDs [ i ] , & fdvar ) ) { return clientFDs [ i ] ; } } } return - 1 ; } void acceptClient ( ) { int clientFD = tcpAccept ( serverFD ) ; addClient ( clientFD ) ; } void process ( ) { int fdToProcess ; while ( 1 ) { fdToProcess = getFDForInput ( ) ; if ( fdToProcess == serverFD ) { acceptClient ( ) ; } else { processPacket ( fdToProcess ) ; } } } void processPacket ( int fd ) { uint8_t * packet = malloc ( 1000 ) ; int numBytes = 0 ; if ( ( numBytes = myRecv ( fd , packet , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { removeClient ( fd ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( packet , fd ) ; break ; case 8 : sendPacketFlag ( 9 , fd ) ; removeClient ( fd ) ; break ; case 4 : broadCast ( fd , packet ) ; break ; case 5 : forwardMessage ( fd , packet ) ; break ; case 10 : sendPacketHandleAck ( 11 , fd ) ; sendHandles ( fd ) ; break ; default : break ; } free ( packet ) ; } void broadCast ( int senderFD , void * packet ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] != senderFD ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } } void forwardMessage ( int senderFD , void * packet ) { char * dest = ( ( void * ) 0 ) ; int sent = 0 ; int i = 0 ; getDestHandle ( packet , & dest ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( strcmp ( dest , handles [ i ] ) == 0 ) { sent = 1 ; if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } break ; } } if ( sent == 0 ) { sendPacketFlag ( 7 , senderFD ) ; } free ( dest ) ; } void sendPacketHandleAck ( uint8_t flag , int socket ) { ; headerSetLen ( ( ) & head , ( uint16_t ) ( sizeof ( packetHandleAck ) - sizeof ( header ) ) ) ; packetHandleAckSetNum ( & head , clientNum ) ; head . head . flag = flag ; if ( mySend ( socket , & head , sizeof ( packetHandleAck ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( 12 , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } void sendHandles ( int socket ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { sendPacketHandle ( socket , handles [ i ] ) ; } } 
(2) FILE: ../../cclient.c LINES:22:8 TOKENS:115:166 DIST:1.4

void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } 
========== 8 ==========
(1) FILE: ../../server.c LINES:136:13 TOKENS:868:918 DIST:0.0

case 1 : setClientName ( packet , fd ) ; break ; case 8 : sendPacketFlag ( 9 , fd ) ; removeClient ( fd ) ; break ; case 4 : broadCast ( fd , packet ) ; break ; case 5 : forwardMessage ( fd , packet ) ; break ; 
(2) FILE: ../../server.c LINES:142:15 TOKENS:893:945 DIST:3.0

uint8_t * packet = malloc ( 1000 ) ; int numBytes = 0 ; if ( ( numBytes = myRecv ( fd , packet , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { removeClient ( fd ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( packet , fd ) ; break ; case 8 : sendPacketFlag ( 9 , fd ) ; removeClient ( fd ) ; break ; case 4 : broadCast ( fd , packet ) ; break ; case 5 : forwardMessage ( fd , packet ) ; break ; case 10 : sendPacketHandleAck ( 11 , fd ) ; sendHandles ( fd ) ; break ; default : break ; } free ( packet ) ; 
========== 9 ==========
(1) FILE: ../../cclient.c LINES:19:10 TOKENS:103:161 DIST:0.0

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } 
(2) FILE: ../../server.c LINES:196:10 TOKENS:1216:1277 DIST:2.6

int serverFD ; int * clientFDs = ( ( void * ) 0 ) ; char * * handles = ( ( void * ) 0 ) ; int clientNum = 0 ; unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int main ( int argc , char * argv ) { serverFD = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int fd ) { clientNum ++ ; clientFDs = realloc ( clientFDs , sizeof ( int ) * clientNum ) ; clientFDs [ clientNum - 1 ] = fd ; handles = realloc ( handles , sizeof ( char * ) * clientNum ) ; handles [ clientNum - 1 ] = ( ( void * ) 0 ) ; } void setClientName ( void * packet , int fd ) { int i = 0 ; char * name = ( ( void * ) 0 ) ; getFirstHandle ( packet , & name ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] == fd ) { if ( getFDForName ( name ) != - 1 ) { free ( name ) ; sendPacketFlag ( 3 , clientFDs [ i ] ) ; removeClient ( fd ) ; } else { handles [ i ] = name ; sendPacketFlag ( 2 , clientFDs [ i ] ) ; printf ( "Welcome: %s\n" , handles [ i ] ) ; } return ; } } } int getFDForName ( char * name ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( handles [ i ] != ( ( void * ) 0 ) && strcmp ( name , handles [ i ] ) == 0 ) { return clientFDs [ i ] ; } } return - 1 ; } void removeClient ( int fd ) { int foundFD = 0 ; int i = 0 ; int * newClientFDs ; char * * newHandles ; clientNum -- ; newClientFDs = ( int * ) malloc ( sizeof ( int ) * clientNum ) ; newHandles = ( char * * ) malloc ( sizeof ( char * ) * clientNum ) ; for ( i = 0 ; i <= clientNum ; i ++ ) { if ( clientFDs [ i ] != fd ) { if ( ! foundFD ) { newClientFDs [ i ] = clientFDs [ i ] ; newHandles [ i ] = handles [ i ] ; } else { newClientFDs [ i - 1 ] = clientFDs [ i ] ; newHandles [ i - 1 ] = handles [ i ] ; } } else { foundFD = 1 ; if ( handles [ i ] != ( ( void * ) 0 ) ) { printf ( "Bye %s\n" , handles [ i ] ) ; } free ( handles [ i ] ) ; close ( clientFDs [ i ] ) ; } } free ( handles ) ; free ( clientFDs ) ; handles = newHandles ; clientFDs = newClientFDs ; } int getFDForInput ( ) { ; int maxFD = serverFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( serverFD , & fdvar ) ; if ( clientNum > 0 ) { maxFD = clientFDs [ clientNum - 1 ] + 1 ; } for ( i = 0 ; i < clientNum ; i ++ ) { FD_SET ( clientFDs [ i ] , & fdvar ) ; } if ( mySelect ( maxFD , ( ) & fdvar , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( serverFD , & fdvar ) ) { return serverFD ; } else { for ( i = 0 ; i < clientNum ; i ++ ) { if ( FD_ISSET ( clientFDs [ i ] , & fdvar ) ) { return clientFDs [ i ] ; } } } return - 1 ; } void acceptClient ( ) { int clientFD = tcpAccept ( serverFD ) ; addClient ( clientFD ) ; } void process ( ) { int fdToProcess ; while ( 1 ) { fdToProcess = getFDForInput ( ) ; if ( fdToProcess == serverFD ) { acceptClient ( ) ; } else { processPacket ( fdToProcess ) ; } } } void processPacket ( int fd ) { uint8_t * packet = malloc ( 1000 ) ; int numBytes = 0 ; if ( ( numBytes = myRecv ( fd , packet , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { removeClient ( fd ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( packet , fd ) ; break ; case 8 : sendPacketFlag ( 9 , fd ) ; removeClient ( fd ) ; break ; case 4 : broadCast ( fd , packet ) ; break ; case 5 : forwardMessage ( fd , packet ) ; break ; case 10 : sendPacketHandleAck ( 11 , fd ) ; sendHandles ( fd ) ; break ; default : break ; } free ( packet ) ; } void broadCast ( int senderFD , void * packet ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] != senderFD ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } } void forwardMessage ( int senderFD , void * packet ) { char * dest = ( ( void * ) 0 ) ; int sent = 0 ; int i = 0 ; getDestHandle ( packet , & dest ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( strcmp ( dest , handles [ i ] ) == 0 ) { sent = 1 ; if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } break ; } } if ( sent == 0 ) { sendPacketFlag ( 7 , senderFD ) ; } free ( dest ) ; } void sendPacketHandleAck ( uint8_t flag , int socket ) { ; headerSetLen ( ( ) & head , ( uint16_t ) ( sizeof ( packetHandleAck ) - sizeof ( header ) ) ) ; packetHandleAckSetNum ( & head , clientNum ) ; head . head . flag = flag ; if ( mySend ( socket , & head , sizeof ( packetHandleAck ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( 12 , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
========== 10 ==========
(1) FILE: ../../cclient.c LINES:239:9 TOKENS:1384:1451 DIST:0.0

void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
(2) FILE: ../../cclient.c LINES:248:9 TOKENS:1452:1519 DIST:0.0

void printMessage ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getSrcHandle ( a , & b ) ; getMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
========== 11 ==========
(1) FILE: ../../cclient.c LINES:38:5 TOKENS:228:281 DIST:0.0

char * c ; void * d ; int e = strlen ( global_b ) ; int f = 1000 - e - sizeof ( header ) - 1 ; int g = ( strlen ( a ) + 1 ) / f ; int h = 0 ; int i = ( ( strlen ( a ) + 1 ) % f ) + g ; c = malloc ( f ) ; while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } 
(2) FILE: ../../cclient.c LINES:70:6 TOKENS:478:536 DIST:3.5

char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } 
========== 12 ==========
(1) FILE: ../../cclient.c LINES:202:7 TOKENS:1165:1224 DIST:3.3

if ( strcmp ( e , "%E" ) == 0 || strcmp ( e , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; a = 1 ; } if ( strcmp ( e , "%B" ) == 0 || strcmp ( e , "%b" ) == 0 ) { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( f , global_c ) ; } a = 1 ; } if ( strcmp ( e , "%M" ) == 0 || strcmp ( e , "%m" ) == 0 ) { g = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( g == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( f , g , global_c ) ; } } a = 1 ; } 
(2) FILE: ../../cclient.c LINES:195:7 TOKENS:1103:1162 DIST:0.0

if ( strcmp ( e , "%E" ) == 0 || strcmp ( e , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; a = 1 ; } if ( strcmp ( e , "%B" ) == 0 || strcmp ( e , "%b" ) == 0 ) { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( f , global_c ) ; } a = 1 ; } 
========== 13 ==========
(1) FILE: ../../cclient.c LINES:101:4 TOKENS:695:747 DIST:2.4

; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } 
(2) FILE: ../../server.c LINES:93:4 TOKENS:610:666 DIST:0.0

; int maxFD = serverFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( serverFD , & fdvar ) ; if ( clientNum > 0 ) { maxFD = clientFDs [ clientNum - 1 ] + 1 ; } for ( i = 0 ; i < clientNum ; i ++ ) { FD_SET ( clientFDs [ i ] , & fdvar ) ; } if ( mySelect ( maxFD , ( ) & fdvar , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } 
========== 14 ==========
(1) FILE: ../../server.c LINES:199:8 TOKENS:1227:1282 DIST:0.0

void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( 12 , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
(2) FILE: ../../cclient.c LINES:19:10 TOKENS:103:161 DIST:3.2

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } 
========== 15 ==========
(1) FILE: ../../chatShared.c LINES:42:7 TOKENS:228:280 DIST:3.3

unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } 
(2) FILE: ../../chatShared.c LINES:38:8 TOKENS:212:267 DIST:0.0

void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } 
(3) FILE: ../../chatShared.c LINES:60:9 TOKENS:340:398 DIST:3.3

void * makePacketMssg ( uint8_t flag , uint8_t destLen , char * destH , uint8_t srcLen , char * srcH , char * mssg ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = destLen ; memcpy ( & ( hPack -> handleStart ) , destH , destLen ) ; * ( ( uint8_t * ) & ( hPack -> handleStart ) + destLen ) = srcLen ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 , srcH , srcLen ) ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 + srcLen , mssg , mssgLen ) ; return packet ; } 
========== 16 ==========
(1) FILE: ../../cclient.c LINES:31:6 TOKENS:169:222 DIST:0.0

void sendPacketBroadCast ( char * a , int b ) { char * c ; void * d ; int e = strlen ( global_b ) ; int f = 1000 - e - sizeof ( header ) - 1 ; int g = ( strlen ( a ) + 1 ) / f ; int h = 0 ; int i = ( ( strlen ( a ) + 1 ) % f ) + g ; c = malloc ( f ) ; while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } free ( c ) ; c = malloc ( i ) ; memcpy ( c , a + h , i ) ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( c ) ; } 
(2) FILE: ../../cclient.c LINES:63:6 TOKENS:408:463 DIST:3.2

void sendPacketMssg ( char * a , char * b , int c ) { char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } free ( d ) ; d = malloc ( k ) ; memcpy ( d , a + j , k ) ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; free ( d ) ; } 
========== 17 ==========
(1) FILE: ../../cclient.c LINES:47:10 TOKENS:318:378 DIST:0.0

char * c ; void * d ; int e = strlen ( global_b ) ; int f = 1000 - e - sizeof ( header ) - 1 ; int g = ( strlen ( a ) + 1 ) / f ; int h = 0 ; int i = ( ( strlen ( a ) + 1 ) % f ) + g ; c = malloc ( f ) ; while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } free ( c ) ; c = malloc ( i ) ; memcpy ( c , a + h , i ) ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } 
(2) FILE: ../../cclient.c LINES:82:8 TOKENS:583:641 DIST:3.2

char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } free ( d ) ; d = malloc ( k ) ; memcpy ( d , a + j , k ) ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } 
========== 18 ==========
(1) FILE: ../../cclient.c LINES:245:8 TOKENS:1441:1499 DIST:3.2

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } void sendPacketBroadCast ( char * a , int b ) { char * c ; void * d ; int e = strlen ( global_b ) ; int f = 1000 - e - sizeof ( header ) - 1 ; int g = ( strlen ( a ) + 1 ) / f ; int h = 0 ; int i = ( ( strlen ( a ) + 1 ) % f ) + g ; c = malloc ( f ) ; while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } free ( c ) ; c = malloc ( i ) ; memcpy ( c , a + h , i ) ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( c ) ; } void sendPacketMssg ( char * a , char * b , int c ) { char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } free ( d ) ; d = malloc ( k ) ; memcpy ( d , a + j , k ) ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; free ( d ) ; } int getFDForInput ( ) { ; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_c , & a ) ) { return global_c ; } if ( global_a && FD_ISSET ( fileno ( stdin ) , & a ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int a ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; a = getFDForInput ( ) ; if ( a == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { uint8_t * a = malloc ( 1000 ) ; uint8_t * b = a ; int c = 0 ; if ( ( c = myRecv ( global_c , a , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { printf ( "Server terminated\n" ) ; close ( global_c ) ; exit ( 1 ) ; } while ( c > 0 ) { ; } free ( b ) ; } void processInput ( ) { int a = 0 ; unsigned long b = - 1 ; char * c = ( ( void * ) 0 ) ; char * d = ( ( void * ) 0 ) ; char * e = ( ( void * ) 0 ) ; char * f = ( ( void * ) 0 ) ; char * g = ( ( void * ) 0 ) ; getline ( & c , ( size_t * ) & b , stdin ) ; d = c ; e = strtok ( c , " \n\t" ) ; if ( e != ( ( void * ) 0 ) ) { if ( strcmp ( e , "%E" ) == 0 || strcmp ( e , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; a = 1 ; } if ( strcmp ( e , "%B" ) == 0 || strcmp ( e , "%b" ) == 0 ) { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( f , global_c ) ; } a = 1 ; } if ( strcmp ( e , "%M" ) == 0 || strcmp ( e , "%m" ) == 0 ) { g = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( g == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( f , g , global_c ) ; } } a = 1 ; } if ( strcmp ( e , "%L" ) == 0 || strcmp ( e , "%l" ) == 0 ) { sendPacketFlag ( 10 , global_c ) ; a = 1 ; } } free ( d ) ; if ( a == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int a ) { int b = 0 ; global_a = 0 ; for ( b = 0 ; b < a ; b ++ ) { getFDForInput ( ) ; processPacket ( ) ; } global_a = 1 ; } void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } void printMessage ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getSrcHandle ( a , & b ) ; getMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
(2) FILE: ../../cclient.c LINES:235:9 TOKENS:1374:1431 DIST:0.0

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } void sendPacketBroadCast ( char * a , int b ) { char * c ; void * d ; int e = strlen ( global_b ) ; int f = 1000 - e - sizeof ( header ) - 1 ; int g = ( strlen ( a ) + 1 ) / f ; int h = 0 ; int i = ( ( strlen ( a ) + 1 ) % f ) + g ; c = malloc ( f ) ; while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } free ( c ) ; c = malloc ( i ) ; memcpy ( c , a + h , i ) ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( c ) ; } void sendPacketMssg ( char * a , char * b , int c ) { char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } free ( d ) ; d = malloc ( k ) ; memcpy ( d , a + j , k ) ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; free ( d ) ; } int getFDForInput ( ) { ; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_c , & a ) ) { return global_c ; } if ( global_a && FD_ISSET ( fileno ( stdin ) , & a ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int a ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; a = getFDForInput ( ) ; if ( a == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { uint8_t * a = malloc ( 1000 ) ; uint8_t * b = a ; int c = 0 ; if ( ( c = myRecv ( global_c , a , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( c == 0 ) { printf ( "Server terminated\n" ) ; close ( global_c ) ; exit ( 1 ) ; } while ( c > 0 ) { ; } free ( b ) ; } void processInput ( ) { int a = 0 ; unsigned long b = - 1 ; char * c = ( ( void * ) 0 ) ; char * d = ( ( void * ) 0 ) ; char * e = ( ( void * ) 0 ) ; char * f = ( ( void * ) 0 ) ; char * g = ( ( void * ) 0 ) ; getline ( & c , ( size_t * ) & b , stdin ) ; d = c ; e = strtok ( c , " \n\t" ) ; if ( e != ( ( void * ) 0 ) ) { if ( strcmp ( e , "%E" ) == 0 || strcmp ( e , "%e" ) == 0 ) { sendPacketFlag ( 8 , global_c ) ; a = 1 ; } if ( strcmp ( e , "%B" ) == 0 || strcmp ( e , "%b" ) == 0 ) { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( f , global_c ) ; } a = 1 ; } if ( strcmp ( e , "%M" ) == 0 || strcmp ( e , "%m" ) == 0 ) { g = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( g == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( f , g , global_c ) ; } } a = 1 ; } if ( strcmp ( e , "%L" ) == 0 || strcmp ( e , "%l" ) == 0 ) { sendPacketFlag ( 10 , global_c ) ; a = 1 ; } } free ( d ) ; if ( a == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int a ) { int b = 0 ; global_a = 0 ; for ( b = 0 ; b < a ; b ++ ) { getFDForInput ( ) ; processPacket ( ) ; } global_a = 1 ; } void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
========== 19 ==========
(1) FILE: ../../cclient.c LINES:73:12 TOKENS:514:591 DIST:2.8

{ memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } 
(2) FILE: ../../cclient.c LINES:40:12 TOKENS:253:332 DIST:0.0

while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } 
========== 20 ==========
(1) FILE: ../../cclient.c LINES:22:9 TOKENS:111:167 DIST:2.0

void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } 
(2) FILE: ../../server.c LINES:196:10 TOKENS:1216:1277 DIST:2.0

int serverFD ; int * clientFDs = ( ( void * ) 0 ) ; char * * handles = ( ( void * ) 0 ) ; int clientNum = 0 ; unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int main ( int argc , char * argv ) { serverFD = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int fd ) { clientNum ++ ; clientFDs = realloc ( clientFDs , sizeof ( int ) * clientNum ) ; clientFDs [ clientNum - 1 ] = fd ; handles = realloc ( handles , sizeof ( char * ) * clientNum ) ; handles [ clientNum - 1 ] = ( ( void * ) 0 ) ; } void setClientName ( void * packet , int fd ) { int i = 0 ; char * name = ( ( void * ) 0 ) ; getFirstHandle ( packet , & name ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] == fd ) { if ( getFDForName ( name ) != - 1 ) { free ( name ) ; sendPacketFlag ( 3 , clientFDs [ i ] ) ; removeClient ( fd ) ; } else { handles [ i ] = name ; sendPacketFlag ( 2 , clientFDs [ i ] ) ; printf ( "Welcome: %s\n" , handles [ i ] ) ; } return ; } } } int getFDForName ( char * name ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( handles [ i ] != ( ( void * ) 0 ) && strcmp ( name , handles [ i ] ) == 0 ) { return clientFDs [ i ] ; } } return - 1 ; } void removeClient ( int fd ) { int foundFD = 0 ; int i = 0 ; int * newClientFDs ; char * * newHandles ; clientNum -- ; newClientFDs = ( int * ) malloc ( sizeof ( int ) * clientNum ) ; newHandles = ( char * * ) malloc ( sizeof ( char * ) * clientNum ) ; for ( i = 0 ; i <= clientNum ; i ++ ) { if ( clientFDs [ i ] != fd ) { if ( ! foundFD ) { newClientFDs [ i ] = clientFDs [ i ] ; newHandles [ i ] = handles [ i ] ; } else { newClientFDs [ i - 1 ] = clientFDs [ i ] ; newHandles [ i - 1 ] = handles [ i ] ; } } else { foundFD = 1 ; if ( handles [ i ] != ( ( void * ) 0 ) ) { printf ( "Bye %s\n" , handles [ i ] ) ; } free ( handles [ i ] ) ; close ( clientFDs [ i ] ) ; } } free ( handles ) ; free ( clientFDs ) ; handles = newHandles ; clientFDs = newClientFDs ; } int getFDForInput ( ) { ; int maxFD = serverFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( serverFD , & fdvar ) ; if ( clientNum > 0 ) { maxFD = clientFDs [ clientNum - 1 ] + 1 ; } for ( i = 0 ; i < clientNum ; i ++ ) { FD_SET ( clientFDs [ i ] , & fdvar ) ; } if ( mySelect ( maxFD , ( ) & fdvar , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( serverFD , & fdvar ) ) { return serverFD ; } else { for ( i = 0 ; i < clientNum ; i ++ ) { if ( FD_ISSET ( clientFDs [ i ] , & fdvar ) ) { return clientFDs [ i ] ; } } } return - 1 ; } void acceptClient ( ) { int clientFD = tcpAccept ( serverFD ) ; addClient ( clientFD ) ; } void process ( ) { int fdToProcess ; while ( 1 ) { fdToProcess = getFDForInput ( ) ; if ( fdToProcess == serverFD ) { acceptClient ( ) ; } else { processPacket ( fdToProcess ) ; } } } void processPacket ( int fd ) { uint8_t * packet = malloc ( 1000 ) ; int numBytes = 0 ; if ( ( numBytes = myRecv ( fd , packet , 1000 , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { removeClient ( fd ) ; } switch ( ( ) -> flag ) { case 1 : setClientName ( packet , fd ) ; break ; case 8 : sendPacketFlag ( 9 , fd ) ; removeClient ( fd ) ; break ; case 4 : broadCast ( fd , packet ) ; break ; case 5 : forwardMessage ( fd , packet ) ; break ; case 10 : sendPacketHandleAck ( 11 , fd ) ; sendHandles ( fd ) ; break ; default : break ; } free ( packet ) ; } void broadCast ( int senderFD , void * packet ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] != senderFD ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } } void forwardMessage ( int senderFD , void * packet ) { char * dest = ( ( void * ) 0 ) ; int sent = 0 ; int i = 0 ; getDestHandle ( packet , & dest ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( strcmp ( dest , handles [ i ] ) == 0 ) { sent = 1 ; if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } break ; } } if ( sent == 0 ) { sendPacketFlag ( 7 , senderFD ) ; } free ( dest ) ; } void sendPacketHandleAck ( uint8_t flag , int socket ) { ; headerSetLen ( ( ) & head , ( uint16_t ) ( sizeof ( packetHandleAck ) - sizeof ( header ) ) ) ; packetHandleAckSetNum ( & head , clientNum ) ; head . head . flag = flag ; if ( mySend ( socket , & head , sizeof ( packetHandleAck ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( 12 , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
========== 21 ==========
(1) FILE: ../../cclient.c LINES:20:9 TOKENS:108:161 DIST:3.0

int global_c = 0 ; int global_a = 0 ; char * global_b = ( ( void * ) 0 ) ; unsigned int __bswap_32 ( unsigned int a ) { ; } __uint64_t __bswap_64 ( __uint64_t a ) { ; } int main ( int a , char * b ) { if ( a != 4 ) { printf ( "usage: %s handle host-name port-number \n" , b [ 0 ] ) ; exit ( 1 ) ; } global_c = tcpClientSetup ( b [ 2 ] , b [ 3 ] ) ; global_b = b [ 1 ] ; sendPacketConnection ( global_c ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int a ) { int b = strlen ( global_b ) ; void * c = makePacketHandle ( 1 , b , global_b ) ; if ( sendPacket ( c , a ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( c ) ; } 
(2) FILE: ../../server.c LINES:199:7 TOKENS:1224:1277 DIST:0.0

void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( 12 , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
========== 22 ==========
(1) FILE: ../../server.c LINES:24:7 TOKENS:148:211 DIST:1.7

void setClientName ( void * packet , int fd ) { int i = 0 ; char * name = ( ( void * ) 0 ) ; getFirstHandle ( packet , & name ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] == fd ) { if ( getFDForName ( name ) != - 1 ) { free ( name ) ; sendPacketFlag ( 3 , clientFDs [ i ] ) ; removeClient ( fd ) ; } else { handles [ i ] = name ; sendPacketFlag ( 2 , clientFDs [ i ] ) ; printf ( "Welcome: %s\n" , handles [ i ] ) ; } return ; } } } 
(2) FILE: ../../server.c LINES:169:7 TOKENS:1020:1083 DIST:3.5

void forwardMessage ( int senderFD , void * packet ) { char * dest = ( ( void * ) 0 ) ; int sent = 0 ; int i = 0 ; getDestHandle ( packet , & dest ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( strcmp ( dest , handles [ i ] ) == 0 ) { sent = 1 ; if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } break ; } } if ( sent == 0 ) { sendPacketFlag ( 7 , senderFD ) ; } free ( dest ) ; } 
========== 23 ==========
(1) FILE: ../../cclient.c LINES:210:9 TOKENS:1233:1285 DIST:2.4

g = strtok ( ( ( void * ) 0 ) , " \n\t" ) ; if ( g == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( f , g , global_c ) ; } } a = 1 ; 
(2) FILE: ../../cclient.c LINES:197:9 TOKENS:1128:1177 DIST:0.0

{ f = strtok ( ( ( void * ) 0 ) , "\n" ) ; if ( f == ( ( void * ) 0 ) ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( f , global_c ) ; } a = 1 ; } 
========== 24 ==========
(1) FILE: ../../chatShared.c LINES:38:11 TOKENS:217:272 DIST:2.8

unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } 
(2) FILE: ../../chatShared.c LINES:44:13 TOKENS:248:311 DIST:3.3

unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } 
========== 25 ==========
(1) FILE: ../../cclient.c LINES:104:5 TOKENS:712:769 DIST:2.8

; int b = global_c + 1 ; FD_ZERO ( & a ) ; FD_SET ( global_c , & a ) ; if ( global_a ) { FD_SET ( fileno ( stdin ) , & a ) ; } if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( global_c , & a ) ) { return global_c ; } 
(2) FILE: ../../server.c LINES:93:4 TOKENS:610:666 DIST:0.0

; int maxFD = serverFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( serverFD , & fdvar ) ; if ( clientNum > 0 ) { maxFD = clientFDs [ clientNum - 1 ] + 1 ; } for ( i = 0 ; i < clientNum ; i ++ ) { FD_SET ( clientFDs [ i ] , & fdvar ) ; } if ( mySelect ( maxFD , ( ) & fdvar , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } 
========== 26 ==========
(1) FILE: ../../cclient.c LINES:31:7 TOKENS:175:227 DIST:1.4

void sendPacketBroadCast ( char * a , int b ) { char * c ; void * d ; int e = strlen ( global_b ) ; int f = 1000 - e - sizeof ( header ) - 1 ; int g = ( strlen ( a ) + 1 ) / f ; int h = 0 ; int i = ( ( strlen ( a ) + 1 ) % f ) + g ; c = malloc ( f ) ; while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } free ( c ) ; c = malloc ( i ) ; memcpy ( c , a + h , i ) ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; free ( c ) ; } 
(2) FILE: ../../cclient.c LINES:63:6 TOKENS:408:463 DIST:3.2

void sendPacketMssg ( char * a , char * b , int c ) { char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } free ( d ) ; d = malloc ( k ) ; memcpy ( d , a + j , k ) ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; free ( d ) ; } 
========== 27 ==========
(1) FILE: ../../chatShared.c LINES:44:13 TOKENS:248:311 DIST:3.3

unsigned int __bswap_32 ( unsigned int __bsx ) { ; } __uint64_t __bswap_64 ( __uint64_t __bsx ) { ; } int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } 
(2) FILE: ../../chatShared.c LINES:38:10 TOKENS:212:271 DIST:0.0

void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } 
========== 28 ==========
(1) FILE: ../../cclient.c LINES:104:4 TOKENS:710:760 DIST:0.0

if ( mySelect ( b , ( ) & a , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } 
(2) FILE: ../../server.c LINES:95:4 TOKENS:622:672 DIST:0.0

if ( mySelect ( maxFD , ( ) & fdvar , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } 
========== 29 ==========
(1) FILE: ../../cclient.c LINES:239:6 TOKENS:1384:1440 DIST:1.7

void printBroadcast ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getFirstHandle ( a , & b ) ; getBroadCastMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
(2) FILE: ../../cclient.c LINES:248:6 TOKENS:1452:1508 DIST:1.7

void printMessage ( void * a ) { char * b = ( ( void * ) 0 ) ; char * c = ( ( void * ) 0 ) ; getSrcHandle ( a , & b ) ; getMssg ( a , & c ) ; printf ( "%s: %s\n" , b , c ) ; free ( c ) ; free ( b ) ; } 
========== 30 ==========
(1) FILE: ../../cclient.c LINES:40:6 TOKENS:253:310 DIST:0.0

while ( g > 0 ) { memcpy ( c , a + h , f - 1 ) ; c [ f - 1 ] = 0 ; h += f - 1 ; d = makePacketBroadcast ( 4 , e , global_b , c ) ; if ( sendPacket ( d , b ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( d ) ; g -- ; } 
(2) FILE: ../../cclient.c LINES:72:6 TOKENS:501:559 DIST:3.6

char * d ; void * e ; int f = strlen ( global_b ) ; int g = strlen ( b ) ; int h = 1000 - ( f + 1 ) - ( g + 1 ) - sizeof ( header ) ; int i = ( strlen ( a ) + 1 ) / h ; int j = 0 ; int k = ( ( strlen ( a ) + 1 ) % h ) + i ; d = malloc ( h ) ; while ( i > 0 ) { memcpy ( d , a + j , h - 1 ) ; d [ h - 1 ] = 0 ; j += h - 1 ; e = makePacketMssg ( 5 , g , b , f , global_b , d ) ; if ( sendPacket ( e , c ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( e ) ; i -- ; } 

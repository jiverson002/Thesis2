========== 1 ==========
(1) FILE: ../../cclient.c LINES:47:8 TOKENS:151:203 DIST:1.4

void sendPacketBroadCast ( char * mssg , int socket ) { char * toSend ; void * packet ; int hLen = strlen ( myHandle ) ; int maxMssgLen = MAXBUF - hLen - sizeof ( header ) - 1 ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } 
(2) FILE: ../../cclient.c LINES:85:6 TOKENS:384:439 DIST:3.2

void sendPacketMssg ( char * mssg , char * dest , int socket ) { char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } 
========== 2 ==========
(1) FILE: ../../cclient.c LINES:251:11 TOKENS:1131:1191 DIST:3.0

if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } if ( strcmp ( cmd , "%M" ) == 0 || strcmp ( cmd , "%m" ) == 0 ) { dst = strtok ( NULL , " \n\t" ) ; if ( dst == NULL ) { printf ( "Invalid command\n" ) ; } else { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( mssg , dst , socketFD ) ; } } didWork = 1 ; } if ( strcmp ( cmd , "%L" ) == 0 || strcmp ( cmd , "%l" ) == 0 ) { sendPacketFlag ( CLIENT_HANDLES , socketFD ) ; didWork = 1 ; } 
(2) FILE: ../../cclient.c LINES:238:9 TOKENS:1030:1087 DIST:0.0

if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } 
========== 3 ==========
(1) FILE: ../../cclient.c LINES:253:10 TOKENS:1144:1200 DIST:0.0

if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } if ( strcmp ( cmd , "%M" ) == 0 || strcmp ( cmd , "%m" ) == 0 ) { dst = strtok ( NULL , " \n\t" ) ; if ( dst == NULL ) { printf ( "Invalid command\n" ) ; } else { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( mssg , dst , socketFD ) ; } } didWork = 1 ; } if ( strcmp ( cmd , "%L" ) == 0 || strcmp ( cmd , "%l" ) == 0 ) { sendPacketFlag ( CLIENT_HANDLES , socketFD ) ; didWork = 1 ; } 
(2) FILE: ../../cclient.c LINES:255:14 TOKENS:1155:1211 DIST:3.3

int didWork = 0 ; unsigned long inputNum = - 1 ; char * line = NULL ; char * lineToFree = NULL ; char * cmd = NULL ; char * mssg = NULL ; char * dst = NULL ; getline ( & line , ( size_t * ) & inputNum , stdin ) ; lineToFree = line ; cmd = strtok ( line , " \n\t" ) ; if ( cmd != NULL ) { if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } if ( strcmp ( cmd , "%M" ) == 0 || strcmp ( cmd , "%m" ) == 0 ) { dst = strtok ( NULL , " \n\t" ) ; if ( dst == NULL ) { printf ( "Invalid command\n" ) ; } else { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( mssg , dst , socketFD ) ; } } didWork = 1 ; } if ( strcmp ( cmd , "%L" ) == 0 || strcmp ( cmd , "%l" ) == 0 ) { sendPacketFlag ( CLIENT_HANDLES , socketFD ) ; didWork = 1 ; } } free ( lineToFree ) ; 
========== 4 ==========
(1) FILE: ../../server.c LINES:247:8 TOKENS:1153:1209 DIST:1.7

void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( SERVER_HANDLE , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
(2) FILE: ../../cclient.c LINES:33:11 TOKENS:79:137 DIST:3.0

int socketFD = 0 ; int isConnected = 0 ; char * myHandle = NULL ; int main ( int argc , char * argv [ ] ) { if ( argc != 4 ) { printf ( "usage: %s handle host-name port-number \n" , argv [ 0 ] ) ; exit ( 1 ) ; } socketFD = tcpClientSetup ( argv [ 2 ] , argv [ 3 ] ) ; myHandle = argv [ 1 ] ; sendPacketConnection ( socketFD ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int socket ) { int hLen = strlen ( myHandle ) ; void * packet = makePacketHandle ( CLIENT_CONNECT , hLen , myHandle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
========== 5 ==========
(1) FILE: ../../cclient.c LINES:287:10 TOKENS:1284:1339 DIST:3.2

int socketFD = 0 ; int isConnected = 0 ; char * myHandle = NULL ; int main ( int argc , char * argv [ ] ) { if ( argc != 4 ) { printf ( "usage: %s handle host-name port-number \n" , argv [ 0 ] ) ; exit ( 1 ) ; } socketFD = tcpClientSetup ( argv [ 2 ] , argv [ 3 ] ) ; myHandle = argv [ 1 ] ; sendPacketConnection ( socketFD ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int socket ) { int hLen = strlen ( myHandle ) ; void * packet = makePacketHandle ( CLIENT_CONNECT , hLen , myHandle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } void sendPacketBroadCast ( char * mssg , int socket ) { char * toSend ; void * packet ; int hLen = strlen ( myHandle ) ; int maxMssgLen = MAXBUF - hLen - sizeof ( header ) - 1 ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } void sendPacketMssg ( char * mssg , char * dest , int socket ) { char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } int getFDForInput ( ) { ; int maxFD = socketFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( socketFD , & fdvar ) ; if ( isConnected ) { FD_SET ( fileno ( stdin ) , & fdvar ) ; } if ( select ( maxFD , ( ) & fdvar , NULL , NULL , NULL ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( socketFD , & fdvar ) ) { return socketFD ; } if ( isConnected && FD_ISSET ( fileno ( stdin ) , & fdvar ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int fdToProcess ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; fdToProcess = getFDForInput ( ) ; if ( fdToProcess == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { uint8_t * packet = malloc ( MAXBUF ) ; uint8_t * toFree = packet ; int numBytes = 0 ; if ( ( numBytes = recv ( socketFD , packet , MAXBUF , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { printf ( "Server terminated\n" ) ; close ( socketFD ) ; exit ( 1 ) ; } while ( numBytes > 0 ) { ; } free ( toFree ) ; } void processInput ( ) { int didWork = 0 ; unsigned long inputNum = - 1 ; char * line = NULL ; char * lineToFree = NULL ; char * cmd = NULL ; char * mssg = NULL ; char * dst = NULL ; getline ( & line , ( size_t * ) & inputNum , stdin ) ; lineToFree = line ; cmd = strtok ( line , " \n\t" ) ; if ( cmd != NULL ) { if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } if ( strcmp ( cmd , "%M" ) == 0 || strcmp ( cmd , "%m" ) == 0 ) { dst = strtok ( NULL , " \n\t" ) ; if ( dst == NULL ) { printf ( "Invalid command\n" ) ; } else { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( mssg , dst , socketFD ) ; } } didWork = 1 ; } if ( strcmp ( cmd , "%L" ) == 0 || strcmp ( cmd , "%l" ) == 0 ) { sendPacketFlag ( CLIENT_HANDLES , socketFD ) ; didWork = 1 ; } } free ( lineToFree ) ; if ( didWork == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int handleNum ) { int i = 0 ; isConnected = 0 ; for ( i = 0 ; i < handleNum ; i ++ ) { getFDForInput ( ) ; processPacket ( ) ; } isConnected = 1 ; } void printBroadcast ( void * packet ) { char * sender = NULL ; char * mssg = NULL ; getFirstHandle ( packet , & sender ) ; getBroadCastMssg ( packet , & mssg ) ; printf ( "%s: %s\n" , sender , mssg ) ; free ( mssg ) ; free ( sender ) ; } void printMessage ( void * packet ) { char * sender = NULL ; char * mssg = NULL ; getSrcHandle ( packet , & sender ) ; getMssg ( packet , & mssg ) ; printf ( "%s: %s\n" , sender , mssg ) ; free ( mssg ) ; free ( sender ) ; } 
(2) FILE: ../../cclient.c LINES:280:11 TOKENS:1260:1314 DIST:0.0

int socketFD = 0 ; int isConnected = 0 ; char * myHandle = NULL ; int main ( int argc , char * argv [ ] ) { if ( argc != 4 ) { printf ( "usage: %s handle host-name port-number \n" , argv [ 0 ] ) ; exit ( 1 ) ; } socketFD = tcpClientSetup ( argv [ 2 ] , argv [ 3 ] ) ; myHandle = argv [ 1 ] ; sendPacketConnection ( socketFD ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int socket ) { int hLen = strlen ( myHandle ) ; void * packet = makePacketHandle ( CLIENT_CONNECT , hLen , myHandle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } void sendPacketBroadCast ( char * mssg , int socket ) { char * toSend ; void * packet ; int hLen = strlen ( myHandle ) ; int maxMssgLen = MAXBUF - hLen - sizeof ( header ) - 1 ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } void sendPacketMssg ( char * mssg , char * dest , int socket ) { char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } int getFDForInput ( ) { ; int maxFD = socketFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( socketFD , & fdvar ) ; if ( isConnected ) { FD_SET ( fileno ( stdin ) , & fdvar ) ; } if ( select ( maxFD , ( ) & fdvar , NULL , NULL , NULL ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( socketFD , & fdvar ) ) { return socketFD ; } if ( isConnected && FD_ISSET ( fileno ( stdin ) , & fdvar ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int fdToProcess ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; fdToProcess = getFDForInput ( ) ; if ( fdToProcess == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { uint8_t * packet = malloc ( MAXBUF ) ; uint8_t * toFree = packet ; int numBytes = 0 ; if ( ( numBytes = recv ( socketFD , packet , MAXBUF , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { printf ( "Server terminated\n" ) ; close ( socketFD ) ; exit ( 1 ) ; } while ( numBytes > 0 ) { ; } free ( toFree ) ; } void processInput ( ) { int didWork = 0 ; unsigned long inputNum = - 1 ; char * line = NULL ; char * lineToFree = NULL ; char * cmd = NULL ; char * mssg = NULL ; char * dst = NULL ; getline ( & line , ( size_t * ) & inputNum , stdin ) ; lineToFree = line ; cmd = strtok ( line , " \n\t" ) ; if ( cmd != NULL ) { if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } if ( strcmp ( cmd , "%M" ) == 0 || strcmp ( cmd , "%m" ) == 0 ) { dst = strtok ( NULL , " \n\t" ) ; if ( dst == NULL ) { printf ( "Invalid command\n" ) ; } else { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( mssg , dst , socketFD ) ; } } didWork = 1 ; } if ( strcmp ( cmd , "%L" ) == 0 || strcmp ( cmd , "%l" ) == 0 ) { sendPacketFlag ( CLIENT_HANDLES , socketFD ) ; didWork = 1 ; } } free ( lineToFree ) ; if ( didWork == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int handleNum ) { int i = 0 ; isConnected = 0 ; for ( i = 0 ; i < handleNum ; i ++ ) { getFDForInput ( ) ; processPacket ( ) ; } isConnected = 1 ; } void printBroadcast ( void * packet ) { char * sender = NULL ; char * mssg = NULL ; getFirstHandle ( packet , & sender ) ; getBroadCastMssg ( packet , & mssg ) ; printf ( "%s: %s\n" , sender , mssg ) ; free ( mssg ) ; free ( sender ) ; } 
(3) FILE: ../../cclient.c LINES:297:10 TOKENS:1340:1395 DIST:3.2

int socketFD = 0 ; int isConnected = 0 ; char * myHandle = NULL ; int main ( int argc , char * argv [ ] ) { if ( argc != 4 ) { printf ( "usage: %s handle host-name port-number \n" , argv [ 0 ] ) ; exit ( 1 ) ; } socketFD = tcpClientSetup ( argv [ 2 ] , argv [ 3 ] ) ; myHandle = argv [ 1 ] ; sendPacketConnection ( socketFD ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int socket ) { int hLen = strlen ( myHandle ) ; void * packet = makePacketHandle ( CLIENT_CONNECT , hLen , myHandle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } void sendPacketBroadCast ( char * mssg , int socket ) { char * toSend ; void * packet ; int hLen = strlen ( myHandle ) ; int maxMssgLen = MAXBUF - hLen - sizeof ( header ) - 1 ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } void sendPacketMssg ( char * mssg , char * dest , int socket ) { char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } int getFDForInput ( ) { ; int maxFD = socketFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( socketFD , & fdvar ) ; if ( isConnected ) { FD_SET ( fileno ( stdin ) , & fdvar ) ; } if ( select ( maxFD , ( ) & fdvar , NULL , NULL , NULL ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( socketFD , & fdvar ) ) { return socketFD ; } if ( isConnected && FD_ISSET ( fileno ( stdin ) , & fdvar ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int fdToProcess ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; fdToProcess = getFDForInput ( ) ; if ( fdToProcess == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { uint8_t * packet = malloc ( MAXBUF ) ; uint8_t * toFree = packet ; int numBytes = 0 ; if ( ( numBytes = recv ( socketFD , packet , MAXBUF , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { printf ( "Server terminated\n" ) ; close ( socketFD ) ; exit ( 1 ) ; } while ( numBytes > 0 ) { ; } free ( toFree ) ; } void processInput ( ) { int didWork = 0 ; unsigned long inputNum = - 1 ; char * line = NULL ; char * lineToFree = NULL ; char * cmd = NULL ; char * mssg = NULL ; char * dst = NULL ; getline ( & line , ( size_t * ) & inputNum , stdin ) ; lineToFree = line ; cmd = strtok ( line , " \n\t" ) ; if ( cmd != NULL ) { if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } if ( strcmp ( cmd , "%M" ) == 0 || strcmp ( cmd , "%m" ) == 0 ) { dst = strtok ( NULL , " \n\t" ) ; if ( dst == NULL ) { printf ( "Invalid command\n" ) ; } else { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( mssg , dst , socketFD ) ; } } didWork = 1 ; } if ( strcmp ( cmd , "%L" ) == 0 || strcmp ( cmd , "%l" ) == 0 ) { sendPacketFlag ( CLIENT_HANDLES , socketFD ) ; didWork = 1 ; } } free ( lineToFree ) ; if ( didWork == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int handleNum ) { int i = 0 ; isConnected = 0 ; for ( i = 0 ; i < handleNum ; i ++ ) { getFDForInput ( ) ; processPacket ( ) ; } isConnected = 1 ; } void printBroadcast ( void * packet ) { char * sender = NULL ; char * mssg = NULL ; getFirstHandle ( packet , & sender ) ; getBroadCastMssg ( packet , & mssg ) ; printf ( "%s: %s\n" , sender , mssg ) ; free ( mssg ) ; free ( sender ) ; } void printMessage ( void * packet ) { char * sender = NULL ; char * mssg = NULL ; getSrcHandle ( packet , & sender ) ; getMssg ( packet , & mssg ) ; printf ( "%s: %s\n" , sender , mssg ) ; free ( mssg ) ; free ( sender ) ; } void printHandle ( void * packet ) { char * handle = NULL ; getFirstHandle ( packet , & handle ) ; printf ( "  -%s\n" , handle ) ; free ( handle ) ; } 
========== 6 ==========
(1) FILE: ../../cclient.c LINES:285:11 TOKENS:1275:1327 DIST:2.4

int socketFD = 0 ; int isConnected = 0 ; char * myHandle = NULL ; int main ( int argc , char * argv [ ] ) { if ( argc != 4 ) { printf ( "usage: %s handle host-name port-number \n" , argv [ 0 ] ) ; exit ( 1 ) ; } socketFD = tcpClientSetup ( argv [ 2 ] , argv [ 3 ] ) ; myHandle = argv [ 1 ] ; sendPacketConnection ( socketFD ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int socket ) { int hLen = strlen ( myHandle ) ; void * packet = makePacketHandle ( CLIENT_CONNECT , hLen , myHandle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } void sendPacketBroadCast ( char * mssg , int socket ) { char * toSend ; void * packet ; int hLen = strlen ( myHandle ) ; int maxMssgLen = MAXBUF - hLen - sizeof ( header ) - 1 ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } void sendPacketMssg ( char * mssg , char * dest , int socket ) { char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } int getFDForInput ( ) { ; int maxFD = socketFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( socketFD , & fdvar ) ; if ( isConnected ) { FD_SET ( fileno ( stdin ) , & fdvar ) ; } if ( select ( maxFD , ( ) & fdvar , NULL , NULL , NULL ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( socketFD , & fdvar ) ) { return socketFD ; } if ( isConnected && FD_ISSET ( fileno ( stdin ) , & fdvar ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int fdToProcess ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; fdToProcess = getFDForInput ( ) ; if ( fdToProcess == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { uint8_t * packet = malloc ( MAXBUF ) ; uint8_t * toFree = packet ; int numBytes = 0 ; if ( ( numBytes = recv ( socketFD , packet , MAXBUF , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { printf ( "Server terminated\n" ) ; close ( socketFD ) ; exit ( 1 ) ; } while ( numBytes > 0 ) { ; } free ( toFree ) ; } void processInput ( ) { int didWork = 0 ; unsigned long inputNum = - 1 ; char * line = NULL ; char * lineToFree = NULL ; char * cmd = NULL ; char * mssg = NULL ; char * dst = NULL ; getline ( & line , ( size_t * ) & inputNum , stdin ) ; lineToFree = line ; cmd = strtok ( line , " \n\t" ) ; if ( cmd != NULL ) { if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } if ( strcmp ( cmd , "%M" ) == 0 || strcmp ( cmd , "%m" ) == 0 ) { dst = strtok ( NULL , " \n\t" ) ; if ( dst == NULL ) { printf ( "Invalid command\n" ) ; } else { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( mssg , dst , socketFD ) ; } } didWork = 1 ; } if ( strcmp ( cmd , "%L" ) == 0 || strcmp ( cmd , "%l" ) == 0 ) { sendPacketFlag ( CLIENT_HANDLES , socketFD ) ; didWork = 1 ; } } free ( lineToFree ) ; if ( didWork == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int handleNum ) { int i = 0 ; isConnected = 0 ; for ( i = 0 ; i < handleNum ; i ++ ) { getFDForInput ( ) ; processPacket ( ) ; } isConnected = 1 ; } void printBroadcast ( void * packet ) { char * sender = NULL ; char * mssg = NULL ; getFirstHandle ( packet , & sender ) ; getBroadCastMssg ( packet , & mssg ) ; printf ( "%s: %s\n" , sender , mssg ) ; free ( mssg ) ; free ( sender ) ; } void printMessage ( void * packet ) { char * sender = NULL ; char * mssg = NULL ; getSrcHandle ( packet , & sender ) ; getMssg ( packet , & mssg ) ; printf ( "%s: %s\n" , sender , mssg ) ; free ( mssg ) ; free ( sender ) ; } 
(2) FILE: ../../cclient.c LINES:295:11 TOKENS:1331:1383 DIST:2.4

int socketFD = 0 ; int isConnected = 0 ; char * myHandle = NULL ; int main ( int argc , char * argv [ ] ) { if ( argc != 4 ) { printf ( "usage: %s handle host-name port-number \n" , argv [ 0 ] ) ; exit ( 1 ) ; } socketFD = tcpClientSetup ( argv [ 2 ] , argv [ 3 ] ) ; myHandle = argv [ 1 ] ; sendPacketConnection ( socketFD ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int socket ) { int hLen = strlen ( myHandle ) ; void * packet = makePacketHandle ( CLIENT_CONNECT , hLen , myHandle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } void sendPacketBroadCast ( char * mssg , int socket ) { char * toSend ; void * packet ; int hLen = strlen ( myHandle ) ; int maxMssgLen = MAXBUF - hLen - sizeof ( header ) - 1 ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } void sendPacketMssg ( char * mssg , char * dest , int socket ) { char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } int getFDForInput ( ) { ; int maxFD = socketFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( socketFD , & fdvar ) ; if ( isConnected ) { FD_SET ( fileno ( stdin ) , & fdvar ) ; } if ( select ( maxFD , ( ) & fdvar , NULL , NULL , NULL ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( socketFD , & fdvar ) ) { return socketFD ; } if ( isConnected && FD_ISSET ( fileno ( stdin ) , & fdvar ) ) { return fileno ( stdin ) ; } return - 1 ; } void process ( ) { int fdToProcess ; while ( 1 ) { printf ( "$: " ) ; fflush ( stdout ) ; fdToProcess = getFDForInput ( ) ; if ( fdToProcess == fileno ( stdin ) ) { processInput ( ) ; } else { printf ( "\n" ) ; processPacket ( ) ; } } } void processPacket ( ) { uint8_t * packet = malloc ( MAXBUF ) ; uint8_t * toFree = packet ; int numBytes = 0 ; if ( ( numBytes = recv ( socketFD , packet , MAXBUF , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { printf ( "Server terminated\n" ) ; close ( socketFD ) ; exit ( 1 ) ; } while ( numBytes > 0 ) { ; } free ( toFree ) ; } void processInput ( ) { int didWork = 0 ; unsigned long inputNum = - 1 ; char * line = NULL ; char * lineToFree = NULL ; char * cmd = NULL ; char * mssg = NULL ; char * dst = NULL ; getline ( & line , ( size_t * ) & inputNum , stdin ) ; lineToFree = line ; cmd = strtok ( line , " \n\t" ) ; if ( cmd != NULL ) { if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } if ( strcmp ( cmd , "%M" ) == 0 || strcmp ( cmd , "%m" ) == 0 ) { dst = strtok ( NULL , " \n\t" ) ; if ( dst == NULL ) { printf ( "Invalid command\n" ) ; } else { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( mssg , dst , socketFD ) ; } } didWork = 1 ; } if ( strcmp ( cmd , "%L" ) == 0 || strcmp ( cmd , "%l" ) == 0 ) { sendPacketFlag ( CLIENT_HANDLES , socketFD ) ; didWork = 1 ; } } free ( lineToFree ) ; if ( didWork == 0 ) { printf ( "Invalid command\n" ) ; } } void processHandles ( int handleNum ) { int i = 0 ; isConnected = 0 ; for ( i = 0 ; i < handleNum ; i ++ ) { getFDForInput ( ) ; processPacket ( ) ; } isConnected = 1 ; } void printBroadcast ( void * packet ) { char * sender = NULL ; char * mssg = NULL ; getFirstHandle ( packet , & sender ) ; getBroadCastMssg ( packet , & mssg ) ; printf ( "%s: %s\n" , sender , mssg ) ; free ( mssg ) ; free ( sender ) ; } void printMessage ( void * packet ) { char * sender = NULL ; char * mssg = NULL ; getSrcHandle ( packet , & sender ) ; getMssg ( packet , & mssg ) ; printf ( "%s: %s\n" , sender , mssg ) ; free ( mssg ) ; free ( sender ) ; } void printHandle ( void * packet ) { char * handle = NULL ; getFirstHandle ( packet , & handle ) ; printf ( "  -%s\n" , handle ) ; free ( handle ) ; } 
========== 7 ==========
(1) FILE: ../../cclient.c LINES:47:7 TOKENS:145:198 DIST:0.0

void sendPacketBroadCast ( char * mssg , int socket ) { char * toSend ; void * packet ; int hLen = strlen ( myHandle ) ; int maxMssgLen = MAXBUF - hLen - sizeof ( header ) - 1 ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } 
(2) FILE: ../../cclient.c LINES:85:6 TOKENS:384:439 DIST:3.2

void sendPacketMssg ( char * mssg , char * dest , int socket ) { char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; free ( toSend ) ; } 
========== 8 ==========
(1) FILE: ../../cclient.c LINES:34:10 TOKENS:84:137 DIST:3.2

int socketFD = 0 ; int isConnected = 0 ; char * myHandle = NULL ; int main ( int argc , char * argv [ ] ) { if ( argc != 4 ) { printf ( "usage: %s handle host-name port-number \n" , argv [ 0 ] ) ; exit ( 1 ) ; } socketFD = tcpClientSetup ( argv [ 2 ] , argv [ 3 ] ) ; myHandle = argv [ 1 ] ; sendPacketConnection ( socketFD ) ; process ( ) ; return 0 ; } void sendPacketConnection ( int socket ) { int hLen = strlen ( myHandle ) ; void * packet = makePacketHandle ( CLIENT_CONNECT , hLen , myHandle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
(2) FILE: ../../server.c LINES:249:10 TOKENS:1169:1222 DIST:3.2

int serverFD ; int * clientFDs = NULL ; char * * handles = NULL ; int clientNum = 0 ; int main ( int argc , char * argv [ ] ) { serverFD = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int fd ) { clientNum ++ ; clientFDs = realloc ( clientFDs , sizeof ( int ) * clientNum ) ; clientFDs [ clientNum - 1 ] = fd ; handles = realloc ( handles , sizeof ( char * ) * clientNum ) ; handles [ clientNum - 1 ] = NULL ; } void setClientName ( void * packet , int fd ) { int i = 0 ; char * name = NULL ; getFirstHandle ( packet , & name ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] == fd ) { if ( getFDForName ( name ) != - 1 ) { free ( name ) ; sendPacketFlag ( CONNECT_ERROR , clientFDs [ i ] ) ; removeClient ( fd ) ; } else { handles [ i ] = name ; sendPacketFlag ( CONNECT_ACK , clientFDs [ i ] ) ; printf ( "Welcome: %s\n" , handles [ i ] ) ; } return ; } } } int getFDForName ( char * name ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( handles [ i ] != NULL && strcmp ( name , handles [ i ] ) == 0 ) { return clientFDs [ i ] ; } } return - 1 ; } void removeClient ( int fd ) { int i = 0 ; int * newClientFDs ; char * * newHandles ; int foundFD = 0 ; clientNum -- ; newClientFDs = ( int * ) malloc ( sizeof ( int ) * clientNum ) ; newHandles = ( char * * ) malloc ( sizeof ( char * ) * clientNum ) ; for ( i = 0 ; i <= clientNum ; i ++ ) { if ( clientFDs [ i ] != fd ) { if ( ! foundFD ) { newClientFDs [ i ] = clientFDs [ i ] ; newHandles [ i ] = handles [ i ] ; } else { newClientFDs [ i - 1 ] = clientFDs [ i ] ; newHandles [ i - 1 ] = handles [ i ] ; } } else { foundFD = 1 ; if ( handles [ i ] != NULL ) { printf ( "Bye %s\n" , handles [ i ] ) ; } free ( handles [ i ] ) ; close ( clientFDs [ i ] ) ; } } free ( handles ) ; free ( clientFDs ) ; handles = newHandles ; clientFDs = newClientFDs ; } int getFDForInput ( ) { ; int i = 0 ; int maxFD = serverFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( serverFD , & fdvar ) ; for ( i = 0 ; i < clientNum ; i ++ ) { FD_SET ( clientFDs [ i ] , & fdvar ) ; } if ( clientNum > 0 ) { maxFD = clientFDs [ clientNum - 1 ] + 1 ; } if ( select ( maxFD , ( ) & fdvar , NULL , NULL , NULL ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( serverFD , & fdvar ) ) { return serverFD ; } else { for ( i = 0 ; i < clientNum ; i ++ ) { if ( FD_ISSET ( clientFDs [ i ] , & fdvar ) ) { return clientFDs [ i ] ; } } } return - 1 ; } void acceptClient ( ) { int clientFD = tcpAccept ( serverFD ) ; addClient ( clientFD ) ; } void process ( ) { int fdToProcess ; while ( 1 ) { fdToProcess = getFDForInput ( ) ; if ( fdToProcess == serverFD ) { acceptClient ( ) ; } else { processPacket ( fdToProcess ) ; } } } void processPacket ( int fd ) { uint8_t * packet = malloc ( MAXBUF ) ; int numBytes = 0 ; if ( ( numBytes = recv ( fd , packet , MAXBUF , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { removeClient ( fd ) ; } switch ( ( ) -> flag ) { case CLIENT_CONNECT : setClientName ( packet , fd ) ; break ; case CLIENT_EXIT : sendPacketFlag ( EXIT_ACK , fd ) ; removeClient ( fd ) ; break ; case CLIENT_BROADCAST : broadCast ( fd , packet ) ; break ; case CLIENT_MESSAGE : forwardMessage ( fd , packet ) ; break ; case CLIENT_HANDLES : sendPacketHandleAck ( HANDLES_ACK , fd ) ; sendHandles ( fd ) ; break ; default : break ; } free ( packet ) ; } void broadCast ( int senderFD , void * packet ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] != senderFD ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } } void forwardMessage ( int senderFD , void * packet ) { int i = 0 ; char * dest = NULL ; int sent = 0 ; getDestHandle ( packet , & dest ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( strcmp ( dest , handles [ i ] ) == 0 ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } sent = 1 ; break ; } } if ( sent == 0 ) { sendPacketFlag ( MESSAGE_ERROR , senderFD ) ; } free ( dest ) ; } void sendPacketHandleAck ( uint8_t flag , int socket ) { ; headerSetLen ( ( ) & head , ( uint16_t ) ( sizeof ( packetHandleAck ) - sizeof ( header ) ) ) ; packetHandleAckSetNum ( & head , clientNum ) ; head . head . flag = flag ; if ( send ( socket , & head , sizeof ( packetHandleAck ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( SERVER_HANDLE , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } void sendHandles ( int socket ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { sendPacketHandle ( socket , handles [ i ] ) ; } } 
(3) FILE: ../../server.c LINES:247:7 TOKENS:1150:1204 DIST:0.0

void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( SERVER_HANDLE , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
========== 9 ==========
(1) FILE: ../../cclient.c LINES:37:8 TOKENS:91:142 DIST:0.0

void sendPacketConnection ( int socket ) { int hLen = strlen ( myHandle ) ; void * packet = makePacketHandle ( CLIENT_CONNECT , hLen , myHandle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
(2) FILE: ../../server.c LINES:247:8 TOKENS:1158:1209 DIST:0.0

void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( SERVER_HANDLE , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
========== 10 ==========
(1) FILE: ../../cclient.c LINES:236:9 TOKENS:1025:1082 DIST:2.4

if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } 
(2) FILE: ../../cclient.c LINES:251:11 TOKENS:1131:1191 DIST:3.0

if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } if ( strcmp ( cmd , "%M" ) == 0 || strcmp ( cmd , "%m" ) == 0 ) { dst = strtok ( NULL , " \n\t" ) ; if ( dst == NULL ) { printf ( "Invalid command\n" ) ; } else { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( mssg , dst , socketFD ) ; } } didWork = 1 ; } if ( strcmp ( cmd , "%L" ) == 0 || strcmp ( cmd , "%l" ) == 0 ) { sendPacketFlag ( CLIENT_HANDLES , socketFD ) ; didWork = 1 ; } 
========== 11 ==========
(1) FILE: ../../chatShared.c LINES:45:15 TOKENS:197:252 DIST:2.8

int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } 
(2) FILE: ../../chatShared.c LINES:52:18 TOKENS:228:291 DIST:3.3

int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } 
========== 12 ==========
(1) FILE: ../../chatShared.c LINES:45:13 TOKENS:192:251 DIST:0.0

void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } 
(2) FILE: ../../chatShared.c LINES:52:18 TOKENS:228:291 DIST:3.3

int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } 
========== 13 ==========
(1) FILE: ../../chatShared.c LINES:98:9 TOKENS:443:498 DIST:2.0

int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } void * makePacketMssg ( uint8_t flag , uint8_t destLen , char * destH , uint8_t srcLen , char * srcH , char * mssg ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = destLen ; memcpy ( & ( hPack -> handleStart ) , destH , destLen ) ; * ( ( uint8_t * ) & ( hPack -> handleStart ) + destLen ) = srcLen ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 , srcH , srcLen ) ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 + srcLen , mssg , mssgLen ) ; return packet ; } void getFirstHandle ( void * packet , char * * handle ) { ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } void getDestHandle ( void * packet , char * * handle ) { getFirstHandle ( packet , handle ) ; } 
(2) FILE: ../../chatShared.c LINES:91:13 TOKENS:436:494 DIST:2.4

int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } void * makePacketMssg ( uint8_t flag , uint8_t destLen , char * destH , uint8_t srcLen , char * srcH , char * mssg ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = destLen ; memcpy ( & ( hPack -> handleStart ) , destH , destLen ) ; * ( ( uint8_t * ) & ( hPack -> handleStart ) + destLen ) = srcLen ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 , srcH , srcLen ) ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 + srcLen , mssg , mssgLen ) ; return packet ; } void getFirstHandle ( void * packet , char * * handle ) { ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } 
========== 14 ==========
(1) FILE: ../../chatShared.c LINES:147:8 TOKENS:737:792 DIST:3.2

int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } void * makePacketMssg ( uint8_t flag , uint8_t destLen , char * destH , uint8_t srcLen , char * srcH , char * mssg ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = destLen ; memcpy ( & ( hPack -> handleStart ) , destH , destLen ) ; * ( ( uint8_t * ) & ( hPack -> handleStart ) + destLen ) = srcLen ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 , srcH , srcLen ) ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 + srcLen , mssg , mssgLen ) ; return packet ; } void getFirstHandle ( void * packet , char * * handle ) { ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } void getDestHandle ( void * packet , char * * handle ) { getFirstHandle ( packet , handle ) ; } void getSrcHandle ( void * packet , char * * handle ) { getSecondHandle ( packet , handle ) ; } void getSecondHandle ( void * packet , char * * handle ) { ; hPack = ( ( void * ) hPack ) + hPack -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } void getMssg ( void * packet , char * * mssg ) { ; unsigned destLen = hPack -> handleLen ; unsigned packetLen = headerGetLen ( packet ) ; unsigned srcLen ; hPack = ( ( void * ) hPack ) + hPack -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; srcLen = hPack -> handleLen ; unsigned mssgLen = packetLen - ( destLen + 1 ) - ( srcLen + 1 ) ; * mssg = malloc ( mssgLen ) ; memcpy ( * mssg , & ( hPack -> handleStart ) + hPack -> handleLen , mssgLen ) ; } void getBroadCastMssg ( void * packet , char * * mssg ) { ; unsigned mssgLen = headerGetLen ( packet ) - ( hPack -> handleLen + 1 ) ; * mssg = malloc ( mssgLen ) ; memcpy ( * mssg , & ( hPack -> handleStart ) + hPack -> handleLen , mssgLen ) ; } uint8_t getHLen ( char * handle ) { unsigned len = strlen ( ( char * ) handle ) ; if ( len > getMaxHLen ( ) ) { printf ( "The handle you entered is too long\n" ) ; exit ( - 1 ) ; } return len ; } 
(2) FILE: ../../chatShared.c LINES:140:11 TOKENS:708:765 DIST:1.4

int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } void * makePacketMssg ( uint8_t flag , uint8_t destLen , char * destH , uint8_t srcLen , char * srcH , char * mssg ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = destLen ; memcpy ( & ( hPack -> handleStart ) , destH , destLen ) ; * ( ( uint8_t * ) & ( hPack -> handleStart ) + destLen ) = srcLen ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 , srcH , srcLen ) ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 + srcLen , mssg , mssgLen ) ; return packet ; } void getFirstHandle ( void * packet , char * * handle ) { ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } void getDestHandle ( void * packet , char * * handle ) { getFirstHandle ( packet , handle ) ; } void getSrcHandle ( void * packet , char * * handle ) { getSecondHandle ( packet , handle ) ; } void getSecondHandle ( void * packet , char * * handle ) { ; hPack = ( ( void * ) hPack ) + hPack -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; * handle = malloc ( hPack -> handleLen + 1 ) ; memcpy ( * handle , & ( hPack -> handleStart ) , hPack -> handleLen ) ; ( * handle ) [ hPack -> handleLen ] = 0 ; } void getMssg ( void * packet , char * * mssg ) { ; unsigned destLen = hPack -> handleLen ; unsigned packetLen = headerGetLen ( packet ) ; unsigned srcLen ; hPack = ( ( void * ) hPack ) + hPack -> handleLen + sizeof ( packetHandle ) - 1 - sizeof ( header ) ; srcLen = hPack -> handleLen ; unsigned mssgLen = packetLen - ( destLen + 1 ) - ( srcLen + 1 ) ; * mssg = malloc ( mssgLen ) ; memcpy ( * mssg , & ( hPack -> handleStart ) + hPack -> handleLen , mssgLen ) ; } void getBroadCastMssg ( void * packet , char * * mssg ) { ; unsigned mssgLen = headerGetLen ( packet ) - ( hPack -> handleLen + 1 ) ; * mssg = malloc ( mssgLen ) ; memcpy ( * mssg , & ( hPack -> handleStart ) + hPack -> handleLen , mssgLen ) ; } 
========== 15 ==========
(1) FILE: ../../cclient.c LINES:67:10 TOKENS:294:354 DIST:0.0

char * toSend ; void * packet ; int hLen = strlen ( myHandle ) ; int maxMssgLen = MAXBUF - hLen - sizeof ( header ) - 1 ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } 
(2) FILE: ../../cclient.c LINES:109:9 TOKENS:559:617 DIST:3.2

char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } 
========== 16 ==========
(1) FILE: ../../cclient.c LINES:60:6 TOKENS:229:286 DIST:0.0

while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } 
(2) FILE: ../../cclient.c LINES:98:7 TOKENS:477:535 DIST:3.6

char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } 
========== 17 ==========
(1) FILE: ../../cclient.c LINES:37:9 TOKENS:87:143 DIST:2.0

void sendPacketConnection ( int socket ) { int hLen = strlen ( myHandle ) ; void * packet = makePacketHandle ( CLIENT_CONNECT , hLen , myHandle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
(2) FILE: ../../server.c LINES:242:10 TOKENS:1138:1198 DIST:3.2

int serverFD ; int * clientFDs = NULL ; char * * handles = NULL ; int clientNum = 0 ; int main ( int argc , char * argv [ ] ) { serverFD = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int fd ) { clientNum ++ ; clientFDs = realloc ( clientFDs , sizeof ( int ) * clientNum ) ; clientFDs [ clientNum - 1 ] = fd ; handles = realloc ( handles , sizeof ( char * ) * clientNum ) ; handles [ clientNum - 1 ] = NULL ; } void setClientName ( void * packet , int fd ) { int i = 0 ; char * name = NULL ; getFirstHandle ( packet , & name ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] == fd ) { if ( getFDForName ( name ) != - 1 ) { free ( name ) ; sendPacketFlag ( CONNECT_ERROR , clientFDs [ i ] ) ; removeClient ( fd ) ; } else { handles [ i ] = name ; sendPacketFlag ( CONNECT_ACK , clientFDs [ i ] ) ; printf ( "Welcome: %s\n" , handles [ i ] ) ; } return ; } } } int getFDForName ( char * name ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( handles [ i ] != NULL && strcmp ( name , handles [ i ] ) == 0 ) { return clientFDs [ i ] ; } } return - 1 ; } void removeClient ( int fd ) { int i = 0 ; int * newClientFDs ; char * * newHandles ; int foundFD = 0 ; clientNum -- ; newClientFDs = ( int * ) malloc ( sizeof ( int ) * clientNum ) ; newHandles = ( char * * ) malloc ( sizeof ( char * ) * clientNum ) ; for ( i = 0 ; i <= clientNum ; i ++ ) { if ( clientFDs [ i ] != fd ) { if ( ! foundFD ) { newClientFDs [ i ] = clientFDs [ i ] ; newHandles [ i ] = handles [ i ] ; } else { newClientFDs [ i - 1 ] = clientFDs [ i ] ; newHandles [ i - 1 ] = handles [ i ] ; } } else { foundFD = 1 ; if ( handles [ i ] != NULL ) { printf ( "Bye %s\n" , handles [ i ] ) ; } free ( handles [ i ] ) ; close ( clientFDs [ i ] ) ; } } free ( handles ) ; free ( clientFDs ) ; handles = newHandles ; clientFDs = newClientFDs ; } int getFDForInput ( ) { ; int i = 0 ; int maxFD = serverFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( serverFD , & fdvar ) ; for ( i = 0 ; i < clientNum ; i ++ ) { FD_SET ( clientFDs [ i ] , & fdvar ) ; } if ( clientNum > 0 ) { maxFD = clientFDs [ clientNum - 1 ] + 1 ; } if ( select ( maxFD , ( ) & fdvar , NULL , NULL , NULL ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( serverFD , & fdvar ) ) { return serverFD ; } else { for ( i = 0 ; i < clientNum ; i ++ ) { if ( FD_ISSET ( clientFDs [ i ] , & fdvar ) ) { return clientFDs [ i ] ; } } } return - 1 ; } void acceptClient ( ) { int clientFD = tcpAccept ( serverFD ) ; addClient ( clientFD ) ; } void process ( ) { int fdToProcess ; while ( 1 ) { fdToProcess = getFDForInput ( ) ; if ( fdToProcess == serverFD ) { acceptClient ( ) ; } else { processPacket ( fdToProcess ) ; } } } void processPacket ( int fd ) { uint8_t * packet = malloc ( MAXBUF ) ; int numBytes = 0 ; if ( ( numBytes = recv ( fd , packet , MAXBUF , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { removeClient ( fd ) ; } switch ( ( ) -> flag ) { case CLIENT_CONNECT : setClientName ( packet , fd ) ; break ; case CLIENT_EXIT : sendPacketFlag ( EXIT_ACK , fd ) ; removeClient ( fd ) ; break ; case CLIENT_BROADCAST : broadCast ( fd , packet ) ; break ; case CLIENT_MESSAGE : forwardMessage ( fd , packet ) ; break ; case CLIENT_HANDLES : sendPacketHandleAck ( HANDLES_ACK , fd ) ; sendHandles ( fd ) ; break ; default : break ; } free ( packet ) ; } void broadCast ( int senderFD , void * packet ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] != senderFD ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } } void forwardMessage ( int senderFD , void * packet ) { int i = 0 ; char * dest = NULL ; int sent = 0 ; getDestHandle ( packet , & dest ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( strcmp ( dest , handles [ i ] ) == 0 ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } sent = 1 ; break ; } } if ( sent == 0 ) { sendPacketFlag ( MESSAGE_ERROR , senderFD ) ; } free ( dest ) ; } void sendPacketHandleAck ( uint8_t flag , int socket ) { ; headerSetLen ( ( ) & head , ( uint16_t ) ( sizeof ( packetHandleAck ) - sizeof ( header ) ) ) ; packetHandleAckSetNum ( & head , clientNum ) ; head . head . flag = flag ; if ( send ( socket , & head , sizeof ( packetHandleAck ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( SERVER_HANDLE , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
(3) FILE: ../../server.c LINES:247:9 TOKENS:1150:1210 DIST:0.0

void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( SERVER_HANDLE , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
========== 18 ==========
(1) FILE: ../../server.c LINES:102:11 TOKENS:434:486 DIST:3.0

int i = 0 ; int * newClientFDs ; char * * newHandles ; int foundFD = 0 ; clientNum -- ; newClientFDs = ( int * ) malloc ( sizeof ( int ) * clientNum ) ; newHandles = ( char * * ) malloc ( sizeof ( char * ) * clientNum ) ; for ( i = 0 ; i <= clientNum ; i ++ ) { if ( clientFDs [ i ] != fd ) { if ( ! foundFD ) { newClientFDs [ i ] = clientFDs [ i ] ; newHandles [ i ] = handles [ i ] ; } else { newClientFDs [ i - 1 ] = clientFDs [ i ] ; newHandles [ i - 1 ] = handles [ i ] ; } } else { foundFD = 1 ; if ( handles [ i ] != NULL ) { printf ( "Bye %s\n" , handles [ i ] ) ; } free ( handles [ i ] ) ; close ( clientFDs [ i ] ) ; } } free ( handles ) ; free ( clientFDs ) ; 
(2) FILE: ../../server.c LINES:53:8 TOKENS:172:222 DIST:0.0

if ( getFDForName ( name ) != - 1 ) { free ( name ) ; sendPacketFlag ( CONNECT_ERROR , clientFDs [ i ] ) ; removeClient ( fd ) ; } else { handles [ i ] = name ; sendPacketFlag ( CONNECT_ACK , clientFDs [ i ] ) ; printf ( "Welcome: %s\n" , handles [ i ] ) ; } 
========== 19 ==========
(1) FILE: ../../cclient.c LINES:251:11 TOKENS:1131:1191 DIST:2.2

if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } if ( strcmp ( cmd , "%M" ) == 0 || strcmp ( cmd , "%m" ) == 0 ) { dst = strtok ( NULL , " \n\t" ) ; if ( dst == NULL ) { printf ( "Invalid command\n" ) ; } else { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( mssg , dst , socketFD ) ; } } didWork = 1 ; } if ( strcmp ( cmd , "%L" ) == 0 || strcmp ( cmd , "%l" ) == 0 ) { sendPacketFlag ( CLIENT_HANDLES , socketFD ) ; didWork = 1 ; } 
(2) FILE: ../../cclient.c LINES:241:11 TOKENS:1067:1130 DIST:0.0

if ( strcmp ( cmd , "%E" ) == 0 || strcmp ( cmd , "%e" ) == 0 ) { sendPacketFlag ( CLIENT_EXIT , socketFD ) ; didWork = 1 ; } if ( strcmp ( cmd , "%B" ) == 0 || strcmp ( cmd , "%b" ) == 0 ) { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketBroadCast ( mssg , socketFD ) ; } didWork = 1 ; } if ( strcmp ( cmd , "%M" ) == 0 || strcmp ( cmd , "%m" ) == 0 ) { dst = strtok ( NULL , " \n\t" ) ; if ( dst == NULL ) { printf ( "Invalid command\n" ) ; } else { mssg = strtok ( NULL , "\n" ) ; if ( mssg == NULL ) { printf ( "Invalid command\n" ) ; } else { sendPacketMssg ( mssg , dst , socketFD ) ; } } didWork = 1 ; } 
========== 20 ==========
(1) FILE: ../../cclient.c LINES:99:13 TOKENS:490:567 DIST:2.8

{ memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } 
(2) FILE: ../../cclient.c LINES:60:12 TOKENS:229:308 DIST:0.0

while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } 
========== 21 ==========
(1) FILE: ../../server.c LINES:204:8 TOKENS:896:947 DIST:0.0

for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] != senderFD ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } 
(2) FILE: ../../server.c LINES:220:10 TOKENS:994:1046 DIST:3.5

for ( i = 0 ; i < clientNum ; i ++ ) { if ( strcmp ( dest , handles [ i ] ) == 0 ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } sent = 1 ; break ; } } 
========== 22 ==========
(1) FILE: ../../server.c LINES:247:8 TOKENS:1153:1209 DIST:3.0

void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( SERVER_HANDLE , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
(2) FILE: ../../server.c LINES:242:10 TOKENS:1138:1198 DIST:0.0

int serverFD ; int * clientFDs = NULL ; char * * handles = NULL ; int clientNum = 0 ; int main ( int argc , char * argv [ ] ) { serverFD = tcpServerSetup ( 0 ) ; process ( ) ; return 0 ; } void addClient ( int fd ) { clientNum ++ ; clientFDs = realloc ( clientFDs , sizeof ( int ) * clientNum ) ; clientFDs [ clientNum - 1 ] = fd ; handles = realloc ( handles , sizeof ( char * ) * clientNum ) ; handles [ clientNum - 1 ] = NULL ; } void setClientName ( void * packet , int fd ) { int i = 0 ; char * name = NULL ; getFirstHandle ( packet , & name ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] == fd ) { if ( getFDForName ( name ) != - 1 ) { free ( name ) ; sendPacketFlag ( CONNECT_ERROR , clientFDs [ i ] ) ; removeClient ( fd ) ; } else { handles [ i ] = name ; sendPacketFlag ( CONNECT_ACK , clientFDs [ i ] ) ; printf ( "Welcome: %s\n" , handles [ i ] ) ; } return ; } } } int getFDForName ( char * name ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( handles [ i ] != NULL && strcmp ( name , handles [ i ] ) == 0 ) { return clientFDs [ i ] ; } } return - 1 ; } void removeClient ( int fd ) { int i = 0 ; int * newClientFDs ; char * * newHandles ; int foundFD = 0 ; clientNum -- ; newClientFDs = ( int * ) malloc ( sizeof ( int ) * clientNum ) ; newHandles = ( char * * ) malloc ( sizeof ( char * ) * clientNum ) ; for ( i = 0 ; i <= clientNum ; i ++ ) { if ( clientFDs [ i ] != fd ) { if ( ! foundFD ) { newClientFDs [ i ] = clientFDs [ i ] ; newHandles [ i ] = handles [ i ] ; } else { newClientFDs [ i - 1 ] = clientFDs [ i ] ; newHandles [ i - 1 ] = handles [ i ] ; } } else { foundFD = 1 ; if ( handles [ i ] != NULL ) { printf ( "Bye %s\n" , handles [ i ] ) ; } free ( handles [ i ] ) ; close ( clientFDs [ i ] ) ; } } free ( handles ) ; free ( clientFDs ) ; handles = newHandles ; clientFDs = newClientFDs ; } int getFDForInput ( ) { ; int i = 0 ; int maxFD = serverFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( serverFD , & fdvar ) ; for ( i = 0 ; i < clientNum ; i ++ ) { FD_SET ( clientFDs [ i ] , & fdvar ) ; } if ( clientNum > 0 ) { maxFD = clientFDs [ clientNum - 1 ] + 1 ; } if ( select ( maxFD , ( ) & fdvar , NULL , NULL , NULL ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( serverFD , & fdvar ) ) { return serverFD ; } else { for ( i = 0 ; i < clientNum ; i ++ ) { if ( FD_ISSET ( clientFDs [ i ] , & fdvar ) ) { return clientFDs [ i ] ; } } } return - 1 ; } void acceptClient ( ) { int clientFD = tcpAccept ( serverFD ) ; addClient ( clientFD ) ; } void process ( ) { int fdToProcess ; while ( 1 ) { fdToProcess = getFDForInput ( ) ; if ( fdToProcess == serverFD ) { acceptClient ( ) ; } else { processPacket ( fdToProcess ) ; } } } void processPacket ( int fd ) { uint8_t * packet = malloc ( MAXBUF ) ; int numBytes = 0 ; if ( ( numBytes = recv ( fd , packet , MAXBUF , 0 ) ) < 0 ) { perror ( "recv call" ) ; exit ( - 1 ) ; } if ( numBytes == 0 ) { removeClient ( fd ) ; } switch ( ( ) -> flag ) { case CLIENT_CONNECT : setClientName ( packet , fd ) ; break ; case CLIENT_EXIT : sendPacketFlag ( EXIT_ACK , fd ) ; removeClient ( fd ) ; break ; case CLIENT_BROADCAST : broadCast ( fd , packet ) ; break ; case CLIENT_MESSAGE : forwardMessage ( fd , packet ) ; break ; case CLIENT_HANDLES : sendPacketHandleAck ( HANDLES_ACK , fd ) ; sendHandles ( fd ) ; break ; default : break ; } free ( packet ) ; } void broadCast ( int senderFD , void * packet ) { int i = 0 ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] != senderFD ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } } } } void forwardMessage ( int senderFD , void * packet ) { int i = 0 ; char * dest = NULL ; int sent = 0 ; getDestHandle ( packet , & dest ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( strcmp ( dest , handles [ i ] ) == 0 ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } sent = 1 ; break ; } } if ( sent == 0 ) { sendPacketFlag ( MESSAGE_ERROR , senderFD ) ; } free ( dest ) ; } void sendPacketHandleAck ( uint8_t flag , int socket ) { ; headerSetLen ( ( ) & head , ( uint16_t ) ( sizeof ( packetHandleAck ) - sizeof ( header ) ) ) ; packetHandleAckSetNum ( & head , clientNum ) ; head . head . flag = flag ; if ( send ( socket , & head , sizeof ( packetHandleAck ) , 0 ) < 0 ) { perror ( "Flag Packet Send" ) ; exit ( 1 ) ; } } void sendPacketHandle ( int socket , char * handle ) { int hLen = strlen ( handle ) ; void * packet = makePacketHandle ( SERVER_HANDLE , hLen , handle ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Connection" ) ; exit ( 1 ) ; } free ( packet ) ; } 
========== 23 ==========
(1) FILE: ../../cclient.c LINES:133:10 TOKENS:671:727 DIST:3.0

; int maxFD = socketFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( socketFD , & fdvar ) ; if ( isConnected ) { FD_SET ( fileno ( stdin ) , & fdvar ) ; } if ( select ( maxFD , ( ) & fdvar , NULL , NULL , NULL ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } if ( FD_ISSET ( socketFD , & fdvar ) ) { return socketFD ; } 
(2) FILE: ../../cclient.c LINES:131:8 TOKENS:655:712 DIST:0.0

; int maxFD = socketFD + 1 ; FD_ZERO ( & fdvar ) ; FD_SET ( socketFD , & fdvar ) ; if ( isConnected ) { FD_SET ( fileno ( stdin ) , & fdvar ) ; } if ( select ( maxFD , ( ) & fdvar , NULL , NULL , NULL ) == - 1 ) { perror ( "Error selecting FD to read from" ) ; exit ( 1 ) ; } 
========== 24 ==========
(1) FILE: ../../server.c LINES:214:8 TOKENS:949:1010 DIST:3.5

void forwardMessage ( int senderFD , void * packet ) { int i = 0 ; char * dest = NULL ; int sent = 0 ; getDestHandle ( packet , & dest ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( strcmp ( dest , handles [ i ] ) == 0 ) { if ( sendPacket ( packet , clientFDs [ i ] ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } sent = 1 ; break ; } } if ( sent == 0 ) { sendPacketFlag ( MESSAGE_ERROR , senderFD ) ; } free ( dest ) ; } 
(2) FILE: ../../server.c LINES:44:9 TOKENS:107:169 DIST:0.0

void setClientName ( void * packet , int fd ) { int i = 0 ; char * name = NULL ; getFirstHandle ( packet , & name ) ; for ( i = 0 ; i < clientNum ; i ++ ) { if ( clientFDs [ i ] == fd ) { if ( getFDForName ( name ) != - 1 ) { free ( name ) ; sendPacketFlag ( CONNECT_ERROR , clientFDs [ i ] ) ; removeClient ( fd ) ; } else { handles [ i ] = name ; sendPacketFlag ( CONNECT_ACK , clientFDs [ i ] ) ; printf ( "Welcome: %s\n" , handles [ i ] ) ; } return ; } } } 
========== 25 ==========
(1) FILE: ../../cclient.c LINES:57:6 TOKENS:204:257 DIST:0.0

char * toSend ; void * packet ; int hLen = strlen ( myHandle ) ; int maxMssgLen = MAXBUF - hLen - sizeof ( header ) - 1 ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } 
(2) FILE: ../../cclient.c LINES:93:9 TOKENS:454:512 DIST:3.5

char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } 
========== 26 ==========
(1) FILE: ../../cclient.c LINES:103:10 TOKENS:519:572 DIST:2.6

char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; 
(2) FILE: ../../cclient.c LINES:65:10 TOKENS:279:331 DIST:0.0

char * toSend ; void * packet ; int hLen = strlen ( myHandle ) ; int maxMssgLen = MAXBUF - hLen - sizeof ( header ) - 1 ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; 
========== 27 ==========
(1) FILE: ../../chatShared.c LINES:45:10 TOKENS:192:247 DIST:0.0

void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } 
(2) FILE: ../../chatShared.c LINES:75:12 TOKENS:320:378 DIST:3.3

void * makePacketMssg ( uint8_t flag , uint8_t destLen , char * destH , uint8_t srcLen , char * srcH , char * mssg ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = destLen ; memcpy ( & ( hPack -> handleStart ) , destH , destLen ) ; * ( ( uint8_t * ) & ( hPack -> handleStart ) + destLen ) = srcLen ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 , srcH , srcLen ) ; memcpy ( & ( hPack -> handleStart ) + destLen + 1 + srcLen , mssg , mssgLen ) ; return packet ; } 
(3) FILE: ../../chatShared.c LINES:50:10 TOKENS:208:260 DIST:3.3

int test ( ) { char * h1 = "abc" ; char * h2 = "xyz" ; char * mssg = "Hello world" ; char * handle1 ; char * handle2 ; char * myMssg ; packetHandle * hPack = makePacketMssg ( 1 , getHLen ( h1 ) , h1 , getHLen ( h2 ) , h2 , mssg ) ; printf ( "%d\n" , headerGetLen ( & ( hPack -> head ) ) ) ; getDestHandle ( hPack , & handle1 ) ; getSrcHandle ( hPack , & handle2 ) ; getMssg ( hPack , & mssg ) ; printf ( "%s\n" , handle1 ) ; printf ( "%s\n" , handle2 ) ; printf ( "%s\n" , mssg ) ; return 0 ; } void headerSetLen ( ) { head -> packetLen = htons ( len + sizeof ( header ) ) ; } uint16_t headerGetLen ( ) { return ntohs ( head -> packetLen ) - sizeof ( header ) ; } void packetHandleAckSetNum ( ) { packet -> numHandles = htonl ( num ) ; } uint32_t packetHandleAckGetNum ( ) { return ntohl ( packet -> numHandles ) ; } void * makePacketHandle ( uint8_t flag , uint8_t hLen , char * handle ) { ; hPack -> head . flag = flag ; headerSetLen ( & ( hPack -> head ) , len ) ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; return packet ; } void * makePacketBroadcast ( uint8_t flag , uint8_t hLen , char * handle , char * mssg ) { ; hPack -> handleLen = hLen ; memcpy ( & ( hPack -> handleStart ) , handle , hLen ) ; memcpy ( & ( hPack -> handleStart ) + hLen , mssg , mssgLen ) ; return packet ; } 
========== 28 ==========
(1) FILE: ../../cclient.c LINES:112:7 TOKENS:568:624 DIST:2.8

char * toSend ; void * packet ; int srcLen = strlen ( myHandle ) ; int destLen = strlen ( dest ) ; int maxMssgLen = MAXBUF - ( srcLen + 1 ) - ( destLen + 1 ) - sizeof ( header ) ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketMssg ( CLIENT_MESSAGE , destLen , dest , srcLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Message" ) ; exit ( 1 ) ; } 
(2) FILE: ../../cclient.c LINES:70:8 TOKENS:305:361 DIST:0.0

char * toSend ; void * packet ; int hLen = strlen ( myHandle ) ; int maxMssgLen = MAXBUF - hLen - sizeof ( header ) - 1 ; int mssgNum = ( strlen ( mssg ) + 1 ) / maxMssgLen ; int consumed = 0 ; int theRest = ( ( strlen ( mssg ) + 1 ) % maxMssgLen ) + mssgNum ; toSend = malloc ( maxMssgLen ) ; while ( mssgNum > 0 ) { memcpy ( toSend , mssg + consumed , maxMssgLen - 1 ) ; toSend [ maxMssgLen - 1 ] = 0 ; consumed += maxMssgLen - 1 ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } free ( packet ) ; mssgNum -- ; } free ( toSend ) ; toSend = malloc ( theRest ) ; memcpy ( toSend , mssg + consumed , theRest ) ; packet = makePacketBroadcast ( CLIENT_BROADCAST , hLen , myHandle , toSend ) ; if ( sendPacket ( packet , socket ) < 0 ) { perror ( "Packet Broadcast" ) ; exit ( 1 ) ; } 
